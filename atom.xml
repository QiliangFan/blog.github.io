<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Torch-Fan</title>
  
  <subtitle>学习笔记~</subtitle>
  <link href="https://www.torch-fan.site/atom.xml" rel="self"/>
  
  <link href="https://www.torch-fan.site/"/>
  <updated>2022-11-15T02:27:36.105Z</updated>
  <id>https://www.torch-fan.site/</id>
  
  <author>
    <name>Torch-Fan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 清理垃圾</title>
    <link href="https://www.torch-fan.site/2022/09/29/Mac-%E6%B8%85%E7%90%86%E5%9E%83%E5%9C%BE/"/>
    <id>https://www.torch-fan.site/2022/09/29/Mac-%E6%B8%85%E7%90%86%E5%9E%83%E5%9C%BE/</id>
    <published>2022-09-29T01:12:48.000Z</published>
    <updated>2022-11-15T02:27:36.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-清理日志文件"><a class="markdownIt-Anchor" href="#1-清理日志文件"></a> 1 清理日志文件:</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不是很推荐把log文件夹给删除, 删除内容就行</span><br>sudo <span class="hljs-built_in">rm</span> -rf /private/var/log/*<br>sudo <span class="hljs-built_in">rm</span> -rf /private/var/logs/*<br></code></pre></td></tr></table></figure><h1 id="2-清理临时文件和缓存文件"><a class="markdownIt-Anchor" href="#2-清理临时文件和缓存文件"></a> 2 清理临时文件和缓存文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> -rf /private/var/tmp/*<br><br>sudo <span class="hljs-built_in">rm</span> -rf ~/Library/Caches/*<br></code></pre></td></tr></table></figure><h1 id="3-删除本机的时间机器备份注意-不是指时间机器备份硬盘"><a class="markdownIt-Anchor" href="#3-删除本机的时间机器备份注意-不是指时间机器备份硬盘"></a> 3 删除本机的时间机器备份(注意, 不是指时间机器备份硬盘)</h1><blockquote><p>Mac OS 除了用硬盘搞时间机器备份, 他自己还会搞一份备份</p><p>删除时间机器缓存最节省空间的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本机上所有本地时间机器缓存</span><br>sudo tmutil listlocalsnapshots /<br><br><span class="hljs-comment"># 删除指定的时间机器备份缓存(可以多出很多~, 系统文件大部分都是这些搞的备份)</span><br>tmutil deletelocalsnapshots 2022-09-28-105624<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-清理日志文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-清理日志文件&quot;&gt;&lt;/a&gt; 1 清理日志文件:&lt;/h1&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
    <category term="Mac OS" scheme="https://www.torch-fan.site/tags/Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>vscode连接虚拟机小贴士</title>
    <link href="https://www.torch-fan.site/2022/09/23/vscode%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    <id>https://www.torch-fan.site/2022/09/23/vscode%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B0%8F%E8%B4%B4%E5%A3%AB/</id>
    <published>2022-09-23T11:09:38.000Z</published>
    <updated>2022-11-15T02:27:36.105Z</updated>
    
    <content type="html"><![CDATA[<p>谈到vscode连接虚拟机, 很多人第一想到桥接模式, 但是对于wifi网卡, 现阶段似乎无法实现,如果对wifi网卡使用桥接, 客户机将没有网络, 还表现为没有路由和ipv4地址, 因此这篇笔记主要是为那些使用笔记本(拥有无线网卡)的同学准备.</p><h1 id="1-准备工作"><a class="markdownIt-Anchor" href="#1-准备工作"></a> 1. 准备工作:</h1><p>创建一个NAT网络的虚拟机.</p><h1 id="2-配置端口映射"><a class="markdownIt-Anchor" href="#2-配置端口映射"></a> 2. 配置端口映射:</h1><p>在NAT模式下, 客户机的IP是不被感知的, 为了能够方便的访问到客户机, 我们进行端口映射(有时也叫NAT映射).</p><p>思路: 我们可以在virtual box中将<code>宿主机的端口</code>映射到<code>客户机的端口</code>:</p><p>假设我们有客户机IP: <code>10.0.2.15</code></p><p><img src="https://s1.ax1x.com/2022/09/23/xkXQaR.jpg" alt="客户机IP" /></p><p>我们设立如下的端口映射:</p><table><thead><tr><th style="text-align:center">Host</th><th style="text-align:center">Guest</th></tr></thead><tbody><tr><td style="text-align:center">127.0.0.1:22</td><td style="text-align:center">10.0.2.15:22</td></tr></tbody></table><blockquote><p>下图中配置的映射是 127.0.0.1:2233 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 10.0.2.15:22, 但是为了方便, 推荐将主机端口换为22, 这样连接时就不用额外的参数,至于端口冲突,最后一节给出解决思路.</p></blockquote><p><img src="https://s1.ax1x.com/2022/09/23/xkX3Px.jpg" alt="端口映射" /></p><h1 id="3-访问客户机"><a class="markdownIt-Anchor" href="#3-访问客户机"></a> 3. 访问客户机:</h1><p>如果我们需要SSH到客户机, 一般想的可能是直接ssh: <code>ssh guest_user@&lt;guest_ip&gt;</code>, 但是NAT情况下IP是不感知的, 因此无法访问, 但是我们做端口映射之后, 就变了, 我们可以通过这种方式访问客户机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh guest_user@127.0.0.1 <span class="hljs-comment"># 事实上, 他是ssh到客户机上, 登陆用户名为guest_user</span><br></code></pre></td></tr></table></figure><p>随后如果想使用vscode, 像往常一样即可.</p><h1 id="4-其他"><a class="markdownIt-Anchor" href="#4-其他"></a> 4. 其他:</h1><p>上文我们讲到, 将本机的22端口映射到客户机的22端口, 但是本机的22端口并不总是空闲的, 为此我们可能将2233端口映射到客户机的22端口, 访问方式就变化了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -p 2233 guest_user@127.0.0.1<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谈到vscode连接虚拟机, 很多人第一想到桥接模式, 但是对于wifi网卡, 现阶段似乎无法实现,如果对wifi网卡使用桥接, 客户机将没有网络, 还表现为没有路由和ipv4地址, 因此这篇笔记主要是为那些使用笔记本(拥有无线网卡)的同学准备.&lt;/p&gt;
&lt;h1 id=&quot;1</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CMU Bomblab(汇编小笔记)</title>
    <link href="https://www.torch-fan.site/2022/09/22/CMU-Bomblab-%E6%B1%87%E7%BC%96%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.torch-fan.site/2022/09/22/CMU-Bomblab-%E6%B1%87%E7%BC%96%E5%B0%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-22T09:59:06.000Z</published>
    <updated>2022-11-15T02:27:36.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考: <a href="https://github.com/CurryTang/bomb_lab_solution">https://github.com/CurryTang/bomb_lab_solution</a></p></blockquote><blockquote><p>以下从x64架构为准</p></blockquote><h1 id="1-相关指令"><a class="markdownIt-Anchor" href="#1-相关指令"></a> 1. 相关指令:</h1><h2 id="11-objdump-用于给出所有汇编指令"><a class="markdownIt-Anchor" href="#11-objdump-用于给出所有汇编指令"></a> 1.1 objdump: 用于给出所有汇编指令</h2><blockquote><p>objdump -d</p><p><code>Display assembler contents of executable sections</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d xxx &gt; xxx.asm<br></code></pre></td></tr></table></figure><h2 id="12-gdb"><a class="markdownIt-Anchor" href="#12-gdb"></a> 1.2 gdb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb &lt;program&gt; <span class="hljs-comment"># 调试程序</span><br>p &lt;var&gt;  <span class="hljs-comment"># 打印变量</span><br>b &lt;func&gt;  <span class="hljs-comment"># 给函数设置端点</span><br>c <span class="hljs-comment"># continue</span><br>n <span class="hljs-comment"># next line, stepping over function calls</span><br>s <span class="hljs-comment"># next line, stepping into funciton calls</span><br>list <span class="hljs-comment"># 展开源程序代码</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">p/c *0x2000@10 <span class="hljs-comment"># 查看内存字符值</span><br>x /25c 0x2000  <span class="hljs-comment"># x本身就是看内存的, 不需要加*</span><br><br>p/x <span class="hljs-variable">$eax</span> <span class="hljs-comment"># 查看寄存器值的8进制形式</span><br><br>x /20a 0x2000<br></code></pre></td></tr></table></figure><p>x 按十六进制格式显示变量。</p><p>d 按十进制格式显示变量。</p><p>u 按十六进制格式显示无符号整型。</p><p>o 按八进制格式显示变量。</p><p>t 按二进制格式显示变量。</p><p>a 按十六进制格式显示变量。</p><p>c 按字符格式显示变量。</p><p>f 按浮点数格式显示变量。</p><p>切换栈帧:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bt</span><br><br><span class="hljs-attribute">f</span><span class="hljs-meta"> [N]</span><br></code></pre></td></tr></table></figure><p>显示所有寄存器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> registers<br></code></pre></td></tr></table></figure><p>看寄存器的值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span> /<span class="hljs-number">16</span>xb $eax+<span class="hljs-number">0</span>x14<br></code></pre></td></tr></table></figure><h2 id="13-strings"><a class="markdownIt-Anchor" href="#13-strings"></a> 1.3 strings</h2><p>如果从汇编中看到某些关键字符, 可以这样获取一整句话:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings bomb | grep keywords<br></code></pre></td></tr></table></figure><h1 id="2-bomblab实验操作"><a class="markdownIt-Anchor" href="#2-bomblab实验操作"></a> 2. Bomblab实验操作</h1><ol><li>开启汇编窗口(好查看对应的汇编代码)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">layout asm<br></code></pre></td></tr></table></figure><ol start="2"><li>打断点</li></ol><p>在进每个阶段前且在readline前打断点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b *0x400e37 <span class="hljs-comment"># 地址\指针前要有 *</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">b phase_1<br>b phase_2<br>b phase_3<br>b phase_4<br>b phase_5<br>b phase_6<br></code></pre></td></tr></table></figure><ol start="3"><li>开始运行,进行调试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">r<br><br><span class="hljs-comment"># 查看某一个地址/函数的汇编 (如果不在运行没法根据地址看汇编, 只能用函数名名字)</span><br>disassem *0x400ee0<br><br>disassem phase_1<br><br>disassem strings_not_equal<br></code></pre></td></tr></table></figure><h1 id="3-看汇编"><a class="markdownIt-Anchor" href="#3-看汇编"></a> 3. 看汇编</h1><p>x86系统中,栈的地址是从高地址往低地址, push栈帧的时候, rsp(<code>stack pointer</code>)减少四个字节.</p><p><img src="https://s1.328888.xyz/2022/09/22/IoR1S.png" alt="寄存器" /></p><h2 id="31-通用寄存器64位寄存器"><a class="markdownIt-Anchor" href="#31-通用寄存器64位寄存器"></a> 3.1 通用寄存器(64位寄存器)</h2><p>0x8(%rsp) 表示上一个变量(一般第一个)</p><blockquote><p>bomb中将string_length的返回值放在EAX中</p></blockquote><p>EAX: accumulator, 加法乘法指令的缺省寄存器<br />EBX: base基地址寄存器,在内存寻址时存放基地址<br />ECX: counter计数器, 重复(REP)前缀指令和LOOP指令的内定计数器<br />EDX: 存放整数除法产生的余数<br />ESI/EDI: source/destination index, 字符串操作指令里, DS:ESI指向源串, ES:EDI指向目标串<br />EBP: base pointer, 高级语言函数调用时的frame pointer保存地方<br />如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push ebp;  // 保存当前ebp<br>mov ebp,esp; // ebp设为当前<br>sub esp,xxx;  // 预留xxx字节给函数临时变量<br></code></pre></td></tr></table></figure><p>ESP: 专门用作堆栈的顶部指针</p><h2 id="32-其他寄存器"><a class="markdownIt-Anchor" href="#32-其他寄存器"></a> 3.2 其他寄存器:</h2><p>R0~R12 是64位工作寄存器, 其中R12有可能被linker修改,所以函数开头经常对R12进行保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">push %r12 <span class="hljs-comment"># 将R12的内容推入堆栈进行保护</span><br></code></pre></td></tr></table></figure><p>当函数参数少于7个时, 从左到右参数依次放入寄存器:</p><ul><li>rdi</li><li>rsi</li><li>rdx</li><li>rcx</li><li>r8</li><li>r9</li></ul><h2 id="33-条件跳转指令和比较指令"><a class="markdownIt-Anchor" href="#33-条件跳转指令和比较指令"></a> 3.3 条件跳转指令和比较指令:</h2><blockquote><p><a href="https://faydoc.tripod.com/cpu/jle.htm">https://faydoc.tripod.com/cpu/jle.htm</a></p></blockquote><p><code>test</code> 指令主要将两个操作数按位与, 并根据结果设置<code>标志寄存器</code> (结果不会写回到目标操作数), <code>test</code>的两个寄存器只有都是空(全0)时或者不同时, ZF才会被置位</p><blockquote><p>注意: addq src, dst -&gt; dst = dst + src, 会将结果写回到目标寄存器上</p></blockquote><p><code>test</code>指令位与运算结果为0的话, ZF(Zero Flag)设为0.</p><p><code>je</code> 是jz(jump if zero)的别称.<br /><code>jne</code>就是反过来的条件跳转指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cmp</span> eax, edx<br>ja somewhere ; <span class="hljs-attribute">will</span> go <span class="hljs-string">&quot;somewhere&quot;</span> if eax &gt;u edx<br>             ; <span class="hljs-attribute">where</span> &gt;u is <span class="hljs-string">&quot;unsigned greater than&quot;</span><br><br>cmp eax, edx<br>jg somewhere ; <span class="hljs-attribute">will</span> go <span class="hljs-string">&quot;somewhere&quot;</span> if eax &gt;s edx<br>             ; <span class="hljs-attribute">where</span> &gt;s is <span class="hljs-string">&quot;signed greater than&quot;</span><br></code></pre></td></tr></table></figure><p><code>cmpb</code>: 判断是否相等, 然后置ZF为1:</p><p><code>cmpl</code>:<br />For &gt;, there is ja for unsigned and jg for signed (jump if above and jump if greater).</p><pre><code class="hljs">For &lt;, there is jb for unsigned and jl for signed (jump if below and jump if less).</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmpb <span class="hljs-variable">$0x0</span>, (%edx)<br></code></pre></td></tr></table></figure><p><code>(%edx)</code> 表示 %edx中所保存的地址指向单元的内容(即取指针所指内容)</p><h2 id="34-寄存器操作"><a class="markdownIt-Anchor" href="#34-寄存器操作"></a> 3.4 寄存器操作:</h2><blockquote><p><a href="https://stackoverflow.com/questions/19748074/meaning-of-0x8rsp">https://stackoverflow.com/questions/19748074/meaning-of-0x8rsp</a></p></blockquote><p><code>0x8(%rsp)</code> means &quot;get the location on the stack that is 8 bytes away from the stack pointer %rsp</p><p><code>lea</code>: 和mov很像, 不过有其他作用</p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他:</h1><p>因为不同同学的bomb内容不同, 我帮的一位同学比网上的版本要稍微复杂一些,共计19小时,bingo~</p><p>这篇笔记只是零星随笔, 帮助自己回忆汇编, 日后有机会会综合整理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://github.com/CurryTang/bomb_lab_solution&quot;&gt;https://github.com/CurryTang/bomb_lab_solution&lt;/a&gt;&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    <category term="汇编" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Generate 204链接收集</title>
    <link href="https://www.torch-fan.site/2022/09/04/Generate-204%E9%93%BE%E6%8E%A5%E6%94%B6%E9%9B%86/"/>
    <id>https://www.torch-fan.site/2022/09/04/Generate-204%E9%93%BE%E6%8E%A5%E6%94%B6%E9%9B%86/</id>
    <published>2022-09-04T04:39:15.000Z</published>
    <updated>2022-11-15T02:27:36.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意, 这些链接都可以用https替代, 但是并不推荐.</p></blockquote><ul><li><a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204</a></li><li><a href="http://cp.cloudflare.com/generate_204">http://cp.cloudflare.com/generate_204</a></li><li><a href="http://www.qualcomm.cn/generate_204">http://www.qualcomm.cn/generate_204</a></li><li><a href="http://clients3.google.com/generate_204">http://clients3.google.com/generate_204</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注意, 这些链接都可以用https替代, 但是并不推荐.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gstatic.com/generate_204&quot;&gt;http://www.gstatic.com</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>dbs结项报告</title>
    <link href="https://www.torch-fan.site/2022/09/03/dbs%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.torch-fan.site/2022/09/03/dbs%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/</id>
    <published>2022-09-03T08:24:39.000Z</published>
    <updated>2022-11-15T02:27:36.104Z</updated>
    
    <content type="html"><![CDATA[<center>    <font size="10"><bold>使用命令行参数启动微型虚拟机</bold></font>    <br/><br/></center><h1 id="1-项目实现方案研究"><a class="markdownIt-Anchor" href="#1-项目实现方案研究"></a> 1. 📽 项目实现方案研究:</h1><blockquote><p>实现方案给出是为了提供<font color="cyan">可复现性</font></p></blockquote><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>处理器</td><td>AMD® Ryzen 7 4800h with radeon graphics × 16</td></tr><tr><td>内存</td><td>32g</td></tr><tr><td>显卡</td><td>NVIDIA Corporation TU117M [GeForce GTX 1650 Ti Mobile] / NVIDIA GeForce GTX 1650 Ti/PCIe/SSE2</td></tr><tr><td>OS</td><td>Ubuntu 22.04 LTS</td></tr><tr><td>rustc版本</td><td>rustc 1.62.1</td></tr></tbody></table><h2 id="11-参考目标-firecracker"><a class="markdownIt-Anchor" href="#11-参考目标-firecracker"></a> 1.1 🎲 参考目标: <a href="https://github.com/firecracker-microvm/firecracker">firecracker</a></h2><h3 id="111-构建firecracker"><a class="markdownIt-Anchor" href="#111-构建firecracker"></a> 1.1.1 构建<code>firecracker</code></h3><blockquote><p>cargo的使用文档: <a href="https://doc.rust-lang.org/cargo/index.html">https://doc.rust-lang.org/cargo/index.html</a></p><p>如果需要编译其他平台的crate, 可能还需要用rustup添加对应的toolchain, rustup的使用文档: <a href="https://rust-lang.github.io/rustup/index.html">https://rust-lang.github.io/rustup/index.html</a></p></blockquote><ol><li>拉取源码:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/firecracker-microvm/firecracker<br><span class="hljs-built_in">cd</span> firecracker<br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置依赖</p><blockquote><p>构建firecraker依赖于<code>Docker</code>, 我的个人博客上docker的安装笔记可供参考: <a href="https://www.torch-fan.site/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/">Ubuntu上使用Docker</a></p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential clang<br>cargo check <br></code></pre></td></tr></table></figure><ol start="3"><li>构建firecracker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tools/devtool build<br><br><span class="hljs-comment"># release</span><br>tools/devtool build --release<br></code></pre></td></tr></table></figure><h3 id="112-使用firecracker创建虚拟机"><a class="markdownIt-Anchor" href="#112-使用firecracker创建虚拟机"></a> 1.1.2 使用<code>firecracker</code>创建虚拟机</h3><blockquote><p>参考资料: <a href="https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md">https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md</a></p></blockquote><blockquote><p>事实上, 报告的最终目的目的并不在于描述构建firecraker或者使用dbs之类的方式, 而是借助对firecraker的了解来辅助使用命令行参数从<code>DBS</code>中启动一个虚拟机, 因此文档叙述不以线性进行, 将进行跳转, 体现思考的过程.</p></blockquote><p>​使用firecracker创建虚拟机, 需要这些内容:</p><ol><li><code>API socket</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./firecracker --api-sock /tmp/firecracker.socket<br></code></pre></td></tr></table></figure><ol start="2"><li><p><code>Linux kernel</code></p></li><li><p><code>rootfs</code></p></li></ol><p>​因此当我们开始了解<code>DBS</code>时, 需要关注<code>DBS</code>已经具备和不具备的要素,</p><h2 id="12-更进一步"><a class="markdownIt-Anchor" href="#12-更进一步"></a> 1.2 🦌 更进一步</h2><blockquote><p>上面的步骤不存在任何困难, 但我们并不关心是否创建好虚拟机, 而关注在firecracker一开始是如何创建一个虚拟机</p></blockquote><h3 id="121-vmm的对外接口"><a class="markdownIt-Anchor" href="#121-vmm的对外接口"></a> 1.2.1 VMM的对外接口</h3><blockquote><p>定位到<code>src/firecracker/src/main.rs</code>, 关注在<code>api-sock</code>命令行参数</p></blockquote><p>firecracker对虚拟机进行配置主要分为<font color="cyan"><strong>两种形式</strong></font>:</p><ol><li>HTTP API的请求方式进行配置(也可以同时指定配置文件)</li><li>通过指定配置文件的方式进行配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">rootfs_path=$(<span class="hljs-built_in">pwd</span>)<span class="hljs-string">&quot;/hello-rootfs.ext4&quot;</span><br>curl --unix-socket /tmp/firecracker.socket -i \<br>  -X PUT <span class="hljs-string">&#x27;http://localhost/drives/rootfs&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: application/json&#x27;</span>           \<br>  -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>     \<br>  -d <span class="hljs-string">&quot;&#123;</span><br><span class="hljs-string">        \&quot;drive_id\&quot;: \&quot;rootfs\&quot;,</span><br><span class="hljs-string">        \&quot;path_on_host\&quot;: \&quot;<span class="hljs-variable">$&#123;rootfs_path&#125;</span>\&quot;,</span><br><span class="hljs-string">        \&quot;is_root_device\&quot;: true,</span><br><span class="hljs-string">        \&quot;is_read_only\&quot;: false</span><br><span class="hljs-string">   &#125;&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不使用API进行配置, 传入配置文件</span><br>./firecracker --api-sock /tmp/firecracker.socket --config-file &lt;path_to_the_configuration_file&gt;<br></code></pre></td></tr></table></figure><blockquote><p>对于DBS而言, 项目最初目标是通过命令行参数进行启动, 而不需要kata的环境, 因此我们可以关注在使用配置文件创建虚拟机的代码逻辑部分, 因此可以关注函数<code>run_without_api</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>  <code>VmResources::from_json</code></p></blockquote><h3 id="122-rootfs和linux-kernel的使用方式"><a class="markdownIt-Anchor" href="#122-rootfs和linux-kernel的使用方式"></a> 1.2.2 rootfs和Linux kernel的使用方式</h3><blockquote><p>要了解rootfs和Linux kernel如何被使用了, 需要从<code>main.rs</code>的<code>run_without_api</code>中, 深入到<code>build_microvm_from_json</code></p></blockquote><ul><li>kernel被以<code>VmmConfig::block_devices</code>的形式传入</li><li>rootfs作为<code>VmmConfig::block_devices</code>配置的一部分进行传入</li><li>至于启动虚拟机等命令, 则可以HTTP API形式, 传递给<code>api_server/src/lib.rs</code>, 接受请求<code>/actions</code>的参数, 并启动配置好的虚拟机</li></ul><blockquote><p>至此, 我们可以带着疑问, 边开始实现我们的项目需求, 边浏览了解firecracker是如何实现的.</p></blockquote><h1 id="2-阶段一-创建命令行前端接口"><a class="markdownIt-Anchor" href="#2-阶段一-创建命令行前端接口"></a> 2. 🔨 阶段一: 创建命令行前端接口</h1><blockquote><p>由于rust编程经验不多, 因此尽可能使用第三方库, 在命令行解析上, 选用<a href="https://github.com/clap-rs/clap">clap</a> (Dual-licensed under <code>Apache 2.0</code> or <code>MIT</code>, 对于DBS而言, 正好可以用<code>Apache 2.0</code>)</p><p><code>clap</code>的使用文档: <a href="https://docs.rs/clap/latest/clap/">https://docs.rs/clap/latest/clap/</a></p></blockquote><h2 id="21-命令行配置项"><a class="markdownIt-Anchor" href="#21-命令行配置项"></a> 2.1 🍨 命令行配置项</h2><blockquote><p>从<a href="https://github.com/kata-containers/kata-containers/tree/runtime-rs">kata-containers</a>的<code>runtime-rs</code>分支中, 可以在<code>dragonball::vm::VmConfigInfo</code>中看到DBS使用的虚拟机配置.</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CpuTopology</span> &#123;<br>    <span class="hljs-comment">/// threads per core to indicate hyperthreading is enabled or not</span><br>    <span class="hljs-keyword">pub</span> threads_per_core: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// cores per die to guide guest cpu topology init</span><br>    <span class="hljs-keyword">pub</span> cores_per_die: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// dies per socket to guide guest cpu topology</span><br>    <span class="hljs-keyword">pub</span> dies_per_socket: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// number of sockets</span><br>    <span class="hljs-keyword">pub</span> sockets: <span class="hljs-type">u8</span>,<br>&#125;<br><br><span class="hljs-meta">#[derive(Clone, Debug, PartialEq)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VmConfigInfo</span> &#123;<br>    <span class="hljs-comment">/// Number of vcpu to start.</span><br>    <span class="hljs-keyword">pub</span> vcpu_count: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// Max number of vcpu can be added</span><br>    <span class="hljs-keyword">pub</span> max_vcpu_count: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// cpu power management.</span><br>    <span class="hljs-keyword">pub</span> cpu_pm: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// cpu topology information</span><br>    <span class="hljs-keyword">pub</span> cpu_topology: CpuTopology,<br>    <span class="hljs-comment">/// vpmu support level</span><br>    <span class="hljs-keyword">pub</span> vpmu_feature: <span class="hljs-type">u8</span>,<br><br>    <span class="hljs-comment">/// Memory type that can be either hugetlbfs or shmem, default is shmem</span><br>    <span class="hljs-keyword">pub</span> mem_type: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// Memory file path</span><br>    <span class="hljs-keyword">pub</span> mem_file_path: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// The memory size in MiB.</span><br>    <span class="hljs-keyword">pub</span> mem_size_mib: <span class="hljs-type">usize</span>,<br><br>    <span class="hljs-comment">/// sock path</span><br>    <span class="hljs-keyword">pub</span> serial_path: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">String</span>&gt;,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>clap</code>定义命令行参数后，具体内容如下:</p><table><thead><tr><th style="text-align:center">arguments</th><th style="text-align:center">required</th><th style="text-align:center">default value</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center"><code>rootfs</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path to rootfs image.</td></tr><tr><td style="text-align:center"><code>kernel-path</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path of kernel image (Only uncompressed kernel is supported for Dragonball).</td></tr><tr><td style="text-align:center"><code>log-file</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;dbs-cli.log&quot;</code></td><td style="text-align:center">The path to log file</td></tr><tr><td style="text-align:center"><code>log-level</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;Info&quot;</code></td><td style="text-align:center">The logging level.</td></tr><tr><td style="text-align:center"><code>boot-args</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1</code></td><td style="text-align:center">The boot arguments passed to the kernel.</td></tr><tr><td style="text-align:center"><code>is-root</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>true</code></td><td style="text-align:center">Decide the device to be the root boot device or not.</td></tr><tr><td style="text-align:center"><code>is-read-only</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">The driver opened in read-only or not.</td></tr><tr><td style="text-align:center"><code>vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of vcpu to start.</td></tr><tr><td style="text-align:center"><code>max-vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The max number of vpu can be added.</td></tr><tr><td style="text-align:center"><code>cpu-pm</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>0</code></td><td style="text-align:center">vpmu support level.</td></tr><tr><td style="text-align:center"><code>threads-per-core</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Threads per core to indicate hyper-threading is enabled or not.</td></tr><tr><td style="text-align:center"><code>cores-per-die</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Cores per die to guide guest cpu topology init.</td></tr><tr><td style="text-align:center"><code>dies-per-socket</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Dies per socket to guide guest cpu topology.</td></tr><tr><td style="text-align:center"><code>sockets</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of sockets.</td></tr><tr><td style="text-align:center"><code>mem-type</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>shmem</code></td><td style="text-align:center">Memory type that can be either hugetlbfs or shmem.</td></tr><tr><td style="text-align:center"><code>mem-file</code></td><td style="text-align:center">false</td><td style="text-align:center">``</td><td style="text-align:center">Memory file path.</td></tr><tr><td style="text-align:center"><code>initrd-path</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>None</code></td><td style="text-align:center">The path of initrd.</td></tr></tbody></table><h2 id="22-参数相关的注意事项"><a class="markdownIt-Anchor" href="#22-参数相关的注意事项"></a> 2.2 参数相关的注意事项:</h2><p>整个命令行参数最为关键的三个参数是<code>rootfs</code>, <code>kernel-path</code> 和 <code>boot-args</code>. 由于从命令行终端进入vm的console采用的方式是将ttySx的输出重定向到当前终端的stdout, 因此需要确保kernel支持serial console并且rootfs在构建时需要配置好启动之后能够启动对应终端, 否则将无法进入vm. 对于<code>boot-args</code>, <code>console=xx</code>和<code>root=&quot;dev/vda1&quot;</code> 是根据对应rootfs的设置来的, 因此虽然不是必须给出的参数, 但是需要自行查看是否需要有所修改。</p><h1 id="3-阶段二-项目实现思路及问题解决"><a class="markdownIt-Anchor" href="#3-阶段二-项目实现思路及问题解决"></a> 3. 🔥 阶段二： 项目实现思路及问题解决</h1><h2 id="31-命令行参数"><a class="markdownIt-Anchor" href="#31-命令行参数"></a> 3.1 命令行参数：</h2><p>​根据firecraker和kata-container现有代码，确定启动虚拟机必备参数后，便可直接用<code>clap</code>提供的一些<code>derive</code>来定义命令行参数，参数项见上表，暂无问题出现。</p><h2 id="32-进入vm终端"><a class="markdownIt-Anchor" href="#32-进入vm终端"></a> 3.2 进入vm终端：</h2><p>​基于现有kata-container的一些创建vm、启动vm、创建设备等API，只需进行简单的修改调用即可完成。但是最后在IO上出现问题，具体可以描述为创建vm的标准输入输出终端时，<code>com1</code>未将输出重定向到stdout，导致无法与vm进行交互。</p><p>​解决方法，为<code>com1</code>设置输出流并重定向到<code>stdout</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">device.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">set_output_stream</span>(<span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(std::io::<span class="hljs-title function_ invoke__">stdout</span>())));<br></code></pre></td></tr></table></figure><h2 id="33-基本原理-serial-console"><a class="markdownIt-Anchor" href="#33-基本原理-serial-console"></a> 3.3 基本原理： <code>serial console</code></h2><ul><li><a href="https://www.kernel.org/doc/html/latest/admin-guide/serial-console.html">Linux Serial Console — The Linux Kernel documentation</a></li><li><a href="https://tldp.org/HOWTO/Serial-HOWTO-10.html">Serial HOWTO: Serial Port Devices /dev/ttyS2, etc. (tldp.org)</a></li></ul><blockquote><p>下图为串口对应终端名以及IO地址</p></blockquote><p><img src="https://s1.ax1x.com/2022/08/29/vfSKR1.png" alt="" /></p><p><code>kata-container</code>在<code>runtime-rs</code>分支下，com2被用来输出日志信息（同时也将dmesg也写入logger了），因此只能使用设备com1连接到对应的终端。</p><blockquote><p><code>console=device,options</code> 用来指定终端的输出，该参数放在kernel的启动参数中。</p><p><code>device</code>可能的值为：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">tty0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> foreground virtual console<br>                ttyX <span class="hljs-keyword">for</span> <span class="hljs-keyword">any</span> other virtual console<br>                ttySx <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> serial port<br>                lp0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> parallel port<br>                ttyUSB0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> USB serial device<br></code></pre></td></tr></table></figure></blockquote><p>在<code>kata-container</code>仓库<code>runtime-rs</code>分支的现有代码下，已经有通过socket进入serial console的代码，但是从命令行将stdio重定向到虚拟机serial console的代码却不能达到正常预期。在通过反复浏览代码，通过<code>3.2</code>中的修改，解决了无法创建stdio console的问题，再加上此前实现的命令行参数解析，整个流程就已经完成了。</p><h1 id="4-项目成果展示"><a class="markdownIt-Anchor" href="#4-项目成果展示"></a> 4. 项目成果展示：</h1><h2 id="41-本地开发仓库"><a class="markdownIt-Anchor" href="#41-本地开发仓库"></a> 4.1 本地开发仓库：</h2><p>仓库地址： <a href="https://github.com/QiliangFan/kata-containers">https://github.com/QiliangFan/kata-containers</a></p><p>分支：<code>runtime-rs</code></p><h2 id="42-pull-request"><a class="markdownIt-Anchor" href="#42-pull-request"></a> 4.2  pull request:</h2><ul><li><p><a href="https://github.com/openanolis/dbs-cli/pull/1">Create VM from command line arguments #1</a></p></li><li><p><a href="https://github.com/kata-containers/kata-containers/pull/5082">dragonball: Fix problem that stdio console cannot connect to stdout #5082</a></p></li></ul><h2 id="43-运行示例与结果截图"><a class="markdownIt-Anchor" href="#43-运行示例与结果截图"></a> 4.3 运行示例与结果截图:</h2><blockquote><p>为了结果易于复现，使用了firecraker项目的kernel和rootfs(方便用户下载， 当然其他支持serial console的内核和rootfs也可以)，如需运行此CLI，可前往<a href="https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md">firecracker/getting-started.md at main · firecracker-microvm/firecracker (github.com)</a>下载并使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli --kernel-path ~/data/build/dbs/firecracker/vmlinux.bin --rootfs ~/data/build/dbs/firecracker/bionic.rootfs.ext4 --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/08/27/vRc536.png" alt="进入vm" /></p><p><img src="https://s1.ax1x.com/2022/08/27/vRczgf.png" alt="输入指令" /></p><h2 id="44-可通过命令行配置的参数"><a class="markdownIt-Anchor" href="#44-可通过命令行配置的参数"></a> 4.4 可通过命令行配置的参数：</h2><table><thead><tr><th style="text-align:center">arguments</th><th style="text-align:center">required</th><th style="text-align:center">default value</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center"><code>rootfs</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path to rootfs image.</td></tr><tr><td style="text-align:center"><code>kernel-path</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path of kernel image (Only uncompressed kernel is supported for Dragonball).</td></tr><tr><td style="text-align:center"><code>log-file</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;dbs-cli.log&quot;</code></td><td style="text-align:center">The path to log file</td></tr><tr><td style="text-align:center"><code>log-level</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;Info&quot;</code></td><td style="text-align:center">The logging level.</td></tr><tr><td style="text-align:center"><code>boot-args</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1</code></td><td style="text-align:center">The boot arguments passed to the kernel.</td></tr><tr><td style="text-align:center"><code>is-root</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>true</code></td><td style="text-align:center">Decide the device to be the root boot device or not.</td></tr><tr><td style="text-align:center"><code>is-read-only</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">The driver opened in read-only or not.</td></tr><tr><td style="text-align:center"><code>vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of vcpu to start.</td></tr><tr><td style="text-align:center"><code>max-vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The max number of vpu can be added.</td></tr><tr><td style="text-align:center"><code>cpu-pm</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>0</code></td><td style="text-align:center">vpmu support level.</td></tr><tr><td style="text-align:center"><code>threads-per-core</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Threads per core to indicate hyper-threading is enabled or not.</td></tr><tr><td style="text-align:center"><code>cores-per-die</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Cores per die to guide guest cpu topology init.</td></tr><tr><td style="text-align:center"><code>dies-per-socket</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Dies per socket to guide guest cpu topology.</td></tr><tr><td style="text-align:center"><code>sockets</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of sockets.</td></tr><tr><td style="text-align:center"><code>mem-type</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>shmem</code></td><td style="text-align:center">Memory type that can be either hugetlbfs or shmem.</td></tr><tr><td style="text-align:center"><code>mem-file</code></td><td style="text-align:center">false</td><td style="text-align:center">``</td><td style="text-align:center">Memory file path.</td></tr><tr><td style="text-align:center"><code>initrd-path</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>None</code></td><td style="text-align:center">The path of initrd.</td></tr></tbody></table><h2 id="45-使用示例"><a class="markdownIt-Anchor" href="#45-使用示例"></a> 4.5 使用示例:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/rootfs.dmg \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure><p>For the rootfs from firecracker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/bionic.rootfs.ext4 \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda&quot;</span> ;<br></code></pre></td></tr></table></figure><p>For the rootfs build from kata:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/kata-containers.img \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure><p>Set the log level and log file:</p><blockquote><p>The log-level argument is case-insensitive: ErrOR and InFO are valid.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --log-file dbs-cli.log --log-level ERROR \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/kata-containers.img \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;
    &lt;font size=&quot;10&quot;&gt;&lt;bold&gt;使用命令行参数启动微型虚拟机&lt;/bold&gt;&lt;/font&gt;
    &lt;br/&gt;&lt;br/&gt;
&lt;/center&gt;
&lt;h1 id=&quot;1-项目实现方案研究&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    
    <category term="报告" scheme="https://www.torch-fan.site/tags/%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>Linux个人使用指令收集</title>
    <link href="https://www.torch-fan.site/2022/08/24/Linux%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <id>https://www.torch-fan.site/2022/08/24/Linux%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/</id>
    <published>2022-08-24T12:02:52.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-socketserial"><a class="markdownIt-Anchor" href="#1-socketserial"></a> 1. Socket/Serial</h1><blockquote><p>登陆绑定在socket上的console</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># console.sock 改为对应的socket地址</span><br>socat <span class="hljs-string">&quot;stdin,raw,echo=0,escape=0x11&quot;</span> <span class="hljs-string">&quot;unix-connect:[console.sock]&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-socketserial&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-socketserial&quot;&gt;&lt;/a&gt; 1. Socket/Serial&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;登陆绑定在socket上的console&lt;</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>matplotlib的常用设置</title>
    <link href="https://www.torch-fan.site/2022/08/23/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>https://www.torch-fan.site/2022/08/23/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-08-23T01:22:52.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-backend"><a class="markdownIt-Anchor" href="#1-backend"></a> 1. backend</h1><blockquote><p>有时保存的图片不只是png, 可能还需要pdf, 因此设置可以设置好backedn</p><p>参考资料: <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=backend">https://matplotlib.org/stable/api/matplotlib_configuration_api.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">matplotlib.use(&quot;pdf&quot;);<br></code></pre></td></tr></table></figure><ul><li>interactive backends: GTK3Agg, GTK3Cairo, GTK4Agg, GTK4Cairo, MacOSX, nbAgg, QtAgg, QtCairo, TkAgg, TkCairo, WebAgg, WX, WXAgg, WXCairo, Qt5Agg, Qt5Cairo</li><li>non-interactive backends: agg, cairo, pdf, pgf, ps, svg, template</li></ul><h1 id="2-rcparams"><a class="markdownIt-Anchor" href="#2-rcparams"></a> 2. rcParams</h1><blockquote><p>可设置的属性列表: <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams#matplotlib.rcParams">https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams#matplotlib.rcParams</a></p></blockquote><h2 id="21-dpi-涉及清晰度"><a class="markdownIt-Anchor" href="#21-dpi-涉及清晰度"></a> 2.1 DPI (涉及清晰度)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;figure.dpi&#x27;</span>] = <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h2 id="22-字体"><a class="markdownIt-Anchor" href="#22-字体"></a> 2.2 字体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams.update(&#123;<br>    <span class="hljs-string">&quot;font.size&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&#x27;font.sans-serif&#x27;</span>: <span class="hljs-string">&quot;simsun&quot;</span>  <span class="hljs-comment"># SimHei</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="221-ubuntu支持中文"><a class="markdownIt-Anchor" href="#221-ubuntu支持中文"></a> 2.2.1 ubuntu支持中文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看matplotlib配置文件位置</span><br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-built_in">print</span>(matplotlib.matplotlib_fname())<br><span class="hljs-comment"># 如: /APP/anaconda/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入字体库</span><br><span class="hljs-built_in">cd</span> ~/APP/anaconda/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf<br><br><span class="hljs-comment"># 清除缓存</span><br><span class="hljs-built_in">rm</span> ~/.cache/matplotlib<br><br><span class="hljs-comment"># 将simsun.ttf复制到该目录下即可</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-backend&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-backend&quot;&gt;&lt;/a&gt; 1. backend&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有时保存的图片不只是png, 可能还需要pdf, 因此设置可以设置好bac</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Python" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Matplotlib/"/>
    
    
  </entry>
  
  <entry>
    <title>kernel和rootfs镜像构建</title>
    <link href="https://www.torch-fan.site/2022/08/15/kernel%E5%92%8Crootfs%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://www.torch-fan.site/2022/08/15/kernel%E5%92%8Crootfs%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2022-08-15T10:58:57.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建rootfs"><a class="markdownIt-Anchor" href="#1-创建rootfs"></a> 1. 创建rootfs:</h1><p>在Linux上自带<code>mkfs</code>指令, 用于创建文件系统.</p><p><img src="https://s1.ax1x.com/2022/08/15/vdcuFA.png" alt="mkfs" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个容量为512MB的根文件系统</span><br>mkfs -t ext4 rootfs.ext4 512M<br></code></pre></td></tr></table></figure><h1 id="2-构建vmlinux-elf文件-内核编译最原始的文件-可被rust的linux-loader加载"><a class="markdownIt-Anchor" href="#2-构建vmlinux-elf文件-内核编译最原始的文件-可被rust的linux-loader加载"></a> 2. 构建vmlinux (ELF文件, 内核编译最原始的文件, 可被rust的<code>linux-loader</code>加载)</h1><blockquote><p>参考文档: <a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel">https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel</a></p></blockquote><h2 id="21-下载内核源码"><a class="markdownIt-Anchor" href="#21-下载内核源码"></a> 2.1 下载内核源码:</h2><p>源码仓库: <a href="https://www.kernel.org/">https://www.kernel.org/</a></p><h2 id="22-安装依赖"><a class="markdownIt-Anchor" href="#22-安装依赖"></a> 2.2 安装依赖:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf git<br></code></pre></td></tr></table></figure><h2 id="23-配置内核"><a class="markdownIt-Anchor" href="#23-配置内核"></a> 2.3 配置内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># optional: 复制本机的配置</span><br><span class="hljs-built_in">cp</span> -v /boot/config-$(<span class="hljs-built_in">uname</span> -r) .config<br><br><span class="hljs-built_in">chmod</span> +x ./scripts/*<br>make menuconfig<br></code></pre></td></tr></table></figure><p>从内核源码根目录的makefile中, 可以看到默认就是vmlinux, 暂时也不需要去考虑vmlinuz的压缩问题.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># The all: target is the default when no target is given on the</span><br><span class="hljs-comment"># command line.</span><br><span class="hljs-comment"># This allow a user to issue only &#x27;make&#x27; to build a kernel including modules</span><br><span class="hljs-comment"># Defaults to vmlinux, but the arch makefile usually adds further targets</span><br><span class="hljs-section">all: vmlinux</span><br></code></pre></td></tr></table></figure><p>构建内核</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-创建rootfs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-创建rootfs&quot;&gt;&lt;/a&gt; 1. 创建rootfs:&lt;/h1&gt;
&lt;p&gt;在Linux上自带&lt;code&gt;mkfs&lt;/code&gt;指令, 用于创建文件系统.&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust错误处理</title>
    <link href="https://www.torch-fan.site/2022/08/02/Rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://www.torch-fan.site/2022/08/02/Rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2022-08-02T12:49:12.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里不复述文档和教程中有的内容, 比如<code>Result</code>之类的细节, 可以自行看文档内容:</p><ul><li><p><a href="https://learning-rust.github.io/docs/e7.custom_error_types.html">https://learning-rust.github.io/docs/e7.custom_error_types.html</a></p></li><li><p><a href="https://doc.rust-lang.org/book/ch09-00-error-handling.html">https://doc.rust-lang.org/book/ch09-00-error-handling.html</a></p></li></ul><p>参考资料: <a href="https://www.philipdaniels.com/blog/2019/defining-rust-error-types/">https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</a></p></blockquote><h1 id="1-rust中自定义error的方式"><a class="markdownIt-Anchor" href="#1-rust中自定义error的方式"></a> 1. Rust中自定义Error的方式</h1><h2 id="11-定义一个错误类型"><a class="markdownIt-Anchor" href="#11-定义一个错误类型"></a> 1.1 定义一个错误类型:</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyErorType</span> &#123;<br>    <span class="hljs-comment">// Errors from external libraries..</span><br>    <span class="hljs-title function_ invoke__">Io</span>(io::Error),<br>    <span class="hljs-title function_ invoke__">Git</span>(git2::Error),<br>    <span class="hljs-comment">// Errors raised by us...</span><br>    <span class="hljs-title function_ invoke__">Regular</span>(ErrorKind),<br>    <span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-type">String</span>)<br>&#125;<br><br><span class="hljs-meta">#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ErrorKind</span> &#123;<br>    NotFound,<br>    NotAuthorized,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ErrorKind</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">as_str</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            ErrorKind::NotFound =&gt; <span class="hljs-string">&quot;not found&quot;</span>,<br>            ErrorKind::NotAuthorized =&gt; <span class="hljs-string">&quot;not authorized&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-实现error和display这两个trait"><a class="markdownIt-Anchor" href="#12-实现error和display这两个trait"></a> 1.2 实现<code>Error</code>和<code>Display</code>这两个trait</h2><blockquote><p><code>Error</code>只允许返回静态字符串常量</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Error</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">description</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">description</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">description</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">as_str</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-keyword">ref</span> err) =&gt; err,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>fmt::Display</code>更为灵活一点</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmt</span>(&amp;<span class="hljs-keyword">self</span>, f: &amp;<span class="hljs-keyword">mut</span> fmt::Formatter) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">fmt</span>(f),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">fmt</span>(f),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(<span class="hljs-keyword">ref</span> err) =&gt; <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;A regular error occurred &#123;:?&#125;&quot;</span>, err),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-keyword">ref</span> err) =&gt; <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;A custom error occurred &#123;:?&#125;&quot;</span>, err),<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-为external-error-type实现from"><a class="markdownIt-Anchor" href="#13-为external-error-type实现from"></a> 1.3 为external error type实现<code>From</code></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(err: io::Error) <span class="hljs-punctuation">-&gt;</span> MyErrorType &#123;<br>        MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(err)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(err: git2::Error) <span class="hljs-punctuation">-&gt;</span> MyErrorType &#123;<br>        MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用起来就可以这样, 在捕获异常的代码片段中:</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">MyErrorType::<span class="hljs-title function_ invoke__">From</span>(err)<br></code></pre></td></tr></table></figure><h2 id="14-可选-创建一个result别名"><a class="markdownIt-Anchor" href="#14-可选-创建一个result别名"></a> 1.4 可选: 创建一个Result别名</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Result</span>&lt;T&gt; = std::result::<span class="hljs-type">Result</span>&lt;T, MyErrorType&gt;;<br></code></pre></td></tr></table></figure><h2 id="15-使用自定义的类型"><a class="markdownIt-Anchor" href="#15-使用自定义的类型"></a> 1.5 使用自定义的类型:</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">some_func</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">usize</span>&gt; &#123;<br>    <span class="hljs-comment">// possible: std::io::Error</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_f</span> = std::fs::File::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-string">&quot;aa&quot;</span>)?;<br>    <span class="hljs-comment">// possible: git2::Error</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_g</span> = Respository::<span class="hljs-title function_ invoke__">init</span>(<span class="hljs-string">&quot;/path/to/repo&quot;</span>)?;<br><br>    <span class="hljs-comment">// return a error</span><br>    <span class="hljs-title function_ invoke__">Err</span>(MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(ErrorKind::NotAuthorized));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-rust-中使用-thiserror-和-anyhow-简洁-好用"><a class="markdownIt-Anchor" href="#2-rust-中使用-thiserror-和-anyhow-简洁-好用"></a> 2. Rust 中使用 <code>thiserror</code> 和 <code>anyhow</code> (简洁, 好用)</h1><blockquote><p><code>thiserror</code>文档: <a href="https://docs.rs/thiserror/latest/thiserror/">https://docs.rs/thiserror/latest/thiserror/</a></p><p><code>anyhow</code>文档: <a href="https://github.com/dtolnay/anyhow">https://github.com/dtolnay/anyhow</a></p><p>这两个库主要还是为了某些库里处理数量众多的异常类型, 可以解决兼容, 但还需要额外处理</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> anyhow::<span class="hljs-type">Result</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;()&gt; &#123;  <span class="hljs-comment">// ~~接收任意类型异常~~</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-错误类型映射"><a class="markdownIt-Anchor" href="#3-错误类型映射"></a> 3. 错误类型映射</h1><blockquote><p>前面所作的努力只是为了兼容, 但是rust并不会主动去做, 转换工作还是得自己来</p></blockquote><h2 id="31-map_err"><a class="markdownIt-Anchor" href="#31-map_err"></a> 3.1 <code>map_err</code></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::env;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">double_arg</span>(<span class="hljs-keyword">mut</span> argv: env::Args) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, <span class="hljs-type">String</span>&gt; &#123;<br>    argv.<span class="hljs-title function_ invoke__">nth</span>(<span class="hljs-number">1</span>)<br>        .<span class="hljs-title function_ invoke__">ok_or</span>(<span class="hljs-string">&quot;Please give at least one argument&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>())<br>        .<span class="hljs-title function_ invoke__">and_then</span>(|arg| arg.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map_err</span>(|err| err.<span class="hljs-title function_ invoke__">to_string</span>()))<br>        .<span class="hljs-title function_ invoke__">map</span>(|n| <span class="hljs-number">2</span> * n)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">match</span> <span class="hljs-title function_ invoke__">double_arg</span>(env::<span class="hljs-title function_ invoke__">args</span>()) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(err) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, err),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 这里是用构造函数做lambda函数了</span><br>cmdline.<span class="hljs-title function_ invoke__">insert_str</span>(boot_args)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(BootSourceConfigError::InvalidKernelCommandLine)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(VmmActionError::BootSource)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(CLIError::BootSource)?;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这里不复述文档和教程中有的内容, 比如&lt;code&gt;Result&lt;/code&gt;之类的细节, 可以自行看文档内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learning-rust.github.io/docs/e7.cu</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Rust" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>LaTex基础-Table</title>
    <link href="https://www.torch-fan.site/2022/08/02/LaTex%E5%9F%BA%E7%A1%80-Table/"/>
    <id>https://www.torch-fan.site/2022/08/02/LaTex%E5%9F%BA%E7%A1%80-Table/</id>
    <published>2022-08-02T08:09:42.000Z</published>
    <updated>2022-11-15T02:27:36.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;[pos]&#123;cols&#125;<br><br>  table content<br><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><p>where options can be:</p><ul><li><code>pos</code> : Vertical position. It can assume the following values:</li></ul><table><thead><tr><th><code>t</code></th><th>the line at the top is aligned with the text baseline (可以理解为一横文字的底部基线, 所有文字在这个基线上排布)</th></tr></thead><tbody><tr><td><code>b</code></td><td>the line at the bottom is aligned with the text baseline</td></tr><tr><td><code>c</code> or none</td><td>the table is centred to the text baseline</td></tr></tbody></table><ul><li><code>cols</code> : Defines the alignment and the borders of each column. It can have the following values:</li></ul><table><thead><tr><th><code>l</code></th><th>left-justified column</th></tr></thead><tbody><tr><td><code>c</code></td><td>centred column</td></tr><tr><td><code>r</code></td><td>right-justified column</td></tr><tr><td><code>p&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned at the top</td></tr><tr><td><code>m&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned in the middle (requires <code>array</code><br /> package)</td></tr><tr><td><code>b&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned at the bottom (requires <code>array</code><br /> package)</td></tr><tr><td><code>&amp;#124;</code></td><td>vertical line</td></tr><tr><td><code>&amp;#124;&amp;#124;</code></td><td>double vertical line</td></tr><tr><td><code>*&#123;num&#125;&#123;form&#125;</code></td><td>the format form is repeated <em>num</em> times; for example <code>*&#123;3&#125;&#123;&amp;#124;l&#125;&amp;#124;</code><br /> is equal to <code>&amp;#124;l&amp;#124;l&amp;#124;l&amp;#124;</code></td></tr></tbody></table><p>To separate between cells and introducing new lines use the following commands:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>column separator</td></tr><tr><td><code>\\\\</code></td><td>start new row (additional space may be specified after <code>\\</code><br /> using square brackets, such as <code>\\[6pt]</code><br />)</td></tr><tr><td><code>\\hline</code></td><td>horizontal line between rows</td></tr><tr><td><code>\\newline</code></td><td>start a new line within a cell (in a paragraph column)</td></tr><tr><td><code>\\cline&#123;i-j&#125;</code></td><td>partial horizontal line beginning in column <em>i</em> and ending in column <em>j</em></td></tr></tbody></table><h1 id="1-用table制作封面"><a class="markdownIt-Anchor" href="#1-用table制作封面"></a> 1. 用table制作封面:</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% 用于制作更复杂的封面</span><br><span class="hljs-keyword">\title</span>&#123;<span class="hljs-keyword">\makebox</span>&#123;<br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;img/nankai.jpg&#125; <span class="hljs-keyword">\\</span><br>         <span class="hljs-keyword">\textbf</span>&#123;课程报告&#125; <span class="hljs-keyword">\\</span><br>         xxxxxx<br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">\author</span>&#123;<span class="hljs-keyword">\makebox</span>&#123;<br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;<br>        姓名： <span class="hljs-built_in">&amp;</span> xxxx  <span class="hljs-keyword">\\</span><br>        学号： <span class="hljs-built_in">&amp;</span> xxxx<br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\today</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-将表格进行整体缩放并不推荐-除非迫不得已"><a class="markdownIt-Anchor" href="#2-将表格进行整体缩放并不推荐-除非迫不得已"></a> 2. 将表格进行整体缩放(并不推荐, 除非迫不得已)</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\resizebox</span>&#123;<span class="hljs-keyword">\textwidth</span>&#125;&#123;15mm&#125;&#123;<br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;<br>    <span class="hljs-keyword">\hline</span><br>    <span class="hljs-keyword">\ </span> <span class="hljs-built_in">&amp;</span> 平均运行时间(单位: s) <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\hline</span><br>    训练阶段 <span class="hljs-built_in">&amp;</span> 2333.5593 <span class="hljs-keyword">\\</span><br>    测试阶段 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ </span> <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;  <span class="hljs-comment">% 只能包含tabular 不能包含文本 如 \caption</span><br></code></pre></td></tr></table></figure><h1 id="3-整体调整每一列宽度"><a class="markdownIt-Anchor" href="#3-整体调整每一列宽度"></a> 3. 整体调整每一列宽度</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\setlength</span>&#123;<span class="hljs-keyword">\tabcolsep</span>&#125;&#123;7mm&#125;&#123;<br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cccccc&#125; <br>    <span class="hljs-keyword">\toprule</span><br>    Models  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span> c<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\alpha</span><span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>0<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>1<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>2<span class="hljs-built_in">$</span>  <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>    model  <span class="hljs-built_in">&amp;</span> 30.6302  <span class="hljs-built_in">&amp;</span> 0.4127  <span class="hljs-built_in">&amp;</span> 9.4257  <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 12.4089  <span class="hljs-built_in">&amp;</span> 0.5169  <span class="hljs-built_in">&amp;</span> 18.6986  <span class="hljs-built_in">&amp;</span> -6.6157  <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 14.8586  <span class="hljs-built_in">&amp;</span> 0.4991  <span class="hljs-built_in">&amp;</span> 19.5421  <span class="hljs-built_in">&amp;</span> -7.0717  <span class="hljs-built_in">&amp;</span> 0.2183  <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 3.06302  <span class="hljs-built_in">&amp;</span> 0.41266  <span class="hljs-built_in">&amp;</span> 0.11725  <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 1.24089  <span class="hljs-built_in">&amp;</span> 0.51691  <span class="hljs-built_in">&amp;</span> 0.83605  <span class="hljs-built_in">&amp;</span> -0.66157  <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 1.48586  <span class="hljs-built_in">&amp;</span> 0.49906  <span class="hljs-built_in">&amp;</span> 0.95609  <span class="hljs-built_in">&amp;</span> -0.70717  <span class="hljs-built_in">&amp;</span> 0.02183  <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><br>    <span class="hljs-keyword">\caption</span>&#123;哈哈哈&#125;<br>  <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;  <span class="hljs-comment">% 这个可以包含很多元素</span><br></code></pre></td></tr></table></figure><h1 id="4-设置列高"><a class="markdownIt-Anchor" href="#4-设置列高"></a> 4.  设置列高</h1><blockquote><p><code>\rule&#123;线的宽度&#125;&#123;线撑起的高度&#125;</code></p><p>线设置为0pt宽度, 就可以起到撑起单元格的作用了</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\ </span> <span class="hljs-built_in">&amp;</span> 平均运行时间(单位: s) <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\rule</span>&#123;0pt&#125;&#123;8pt&#125;训练阶段 <span class="hljs-built_in">&amp;</span> 2333.5593 <span class="hljs-keyword">\\</span><br>  测试阶段 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ </span> <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><h1 id="5-三线表"><a class="markdownIt-Anchor" href="#5-三线表"></a> 5. 三线表</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125; <br><span class="hljs-keyword">\usepackage</span>&#123;float&#125;<span class="hljs-comment">%提供float浮动环境</span><br><span class="hljs-keyword">\usepackage</span>&#123;booktabs&#125;<span class="hljs-comment">%提供命令\toprule、\midrule、\bottomrule</span><br> <br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br> <br>  <span class="hljs-comment">%经典三线表</span><br>  <span class="hljs-keyword">\begin</span>&#123;table&#125;[H]<br>    <span class="hljs-keyword">\caption</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;Example 1&#125;&#125;<span class="hljs-comment">%标题</span><br>    <span class="hljs-keyword">\centering</span><span class="hljs-comment">%把表居中</span><br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#123;80pt&#125;c&#123;80pt&#125;c&#123;80pt&#125;c&#123;80pt&#125;&#125;<span class="hljs-comment">%四个c代表该表一共四列，内容全部居中</span><br>    <span class="hljs-keyword">\toprule</span><span class="hljs-comment">%第一道横线</span><br>    Item 1<span class="hljs-built_in">&amp;</span>Item 2<span class="hljs-built_in">&amp;</span>Item 3<span class="hljs-built_in">&amp;</span>Item 4 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\midrule</span><span class="hljs-comment">%第二道横线 </span><br>    Data1<span class="hljs-built_in">&amp;</span>Data2<span class="hljs-built_in">&amp;</span>Data3<span class="hljs-built_in">&amp;</span>Data4 <span class="hljs-keyword">\\</span><br>    Data5<span class="hljs-built_in">&amp;</span>Data6<span class="hljs-built_in">&amp;</span>Data7<span class="hljs-built_in">&amp;</span>Data8 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><span class="hljs-comment">%第三道横线</span><br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>  <span class="hljs-keyword">\end</span>&#123;table&#125;<br> <br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h1 id="6-复杂表格"><a class="markdownIt-Anchor" href="#6-复杂表格"></a> 6. 复杂表格</h1><blockquote><p>多列表格中用<code>\cline</code> 控制哪几列有横线: <code>\cline&#123;3-5&#125;</code> 表示第3列和第5列有横线.</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% 如果要间隔一列加横线只要两个指令就行</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;llrr&#125; <br>  a <span class="hljs-built_in">&amp;</span>b <span class="hljs-built_in">&amp;</span>c <span class="hljs-built_in">&amp;</span>d <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;3-4&#125; <br>  e <span class="hljs-built_in">&amp;</span>f <span class="hljs-built_in">&amp;</span>g <span class="hljs-built_in">&amp;</span>h <br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果用了<code>booktabs</code>, 想要<code>\cline</code>类似的多列横线, 则可以使用<code>\cmidrule</code>, 这个比<code>\midrule</code>更细</p></blockquote><p><img src="https://img1.imgtp.com/2022/08/02/VIxH5MFg.png" alt="解释" /></p><p><img src="https://img1.imgtp.com/2022/08/02/L8Ict2Bp.png" alt="解释2" /></p><hr /><blockquote><p>\usepackage{multirow}</p></blockquote><blockquote><p><code>\multirow&#123;nrows&#125;[bigstruct]&#123;width&#125;[fixup]&#123;text&#125;</code></p><ul><li>nrows: 占用的行数</li><li>bigstructs: 可选, 在使用了bigstruct宏包时用</li><li>width: 该栏宽度, 如果为*则由LaTex自行决定</li><li>fixup: 可选项, 调整文本的垂直位置</li><li>text: 所要排版的文本, 可以用 \ 强制换行</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-comment">%跨行（将两行合并为一行） 第一个参数指明跨几行 记得下一行对应位置空出来 不然会重叠, 第二个参数是宽度</span><br>  <span class="hljs-keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;1&#125; <span class="hljs-built_in">&amp;</span> 11 <span class="hljs-built_in">&amp;</span> 111 <span class="hljs-built_in">&amp;</span> 1111 <span class="hljs-built_in">&amp;</span> 11111 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\cline</span>&#123;2-5&#125;<br>   <span class="hljs-built_in">&amp;</span> 22 <span class="hljs-built_in">&amp;</span> 222 <span class="hljs-built_in">&amp;</span> 2222 <span class="hljs-built_in">&amp;</span> 22222 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  3 <span class="hljs-built_in">&amp;</span> 33 <span class="hljs-built_in">&amp;</span> 333 <span class="hljs-built_in">&amp;</span> 3333 <span class="hljs-built_in">&amp;</span> 33333 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>\multicolumn&#123;ncols&#125;&#123;指明对齐方式以及方格线&#125;&#123;单元格内容&#125;</code></p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-comment">% after \\: \hline or \cline&#123;col1-col2&#125; \cline&#123;col3-col4&#125; ...</span><br>  <span class="hljs-comment">%跨列（将两列合并为一列）第一个参数指明跨几列  第二个参数指明内容居中并在左右两边画上直线 最后一个参数是表格内容</span><br>  <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;|c|&#125;&#123;1&#125;  <span class="hljs-built_in">&amp;</span> 111 <span class="hljs-built_in">&amp;</span> 1111 <span class="hljs-built_in">&amp;</span> 11111 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>   2 <span class="hljs-built_in">&amp;</span> 22 <span class="hljs-built_in">&amp;</span> 222 <span class="hljs-built_in">&amp;</span> 2222 <span class="hljs-built_in">&amp;</span> 22222 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  3 <span class="hljs-built_in">&amp;</span> 33 <span class="hljs-built_in">&amp;</span> 333 <span class="hljs-built_in">&amp;</span> 3333 <span class="hljs-built_in">&amp;</span> 33333 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><h1 id="7-表格的列方向上分散对齐"><a class="markdownIt-Anchor" href="#7-表格的列方向上分散对齐"></a> 7. 表格的列方向上分散对齐</h1><blockquote><p><code>\makebox[width][position]&#123;text&#125;</code></p><p><code>\makebox[4em][s]&#123;content&#125;</code></p><ul><li>l - left</li><li>r - right</li><li>s - interword space adjusted so text fills box exactly</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;rl&#125;<br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;论文题目&#125;：        <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@title</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;专<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;业&#125;：<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@major</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;博<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;士<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;生&#125;：      <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@author</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;指导教师&#125;：        <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@advisorname</span> <span class="hljs-keyword">\,</span><span class="hljs-keyword">\,</span> <span class="hljs-keyword">\@advisortitle</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>表格内换行</li></ol><blockquote><p><code>\makecell</code></p></blockquote><p><img src="https://img1.imgtp.com/2022/08/02/LNe2NvOn.png" alt="解释" /></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>&#123;makecell&#125;<br><br><span class="hljs-comment">% ...</span><br><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;<br>  <span class="hljs-keyword">\makecell</span>[l]&#123;a <span class="hljs-keyword">\\</span> b <span class="hljs-keyword">\\</span> c &#125; <span class="hljs-built_in">&amp;</span> 1 <span class="hljs-keyword">\\</span>  <span class="hljs-comment">% 用于单元格内换行</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><p>除了使用<code>\makecell</code>外, 还可以用嵌套tabular的方式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cccc&#125;<br>    <span class="hljs-keyword">\toprule</span><br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#125;<br>            物理机<span class="hljs-keyword">\\</span>资源类型<br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>          <span class="hljs-built_in">&amp;</span> CPU资源（单位：核） <span class="hljs-built_in">&amp;</span> 内存资源（单位：G） <span class="hljs-built_in">&amp;</span> 机器数量 <span class="hljs-keyword">\\</span><br>     <span class="hljs-keyword">\hline</span><br>         类型一 <span class="hljs-built_in">&amp;</span>  32  <span class="hljs-built_in">&amp;</span> 64 <span class="hljs-built_in">&amp;</span> 6000 <span class="hljs-keyword">\\</span><br>         类型二 <span class="hljs-built_in">&amp;</span> 92 <span class="hljs-built_in">&amp;</span> 288 <span class="hljs-built_in">&amp;</span> 3000 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><ol start="9"><li>设置合理列宽</li></ol><blockquote><p>需要导入<code>makecell</code>包</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% p&#123;xpt&#125; 可以指定每一列的宽度， 但是这样就没有t, c, b 对齐的作用了, 但是可以自动换行!</span><br><br><span class="hljs-keyword">\begin</span>&#123;table &#125;[ htbp]<br>  <span class="hljs-keyword">\centering</span><br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;p&#123;80 pt&#125;p&#123;80 pt&#125;p&#123;80 pt&#125;&#125;<br>  <span class="hljs-keyword">\toprule</span><br>  操作系统 <span class="hljs-built_in">&amp;</span> 发行版 <span class="hljs-built_in">&amp;</span> 编辑器 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\midrule</span><br>  Windows <span class="hljs-built_in">&amp;</span> MikTeX <span class="hljs-built_in">&amp;</span> TexMakerX <span class="hljs-keyword">\\</span><br>   Unix/Linux <span class="hljs-built_in">&amp;</span> teTeX <span class="hljs-built_in">&amp;</span> Kile <span class="hljs-keyword">\\</span><br>  Mac OS <span class="hljs-built_in">&amp;</span> MacTeX <span class="hljs-built_in">&amp;</span> TeXShop <span class="hljs-keyword">\\</span><br>   通用 <span class="hljs-built_in">&amp;</span> TeX Live <span class="hljs-built_in">&amp;</span> TeXworks <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\bottomrule</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% p&#123;80pt&#125;&lt;&#123;\centering&#125;</span><br><br><span class="hljs-keyword">\begin</span>&#123;table &#125;[ htbp]<br> <span class="hljs-keyword">\centering</span><br>  <span class="hljs-keyword">\begin</span>&#123;tabular &#125;&#123;p&#123;80 pt&#125;&lt;&#123;<span class="hljs-keyword">\centering</span>&#125;p&#123;80 pt&#125;&lt;&#123;<span class="hljs-keyword">\raggedleft</span><span class="hljs-keyword">\arraybackslash</span> &#125;p&#123;80 pt&#125;&#125;<br> <span class="hljs-keyword">\toprule</span><br>操作系统 <span class="hljs-built_in">&amp;</span> 发行版 <span class="hljs-built_in">&amp;</span> 编辑器 <span class="hljs-keyword">\\</span><br> <span class="hljs-keyword">\midrule</span><br>Windows <span class="hljs-built_in">&amp;</span> MikTeX <span class="hljs-built_in">&amp;</span> TexMakerX <span class="hljs-keyword">\\</span><br> Unix/Linux <span class="hljs-built_in">&amp;</span> teTeX <span class="hljs-built_in">&amp;</span> Kile <span class="hljs-keyword">\\</span><br>Mac OS <span class="hljs-built_in">&amp;</span> MacTeX <span class="hljs-built_in">&amp;</span> TeXShop <span class="hljs-keyword">\\</span><br> 通用 <span class="hljs-built_in">&amp;</span> TeX Live <span class="hljs-built_in">&amp;</span> TeXworks <span class="hljs-keyword">\\</span><br> <span class="hljs-keyword">\bottomrule</span><br> <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br></code></pre></td></tr></table></figure><h1 id="9-将表旋转90度显示"><a class="markdownIt-Anchor" href="#9-将表旋转90度显示"></a> 9. 将表旋转90度显示</h1><blockquote><p>使用宏包<code>rotating</code></p><p>将<code>table</code>环境改为<code>sidewaytable</code></p><ul><li><code>\usepackage[figuresleft]&#123;rotating&#125;</code>: 顺时针90度</li><li><code>\usepackage[figuresright]&#123;rotating&#125;</code>: 逆时针90度</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>[figuresright]&#123;rotating&#125;<br><br><span class="hljs-comment">%...</span><br><br><span class="hljs-keyword">\begin</span>&#123;sidewaystable&#125;[htp]<br><span class="hljs-keyword">\caption</span>&#123;This is a caption&#125;  <br><span class="hljs-keyword">\centering</span>  <span class="hljs-comment">%表格整体居中</span><br>  <span class="hljs-keyword">\footnotesize</span>  <span class="hljs-comment">%设置字体</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;l*&#123;7&#125;&#123;L&#123;3cm&#125;&#125;&#125; <span class="hljs-comment">%共7列，每一列列宽为3cm</span><br>    <span class="hljs-comment">%...</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\end</span>&#123;sidewaystable&#125;<br></code></pre></td></tr></table></figure><h1 id="multicolumn-小结"><a class="markdownIt-Anchor" href="#multicolumn-小结"></a> multicolumn 小结</h1><ul><li><code>m&#123;5cm&#125;</code>: 居中</li><li><code>p&#123;5cm&#125;</code>: 顶部</li><li><code>b&#123;5cm&#125;</code>: 底部</li></ul><p><img src="https://img1.imgtp.com/2022/08/02/UMYQll70.png" alt="multicolumn的位置设置" /></p><h2 id="1-垂直居中"><a class="markdownIt-Anchor" href="#1-垂直居中"></a> 1. 垂直居中</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;center&#125;<br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|l|l|l|l|&#125;<br><span class="hljs-keyword">\hline</span><br>Day <span class="hljs-built_in">&amp;</span> Min Temp <span class="hljs-built_in">&amp;</span> Max Temp <span class="hljs-built_in">&amp;</span> Summary <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><span class="hljs-comment">% 注意, multicolumn中 | 会覆盖全局的边框设置, 不加的话, 对应单元格也没边框</span><br>Monday <span class="hljs-built_in">&amp;</span> 11C <span class="hljs-built_in">&amp;</span> 22C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|p&#123;5cm&#125;|&#125;&#123;A clear day with lots of sunshine. However, the strong breeze will bring down the temperatures.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br>Tuesday <span class="hljs-built_in">&amp;</span> 9C <span class="hljs-built_in">&amp;</span> 19C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|m&#123;5cm&#125;|&#125;&#123;Cloudy with rain, across many northern regions. Clear spells across most of Scotland and Northern Ireland, but rain reaching the far northwest.&#125; <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">\hline</span><br>Wednesday <span class="hljs-built_in">&amp;</span> 10C <span class="hljs-built_in">&amp;</span> 21C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|b&#123;5cm&#125;|&#125;&#123;Rain will still linger for the morning. Conditions will improve by early afternoon and continue throughout the evening.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><br><span class="hljs-keyword">\end</span>&#123;center&#125;<br></code></pre></td></tr></table></figure><h2 id="2-垂直且水平居中"><a class="markdownIt-Anchor" href="#2-垂直且水平居中"></a> 2. 垂直且水平居中</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[a4paper,twoside,12pt]&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;amsbsy&#125;<span class="hljs-comment">%</span><br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;array&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;calc&#125;<br><span class="hljs-keyword">\newcolumntype</span>&#123;N&#125;&#123;&gt;&#123;<span class="hljs-keyword">\centering</span><span class="hljs-keyword">\arraybackslash</span>&#125;m&#123;.5in&#125;&#125;  <span class="hljs-comment">% \arraybackslash 就是那个 \\</span><br><span class="hljs-keyword">\newcolumntype</span>&#123;G&#125;&#123;&gt;&#123;<span class="hljs-keyword">\bfseries</span><span class="hljs-keyword">\centering</span><span class="hljs-keyword">\arraybackslash</span>&#125;m&#123;2in+6<span class="hljs-keyword">\tabcolsep</span>&#125;&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;table&#125;[H]<br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;*&#123;9&#125;&#123;N|&#125;&#125;<br><span class="hljs-keyword">\cline</span>&#123;2-9&#125;<br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;N|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;4&#125;&#123;G|&#125;&#123;Emissions (Pre Catalytic Converter)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;4&#125;&#123;G|&#125;&#123;Emissions (Post Catalytic Converter)&#125; <span class="hljs-keyword">\tabularnewline</span>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|N|&#125;&#123;<span class="hljs-keyword">\textbf</span>&#123;Dyno Load (<span class="hljs-keyword">\%</span>)&#125;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;CO (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;HC (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;Nox (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\boldsymbol</span>&#123;<span class="hljs-keyword">\mathrm</span>&#123;CO<span class="hljs-built_in">_</span>2&#125;&#125;<span class="hljs-built_in">$</span> (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;CO (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;HC (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;Nox (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\boldsymbol</span>&#123;<span class="hljs-keyword">\mathrm</span>&#123;CO<span class="hljs-built_in">_</span>2&#125;&#125;<span class="hljs-built_in">$</span> (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|N|&#125;&#123;10&#125; <span class="hljs-built_in">&amp;</span> 0.77 <span class="hljs-built_in">&amp;</span> 23 <span class="hljs-built_in">&amp;</span> 523 <span class="hljs-built_in">&amp;</span> 14.0 <span class="hljs-built_in">&amp;</span> 0.09 <span class="hljs-built_in">&amp;</span> 18 <span class="hljs-built_in">&amp;</span> 130 <span class="hljs-built_in">&amp;</span> 13.8 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;30&#125; <span class="hljs-built_in">&amp;</span> 0.78 <span class="hljs-built_in">&amp;</span> 13 <span class="hljs-built_in">&amp;</span> 555 <span class="hljs-built_in">&amp;</span> 14.2 <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;70&#125; <span class="hljs-built_in">&amp;</span> 0.70 <span class="hljs-built_in">&amp;</span> 14 <span class="hljs-built_in">&amp;</span> 580 <span class="hljs-built_in">&amp;</span> 14.4 <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;90&#125; <span class="hljs-built_in">&amp;</span> 0.74 <span class="hljs-built_in">&amp;</span> 15 <span class="hljs-built_in">&amp;</span> 630 <span class="hljs-built_in">&amp;</span> 14.5 <span class="hljs-built_in">&amp;</span> 0.70 <span class="hljs-built_in">&amp;</span> 15 <span class="hljs-built_in">&amp;</span> 618 <span class="hljs-built_in">&amp;</span> 14.6 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;Neutral&#125; <span class="hljs-built_in">&amp;</span> 0.06 <span class="hljs-built_in">&amp;</span> 7 <span class="hljs-built_in">&amp;</span> 21 <span class="hljs-built_in">&amp;</span> 15.6 <span class="hljs-built_in">&amp;</span> 0.06 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 27 <span class="hljs-built_in">&amp;</span> 15.7 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\caption</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;&#125;&#125;<br><span class="hljs-keyword">\label</span>&#123;2000Emissions&#125;<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h2 id="3-newcolumntype是如何工作的呢"><a class="markdownIt-Anchor" href="#3-newcolumntype是如何工作的呢"></a> 3. <code>newcolumntype是如何工作的呢?</code></h2><blockquote><p>详情可见: <a href="https://tex.stackexchange.com/questions/257128/how-does-the-newcolumntype-command-work">https://tex.stackexchange.com/questions/257128/how-does-the-newcolumntype-command-work</a></p></blockquote><blockquote><p><code>\arraybackslash</code></p></blockquote><blockquote><p>As for <code>\arraybackslash</code>, the <code>\raggedright</code>, <code>\raggedleft</code>, and <code>\centering</code> declarations refine <code>\</code> in a way that conflicts with its use in a tabular or array environments. The command <code>\arraybackslash</code> (implemented in array and tabularx) restoresthe meaning of <code>\</code> for use in array and tabular (you would only need <code>\arraybackslash</code> for the last column).</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight latex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="教程" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文档撰写" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    
    <category term="LaTex" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/LaTex/"/>
    
    
    <category term="LaTex" scheme="https://www.torch-fan.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>LaTex小技巧</title>
    <link href="https://www.torch-fan.site/2022/07/29/LaTex%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.torch-fan.site/2022/07/29/LaTex%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2022-07-29T06:01:03.000Z</published>
    <updated>2022-11-15T02:27:36.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-符号"><a class="markdownIt-Anchor" href="#1-符号"></a> 1. 符号</h1><blockquote><p><code>~</code>: 波浪号表示一个空格, 但又不只是一个空格, 波浪号左右的内容不允许换行截断, 在用<code>A~\cite&#123;name&#125;</code>引用时, 名字和引用就不会因换行而截断了.</p></blockquote><p><code>\checkmark</code>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">✓</mi></mrow><annotation encoding="application/x-tex">\checkmark</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord amsrm">✓</span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-符号&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-符号&quot;&gt;&lt;/a&gt; 1. 符号&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;: 波浪号表示一个空格, 但又不只是一个空格, 波浪号左右的内容不允许换行截</summary>
      
    
    
    
    <category term="教程" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文档撰写" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    
    <category term="LaTex" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/LaTex/"/>
    
    
    <category term="LaTex" scheme="https://www.torch-fan.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>LaTex基础-Figure</title>
    <link href="https://www.torch-fan.site/2022/07/28/LaTex%E5%9F%BA%E7%A1%80-Figure/"/>
    <id>https://www.torch-fan.site/2022/07/28/LaTex%E5%9F%BA%E7%A1%80-Figure/</id>
    <published>2022-07-28T11:59:59.000Z</published>
    <updated>2022-11-15T02:27:36.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-子图"><a class="markdownIt-Anchor" href="#1-子图"></a> 1. 子图</h1><blockquote><p>注意, 子图和正常的figure也是一样有caption的, 也可以加<code>\label</code>, 为了突出重点就不搞复杂了. 下面是一般要引入的package</p><p><code>\usepackages&#123;subcaption&#125;</code></p><p><code>\usepackage&#123;graphicx&#125;</code></p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;<br>    <span class="hljs-keyword">\centering</span><br>    <span class="hljs-keyword">\begin</span>&#123;subfigure&#125;&#123;0.4<span class="hljs-keyword">\textwidth</span>&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;example-image&#125;<br>    <span class="hljs-keyword">\end</span>&#123;subfigure&#125;<br>    <span class="hljs-comment">% 这里很微妙, 如果没有这个\quad, 两个子图会垂直并列, 加上后就是水平并列</span><br>    <span class="hljs-comment">% 使用 \hfill 也能起到让子图水平并列的作用 </span><br>    <span class="hljs-comment">% 当然如果水平摆不下, 剩余的图还是会去下一行挤</span><br>    <span class="hljs-keyword">\quad</span> <br>    <span class="hljs-keyword">\begin</span>&#123;subfigure&#125;&#123;0.4<span class="hljs-keyword">\textwidth</span>&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;example-image&#125;<br>    <span class="hljs-keyword">\end</span>&#123;subfigure&#125;<br>    <br>    <span class="hljs-keyword">\caption</span>&#123;The common architecture of a recurrent VAE. &#125;<br>    <span class="hljs-keyword">\label</span>&#123;fig:recurrent<span class="hljs-built_in">_</span>vae&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-子图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-子图&quot;&gt;&lt;/a&gt; 1. 子图&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;注意, 子图和正常的figure也是一样有caption的, 也可以加&lt;code&gt;\label&lt;/cod</summary>
      
    
    
    
    <category term="教程" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文档撰写" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    
    <category term="LaTex" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/LaTex/"/>
    
    
    <category term="LaTex" scheme="https://www.torch-fan.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>git工具用法小结</title>
    <link href="https://www.torch-fan.site/2022/07/27/git%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.torch-fan.site/2022/07/27/git%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</id>
    <published>2022-07-27T03:32:12.000Z</published>
    <updated>2022-11-15T02:27:36.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-submodule"><a class="markdownIt-Anchor" href="#1-submodule"></a> 1. <code>submodule</code></h1><blockquote><p>有时候, 遇到复杂的项目会存在submodule, 要拉取这样的仓库, 需要这样. (至于如何给自己的项目添加一个submodule, git官方给了例子, 就不复制了)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull remote main<br>git submodule update --init <span class="hljs-comment"># 初始化submodule以及拉取其代码</span><br>git submodule update &lt;submodule-name&gt; <span class="hljs-comment"># 获取submodule的远程更新, 也可以不指定名字, 全部更新.</span><br></code></pre></td></tr></table></figure><h1 id="2-commit"><a class="markdownIt-Anchor" href="#2-commit"></a> 2. <code>commit</code></h1><blockquote><p><code>-i</code> 表示进入交互模式</p><p><code>HEAD~10</code> 表示目标是从HEAD向前(更早)的10次提交</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~10<br></code></pre></td></tr></table></figure><p>随后打开一个交互界面, 将<code>pick</code>都替换为<code>squash</code>, !!! 除了最顶上那行的<code>pick</code>保留, 那是<code>HEAD</code>指针所指向的最新提交. 最后保存文件退出即可.</p><p>退出后, 会进入另一个文件, 这里是编辑commit的提交信息的, 每个合并的commit其信息会被合并在一起, 因此是否修改可以看需求, 一般直接退出就行了.</p><p>这里是rebase中其他可供使用的命令:</p><blockquote><p>命令:<br />p, pick &lt;提交&gt; = 使用提交</p><p>r, reword &lt;提交&gt; = 使用提交，但编辑提交说明</p><p>e, edit &lt;提交&gt; = 使用提交，但停止以便在 shell 中修补提交</p><p>s, squash &lt;提交&gt; = 使用提交，但挤压到前一个提交</p><p>f, fixup [-C | -c] &lt;提交&gt; = 类似于 “squash”，但只保留前一个提交<br />的提交说明，除非使用了 -C 参数，此情况下则只<br />保留本提交说明。使用 -c 和 -C 类似，但会打开<br />编辑器修改提交说明</p><p>x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）</p><p>b, break = 在此处停止（使用 ‘git rebase --continue’ 继续变基）</p><p>d, drop &lt;提交&gt; = 删除提交</p><p>l, label <label> = 为当前 HEAD 打上标记</p><p>t, reset <label> = 重置 HEAD 到该标记</p><p>m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]<br />.       创建一个合并提交，并使用原始的合并提交说明（如果没有指定<br />.       原始提交，使用注释部分的 oneline 作为提交说明）。使用<br />.       -c &lt;提交&gt; 可以编辑提交说明。</p><p>可以对这些行重新排序，将从上至下执行。</p><p>如果您在这里删除一行，对应的提交将会丢失。</p><p>然而，如果您删除全部内容，变基操作将会终止。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-submodule&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-submodule&quot;&gt;&lt;/a&gt; 1. &lt;code&gt;submodule&lt;/code&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候, 遇到复杂的项目会存在sub</summary>
      
    
    
    
    <category term="工具" scheme="https://www.torch-fan.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Git" scheme="https://www.torch-fan.site/categories/%E5%B7%A5%E5%85%B7/Git/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E5%B7%A5%E5%85%B7/Git/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Git" scheme="https://www.torch-fan.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Rust使用中遇到的问题</title>
    <link href="https://www.torch-fan.site/2022/07/26/Rust%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.torch-fan.site/2022/07/26/Rust%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-26T02:17:18.000Z</published>
    <updated>2022-11-15T02:27:36.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里整理的问题有可能并非问题, 而是使用过程中对语法\rust版本特性的不熟悉导致, 会先行记录, 等了解其背后的原理会补充解释.</p></blockquote><h1 id="1-编程日常"><a class="markdownIt-Anchor" href="#1-编程日常"></a> 1. 编程日常</h1><h2 id="1-类型不匹配"><a class="markdownIt-Anchor" href="#1-类型不匹配"></a> 1. 类型不匹配:</h2><blockquote><p>在使用一个类型时, 通常会采用<code>use</code>语句, 然而又有一些库它不使用<code>use</code>而直接以全路径引用类型,在调用函数时, 明明是同一个类型,确因为一个是简写, 一个是全路径,导致无法匹配类型而报错.</p></blockquote><p>这时, 要检查一下, 所使用的函数来自哪个库(用<code>A</code>指代), 然后变量的类型来自哪个库(用<code>B</code>), 这里<code>A</code>必定使用了<code>B</code>, 而你所使用的<code>B</code>与<code>A</code>使用的<code>B</code>版本不同. 这时候就要去看<code>B</code>的版本, 把你用的版本改一下, 不过这在rust 2021edition存在, 需要能尽快改进.</p><h2 id="2-cargo-update报错"><a class="markdownIt-Anchor" href="#2-cargo-update报错"></a> 2. <code>cargo update</code>报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Updating crates.io index<br>error: failed to select a version <span class="hljs-keyword">for</span> the requirement `vmm-sys-util = <span class="hljs-string">&quot;^0.10.0&quot;</span>`<br>candidate versions found <span class="hljs-built_in">which</span> didn<span class="hljs-string">&#x27;t match: 0.9.0</span><br><span class="hljs-string">location searched: crates.io index</span><br><span class="hljs-string">required by package `dbs-legacy-devices v0.1.0 (/home/fanqiliang/data/project/active/dbs/crates/dbs-legacy-devices)`</span><br></code></pre></td></tr></table></figure><p>这种情况是: 你的项目是一个workspace, 然后不同component用了相同的crate, 但是之间有依赖关系, 只能手动改了…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这里整理的问题有可能并非问题, 而是使用过程中对语法\rust版本特性的不熟悉导致, 会先行记录, 等了解其背后的原理会补充解释.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-编程日常&quot;&gt;&lt;a class=&quot;markdownIt-Anc</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Rust" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust基础用法</title>
    <link href="https://www.torch-fan.site/2022/07/21/Rust%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
    <id>https://www.torch-fan.site/2022/07/21/Rust%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</id>
    <published>2022-07-21T14:42:37.000Z</published>
    <updated>2022-11-15T02:27:36.099Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是觉得只有列出参考资料的必要, 至于必须强调的细节才会主动列出</p></blockquote><h1 id="1-cargo"><a class="markdownIt-Anchor" href="#1-cargo"></a> 1. Cargo</h1><blockquote><p>参考资料: <a href="https://doc.rust-lang.org/cargo/index.html">https://doc.rust-lang.org/cargo/index.html</a></p></blockquote><p>如果需要添加一个依赖, 以<a href="https://docs.rs/clap/latest/clap/">clap</a>为例:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cargo <span class="hljs-built_in">add</span> clap <span class="hljs-comment">--features derive</span><br></code></pre></td></tr></table></figure><h1 id="2-rustup"><a class="markdownIt-Anchor" href="#2-rustup"></a> 2. Rustup</h1><blockquote><p>参考资料: <a href="https://rust-lang.github.io/rustup/index.html">https://rust-lang.github.io/rustup/index.html</a></p></blockquote><h1 id="crates"><a class="markdownIt-Anchor" href="#crates"></a> Crates</h1><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">doc</th><th style="text-align:center">desc</th></tr></thead><tbody><tr><td style="text-align:center">clap</td><td style="text-align:center"><a href="https://docs.rs/clap">https://docs.rs/clap</a></td><td style="text-align:center">热门的CLI参数解析库</td></tr></tbody></table><h1 id="3-常见用法"><a class="markdownIt-Anchor" href="#3-常见用法"></a> 3. 常见用法:</h1><h2 id="31-raw-string"><a class="markdownIt-Anchor" href="#31-raw-string"></a> 3.1 raw string</h2><blockquote><p>raw string:</p><p><code>r#&quot;...&quot;#</code> 使用r#…# 包裹的字符串内容不会被转义</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">data</span> = <span class="hljs-string">r#&quot;</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="hljs-string">            &quot;age&quot;: 43,</span><br><span class="hljs-string">            &quot;phones&quot;: [</span><br><span class="hljs-string">                &quot;+44 1234567&quot;,</span><br><span class="hljs-string">                &quot;+44 2345678&quot;</span><br><span class="hljs-string">            ]</span><br><span class="hljs-string">        &#125;&quot;#</span>;<br></code></pre></td></tr></table></figure><h2 id="32-socket"><a class="markdownIt-Anchor" href="#32-socket"></a> 3.2 socket</h2><blockquote><p>Socket编程: 注意, socket通信, 只有绑定了一个socket才能监听接受消息, 即: 只有socket是单向通信的</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-keyword">use</span> std::thread;<br><span class="hljs-keyword">use</span> std::os::unix::net::&#123;UnixStream, UnixListener&#125;;<br><span class="hljs-keyword">use</span> std::println;<br><span class="hljs-keyword">use</span> std::io::prelude::*;<br><span class="hljs-keyword">use</span> std::time::Duration;<br><span class="hljs-keyword">use</span> std::io::&#123;BufWriter, BufReader, Read&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_client</span>(stream:  UnixStream) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">read_stream</span> = BufReader::<span class="hljs-title function_ invoke__">new</span>(&amp;stream);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">res</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">// for line in read_stream.lines() &#123;</span><br>    <span class="hljs-comment">//     println!(&quot;Server: &#123;&#125;&quot;, line.unwrap());</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// read_lines is not recommended: as a new line ch is required.</span><br>    read_stream.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> res).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Server: &#123;res:?&#125;&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> std::io::<span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">socket</span> = std::path::Path::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;/tmp/dbs.socks&quot;</span>);<br>    <span class="hljs-keyword">if</span> socket.<span class="hljs-title function_ invoke__">exists</span>() &#123;<br>        std::fs::<span class="hljs-title function_ invoke__">remove_file</span>(socket).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// server</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t1</span> = thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">listener</span> = UnixListener::<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-string">&quot;/tmp/dbs.socks&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>        <span class="hljs-keyword">for</span> <span class="hljs-title class_">mut</span> stream <span class="hljs-keyword">in</span> listener.<span class="hljs-title function_ invoke__">incoming</span>() &#123;<br>            <span class="hljs-keyword">match</span> stream &#123;<br>                <span class="hljs-title function_ invoke__">Ok</span>(stream ) =&gt; &#123;<br>                    <span class="hljs-comment">/* connection succeeded */</span><br>                    thread::<span class="hljs-title function_ invoke__">spawn</span>(|| <span class="hljs-title function_ invoke__">handle_client</span>(stream));<br>                    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;bingo&quot;</span>);<br>                &#125;<br>                <span class="hljs-title function_ invoke__">Err</span>(err) =&gt; &#123;<br>                    <span class="hljs-comment">/* connection failed */</span><br>                    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, err);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;);<br><br>    thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">2000</span>));<br><br>    <span class="hljs-comment">// client</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t2</span> =thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;, soc.)</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">10</span> &#123;<br><br>            <span class="hljs-comment">// each request for one connection (Otherwise, the streaming is recognized as one transfer process)</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">soc</span> = UnixStream::<span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-string">&quot;/tmp/dbs.socks&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            soc.<span class="hljs-title function_ invoke__">write_all</span>(<span class="hljs-string">b&quot;Hello! dsa\n&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            <span class="hljs-comment">// let mut reader = BufReader::new(&amp;soc);</span><br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;send&quot;</span>);<br>            thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">200</span>));<br>        &#125;<br><br>    &#125;);<br><br>    t1.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    t2.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br><br><br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="33-错误处理"><a class="markdownIt-Anchor" href="#33-错误处理"></a> 3.3 错误处理</h2><blockquote><p><code>?</code>可以用在Option后面, 也可以用在Result后面, 但在一个函数中, 如果返回值是Result, 则不能用在Option后, 否则有返回None的风险, 类型不一致, 但可以用<code>ok_or</code>来解决</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::io::ErrorKind;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">test</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), std::io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">res</span> = <span class="hljs-title function_ invoke__">do</span>(<span class="hljs-title function_ invoke__">A</span>().<span class="hljs-title function_ invoke__">ok_or</span>(ErrorKin::AddrInUse)?)?;<br>    res<br>&#125;<br></code></pre></td></tr></table></figure><p>通过ok_or, 将Option的矛盾上升到Error层面, 就好处理的得多了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还是觉得只有列出参考资料的必要, 至于必须强调的细节才会主动列出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-cargo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-cargo&quot;&gt;&lt;/a&gt; 1. Car</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Rust" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu上使用docker</title>
    <link href="https://www.torch-fan.site/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/"/>
    <id>https://www.torch-fan.site/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/</id>
    <published>2022-07-21T12:12:24.000Z</published>
    <updated>2022-11-15T02:27:36.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装docker"><a class="markdownIt-Anchor" href="#1-安装docker"></a> 1. 安装Docker</h1><h2 id="11-安装kvm"><a class="markdownIt-Anchor" href="#11-安装kvm"></a> 1.1 安装KVM</h2><blockquote><p>参考: <a href="https://ubuntu.com/blog/kvm-hyphervisor">https://ubuntu.com/blog/kvm-hyphervisor</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install bridge-utils cpu-checker libvirt-clients libvirt-daemon qemu qemu-kvm<br></code></pre></td></tr></table></figure><blockquote><p>检查虚拟化功能</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kvm-ok<br></code></pre></td></tr></table></figure><h2 id="12-安装docker"><a class="markdownIt-Anchor" href="#12-安装docker"></a> 1.2 安装Docker</h2><blockquote><p>参考资料: <a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>我对Docker Desktop并不感兴趣, 因此选择安装无图形界面的<code>Docker Engine</code></p></blockquote><ol><li>卸载旧版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure><ol start="2"><li>设置软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install ca-certificates curl gnupg lsb-release<br>sudo <span class="hljs-built_in">mkdir</span> -p /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br>sudo apt-get update<br></code></pre></td></tr></table></figure><ol start="3"><li>安装Docker Engine</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><ol start="4"><li>配置权限</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo groupadd docker <br>sudo groupadd libvirt<br>sudo groupadd kvm<br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">docker</span><br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">libvirt</span><br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">kvm</span><br>newgrp kvm<br>newgrp docker<br>newgrp libvirt<br></code></pre></td></tr></table></figure><blockquote><p><code>newgrp</code>用于重新以对应群组身份登陆</p></blockquote><h1 id="2-docker-的常用命令"><a class="markdownIt-Anchor" href="#2-docker-的常用命令"></a> 2. Docker 的常用命令</h1><p>构建镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker build -f <span class="hljs-tag">&lt;<span class="hljs-name">dockerfile</span>&gt;</span> -t <span class="hljs-tag">&lt;<span class="hljs-name">image_name:tag</span>&gt;</span> .<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装docker&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-安装docker&quot;&gt;&lt;/a&gt; 1. 安装Docker&lt;/h1&gt;
&lt;h2 id=&quot;11-安装kvm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="虚拟化应用" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%BA%94%E7%94%A8/"/>
    
    <category term="Docker" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%BA%94%E7%94%A8/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>网站的Header--安全设置</title>
    <link href="https://www.torch-fan.site/2022/07/21/%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>https://www.torch-fan.site/2022/07/21/%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-07-21T09:37:21.000Z</published>
    <updated>2022-11-15T02:27:36.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料: <a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy">https://infosec.mozilla.org/guidelines/web_security#content-security-policy</a></p></blockquote><p>这是我主页的CSP设置, CSP的设置可以有效防止XSS. 如需使用, 只要替换或添加自己需要的域名即可~</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;img-src &#x27;self&#x27; image.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">    script-src &#x27;unsafe-inline&#x27; &#x27;self&#x27;lib.baomitu.com at.alicdn.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">    style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; at.alicdn.com lib.baomitu.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">    media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">    worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">    object-src &#x27;self&#x27; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是, 可以看到<code>script-src</code>中有<code>unsafe-inline</code>, 这仍然不是非常安全, 因此可以去掉, 然后添加script的hash值(不用担心不知道, 浏览器的console中会打印被屏蔽的javascript脚本的hash值, 复制粘贴即可):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;img-src &#x27;self&#x27; imagebed.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">script-src  &#x27;self&#x27;lib.baomitu.com at.alicdn.com &#x27;sha256-u0AitIxF7N0hYtvjq/jQbABXtOYAsJnJeCFoRizdaDM=&#x27; &#x27;sha256-cPZda3lIu6/tDfdRIA6fN74jCn3QXC9sg4vsBi+VW6w=&#x27; &#x27;sha256-gX0IeNsFB1Hts7cNk8JTGzzl9RcNAI+59T2fVUJBw1I=&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">style-src &#x27;self&#x27; at.alicdn.com lib.baomitu.com &#x27;sha256-quaYMDAFArRHzQDsZzJMSjqcQCtz+UUgFIbN2a8TIQc=&#x27; &#x27;sha256-NK4ORibhZQrqK59KJ1o+jAxvEYk2UPVOV0Wgggbfaek=&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">object-src &#x27;self&#x27; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方法也有个缺陷, 对于需要反复构建的网站, 内联script的hash值并非一成不变的, 此时就需要用<code>nonce-&lt;v&gt;</code></p><blockquote><p>Nonces 是通过在 CSP 中指定允许资源的序号，达到限制非法 inline 代码的目的。只有与 CSP 策略中序号一致的代码可以执行，具体使用方式如下(CSS就没必要搞安全了-或者说没那么重要)：</p><p><code>Content-Security-Policy: script-src 'nonce-1'</code></p><p><code>&lt;script nonce=&quot;1&quot;&gt;alert(0);&lt;/script&gt;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;img-src &#x27;self&#x27; imagebed.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">script-src &#x27;self&#x27; lib.baomitu.com at.alicdn.com utteranc.es &#x27;nonce-1&#x27; &#x27;nonce-2&#x27; &#x27;nonce-3&#x27; &#x27;nonce-4&#x27; &#x27;nonce-5&#x27; &#x27;nonce-6&#x27; &#x27;nonce-7&#x27; &#x27;nonce-8&#x27; &#x27;nonce-9&#x27; &#x27;nonce-10&#x27; &#x27;nonce-11&#x27; &#x27;nonce-12&#x27; &#x27;nonce-13&#x27; &#x27;nonce-14&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; at.alicdn.com lib.baomitu.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">object-src &#x27;self&#x27; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后, 根据<a href="https://observatory.mozilla.org/analyze/www.torch-fan.site">mozilla observatory</a>的网站扫描结果, 最终网站的安全设置如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;none&#x27;; form-action &#x27;none&#x27;; base-uri &#x27;self&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">img-src &#x27;self&#x27; imagebed.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">script-src &#x27;self&#x27; lib.baomitu.com at.alicdn.com utteranc.es &#x27;nonce-1&#x27; &#x27;nonce-2&#x27; &#x27;nonce-3&#x27; &#x27;nonce-4&#x27; &#x27;nonce-5&#x27; &#x27;nonce-6&#x27; &#x27;nonce-7&#x27; &#x27;nonce-8&#x27; &#x27;nonce-9&#x27; &#x27;nonce-10&#x27; &#x27;nonce-11&#x27; &#x27;nonce-12&#x27; &#x27;nonce-13&#x27; &#x27;nonce-14&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; at.alicdn.com lib.baomitu.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">object-src &#x27;self&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">font-src &#x27;self&#x27; lib.baomitu.com at.alicdn.com data:;</span></span><br><span class="hljs-string"><span class="hljs-tag">frame-src &#x27;self&#x27; utteranc.es; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考资料: &lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#content-security-policy&quot;&gt;https://infosec.mozilla.org/guid</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Modules</title>
    <link href="https://www.torch-fan.site/2022/07/21/modules/"/>
    <id>https://www.torch-fan.site/2022/07/21/modules/</id>
    <published>2022-07-21T07:16:06.000Z</published>
    <updated>2022-11-15T02:27:36.100Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料: <a href="https://doc.rust-lang.org/reference/items/modules.html">https://doc.rust-lang.org/reference/items/modules.html</a></p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Syntax:<br><span class="hljs-keyword">Module</span> :<br>      <span class="hljs-keyword">unsafe</span>? <span class="hljs-keyword">mod</span> IDENTIFIER <span class="hljs-punctuation">;</span><br>   | <span class="hljs-keyword">unsafe</span>? <span class="hljs-keyword">mod</span> IDENTIFIER <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">        InnerAttribute*</span><br><span class="hljs-comment">        Item*</span><br><span class="hljs-comment">      &#125;</span><br></code></pre></td></tr></table></figure><p><code>module</code>和类型享有相同的命名空间, 不能出现重名的现象. <code>unsafe</code>关键词在rust很多地方都可以用, 其详细作用留待后续补充.<br />一个<code>module</code>通常由花括号的内容进行定义, 如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><span class="hljs-keyword">mod</span> math &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Complex</span> = (<span class="hljs-type">f64</span>, <span class="hljs-type">f64</span>);<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sin</span>(f: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">/* ... */</span><br>      <span class="hljs-built_in">unimplemented!</span>();<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cos</span>(f: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">/* ... */</span><br>      <span class="hljs-built_in">unimplemented!</span>();<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">tan</span>(f: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">/* ... */</span><br>      <span class="hljs-built_in">unimplemented!</span>();<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1-module-source-filenames"><a class="markdownIt-Anchor" href="#1-module-source-filenames"></a> 1. Module Source Filenames</h1><p>上面是一种<code>mod</code>关键词的使用, 另一种是声明一个<code>module</code>, 但是不具备主体. 如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> rvmm;<br></code></pre></td></tr></table></figure><p>这类<code>module</code>的主体是从文件中加载的. 当<code>mod</code>语句没有<code>path</code>属性时, module文件的路径会根据module的名称进行推理, 见下表, 这样就能组织起<code>module</code>的树形结构了</p><table><thead><tr><th style="text-align:center">Module Path</th><th style="text-align:center">File Path</th><th style="text-align:center">Contents</th></tr></thead><tbody><tr><td style="text-align:center">crate</td><td style="text-align:center"><a href="http://lib.rs">lib.rs</a></td><td style="text-align:center"><code>mod util;</code></td></tr><tr><td style="text-align:center">crate::util</td><td style="text-align:center"><a href="http://util.rs">util.rs</a></td><td style="text-align:center"><code>mod config;</code></td></tr><tr><td style="text-align:center">crate::util::config</td><td style="text-align:center">util/config.rs</td><td style="text-align:center"></td></tr></tbody></table><p>事实上, <code>module</code>对应的名字也可以是一个文件夹, 只要该文件夹下有<code>mod.rs</code>.</p><p>注意, 使用<code>mod</code>语句, 只是将一个module添加到module分支树的当前节点上, 还需要用<code>use</code>语句进行导入~</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> vmm_action;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> self::vmm_action::*;<br></code></pre></td></tr></table></figure><h1 id="2-the-path-attribute"><a class="markdownIt-Anchor" href="#2-the-path-attribute"></a> 2. The path attribute</h1><p>有时候, <code>module</code>的名字必须与文件或者文件夹绑定过于死板, 因此可以指定<code>path</code>属性, 单独设置. 这时又存在两种情况:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[path = <span class="hljs-string">&quot;foo.rs&quot;</span>]</span><br><span class="hljs-keyword">mod</span> c;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Source File</th><th><code>c</code>'s File Location</th><th><code>c</code>'s Module Path</th></tr></thead><tbody><tr><td><code>src/a/b.rs</code></td><td><code>src/a/foo.rs</code></td><td><code>crate::a::b::c</code></td></tr><tr><td><code>src/a/mod.rs</code></td><td><code>src/a/foo.rs</code></td><td><code>crate::a::c</code></td></tr></tbody></table><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> inline &#123;<br>    <span class="hljs-meta">#[path = <span class="hljs-string">&quot;other.rs&quot;</span>]</span><br>    <span class="hljs-keyword">mod</span> inner;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Source File</th><th><code>inner</code>'s File Location</th><th><code>inner</code>'s Module Path</th></tr></thead><tbody><tr><td><code>src/a/b.rs</code></td><td><code>src/a/b/inline/other.rs</code></td><td><code>crate::a::b::inline::inner</code></td></tr><tr><td><code>src/a/mod.rs</code></td><td><code>src/a/inline/other.rs</code></td><td><code>crate::a::inline::inner</code></td></tr></tbody></table><blockquote><p><code>mod-rs</code>指的是根模块(例如<code>lib.rs</code>或者<code>main.rs</code>)和<code>mod.rs</code> (用来将目录作为module)</p></blockquote><p>对于第一种情况, <code>path</code>属性的设置在<code>inline module</code>之外, 指定的文件的相对路径是相对于当前源文件所在目录. 注意源文件是<code>mod-rs</code>还是<code>non-mod-rs</code>其在module tree中的位置不一样~ 可以对比第一个表来判断</p><p>对于第二种情况, 也分为<code>mod-rs</code>和<code>non-mod-rs</code>两种情况, 其实本质差不多, 最终归结为module的定义形式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考资料: &lt;a href=&quot;https://doc.rust-lang.org/reference/items/modules.html&quot;&gt;https://doc.rust-lang.org/reference/items/modules.htm</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Rust" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/"/>
    
    <category term="Items" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/Items/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu常用的指令和配置</title>
    <link href="https://www.torch-fan.site/2022/07/21/Ubuntu%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.torch-fan.site/2022/07/21/Ubuntu%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2022-07-21T05:53:28.000Z</published>
    <updated>2022-11-15T02:27:36.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-装机后的常用指令"><a class="markdownIt-Anchor" href="#1-装机后的常用指令"></a> 1. 装机后的常用指令</h1><ol><li>安装驱动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ubuntu-drivers autoinstall  <br>sudo apt install xorg-server-source<br>sudo apt install nvidia-cudnn<br></code></pre></td></tr></table></figure><blockquote><p><code>ubuntu-drivers devices</code>  可以列出推荐的显卡驱动版本, 手动装更好(不会只装最新的)</p></blockquote><ol start="2"><li>安装开发工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential net-tools curl<br></code></pre></td></tr></table></figure><ol start="3"><li>维护</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo resolvectl flush-caches <span class="hljs-comment"># 清除DNS缓存</span><br></code></pre></td></tr></table></figure><h1 id="2-配置网络"><a class="markdownIt-Anchor" href="#2-配置网络"></a> 2. 配置网络</h1><h2 id="21-配置tcp缓存非必须-效果不明显"><a class="markdownIt-Anchor" href="#21-配置tcp缓存非必须-效果不明显"></a> 2.1 配置TCP缓存(非必须, 效果不明显)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/sysctl.conf<br>sudo sysctl -p<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">net.core.default_qdisc=fq<br>net.ipv4.tcp_congestion_control=bbr<br>net.ipv4.tcp_rmem=375126 500170 75025200<br>net.ipv4.tcp_wmem=375126 500170 75025200<br>net.ipv4.tcp_window_scaling=1<br>net.ipv4.tcp_timestamps=1<br></code></pre></td></tr></table></figure><h2 id="22-配置dns解析推荐优化效果突出"><a class="markdownIt-Anchor" href="#22-配置dns解析推荐优化效果突出"></a> 2.2 配置DNS解析(推荐,优化效果突出)</h2><blockquote><p><code>systemd-resolve</code>服务指令可能是<code>systemd-resolve</code>也可能是<code>resolvectl</code>(如ubuntu22.04上)</p><p><code>systemd-resolve</code>配置文件修改指导文档: <a href="https://systemd.network/resolved.conf.html">https://systemd.network/resolved.conf.html</a></p></blockquote><ol><li>修改配置文件: <code>/etc/systemd/resolved.conf</code>, 在最后面加上这一行:</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> single-request-reopen<br></code></pre></td></tr></table></figure><blockquote><p>DNS解析效率会提高很多, 但是还依赖于DNS服务器的稳定性</p></blockquote><ol start="2"><li>修改DNS服务器</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Resolve]</span><br><span class="hljs-attr">DNS</span>=<span class="hljs-number">119.29</span>.<span class="hljs-number">29.29</span> <span class="hljs-number">223.6</span>.<span class="hljs-number">6.6</span><br><span class="hljs-attr">FallbackDNS</span>=<span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br></code></pre></td></tr></table></figure><ol start="3"><li>重启服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart systemd-resolved.service<br></code></pre></td></tr></table></figure><p>此时也可以查看DNS的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">resolvectl status<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-装机后的常用指令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-装机后的常用指令&quot;&gt;&lt;/a&gt; 1. 装机后的常用指令&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;安装驱动&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    <category term="Ubuntu" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>rust相关基础知识</title>
    <link href="https://www.torch-fan.site/2022/07/21/rust%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.torch-fan.site/2022/07/21/rust%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-07-21T04:41:27.000Z</published>
    <updated>2022-11-15T02:27:36.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-版本更替问题"><a class="markdownIt-Anchor" href="#1-版本更替问题"></a> 1. 版本更替问题</h1><p>Python的2.x和3.x之间有巨大的变化, 对于更为年轻的Rust而言, 每一次大版本之间有废弃功能和新特性也不足为奇, 因此有时需要疑问不只要去看官方文档, 还需要看重大版本更新变化, 具体可在<a href="https://doc.rust-lang.org/stable/edition-guide/">https://doc.rust-lang.org/stable/edition-guide/</a>中看到.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-版本更替问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-版本更替问题&quot;&gt;&lt;/a&gt; 1. 版本更替问题&lt;/h1&gt;
&lt;p&gt;Python的2.x和3.x之间有巨大的变化, 对于更为年轻的Rust而言, 每一次大版本之间有废弃功能和</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Rust" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
