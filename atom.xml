<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Torch-Fan</title>
  
  <subtitle>学习笔记~</subtitle>
  <link href="https://www.torch-fan.site/atom.xml" rel="self"/>
  
  <link href="https://www.torch-fan.site/"/>
  <updated>2023-04-03T06:31:04.649Z</updated>
  <id>https://www.torch-fan.site/</id>
  
  <author>
    <name>Torch-Fan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试高频题:海量数据中找到具有某个特征的数字</title>
    <link href="https://www.torch-fan.site/2023/04/03/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%A2%98-%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%89%BE%E5%88%B0%E5%85%B7%E6%9C%89%E6%9F%90%E4%B8%AA%E7%89%B9%E5%BE%81%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://www.torch-fan.site/2023/04/03/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%A2%98-%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%89%BE%E5%88%B0%E5%85%B7%E6%9C%89%E6%9F%90%E4%B8%AA%E7%89%B9%E5%BE%81%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2023-04-03T05:49:26.000Z</published>
    <updated>2023-04-03T06:31:04.649Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目描述：有一个1G大小的文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M，要求返回频数最高的100个词</p></blockquote><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路：</h1><blockquote><p>这类面试题有个非常统一的特点，要处理的文件非常大而内存非常小，基本都需要用到归并思想，但是如何归并要视场景的不同而变化</p></blockquote><ol><li><p>在分而治之的背景下，统计词频首先需要解决“同步”和“通信”问题，或者是使用某种预处理能够避免不同子问题之间有交叉。一种想法是<font color="cyan"><strong>将不同数据映射到不同子文件中</strong></font>，在保证子文件足够小的情况下，确保相同的数字能够在一个子文件中，就能在子问题中解决词频的统计。最后排序在归并过程中解决。1G的文件、1M的内存，使用5000个子文件即可(5000 * 200K约等于1G，平均每个子文件只需占用200K内存)。</p></li><li><p>在划分子文件时有个技巧，一次读取整个文件是不可能的，需要<font color="red">设定一个文件指针，一次读取一个词</font>，计算Hash值后立即写入相应子文件中，然后移动指针，重复相应操作。这个过程并不需要太多的内存消耗（使用的空间几乎为常数）</p></li><li><p>题目要求返回频数最高的100词，那我们就可以在子文件中先统计词频最高的100个词，减少搜索的范围（这个过程可以用堆来完成）。保存成新的5000个子文件</p></li><li><p>最后我们对5000个子文件进行归并处理：<font color="red">每比较出一个较大词频的词，写入到文件中</font>(读的时候是一个文件一次读一个词，每得到一个结果就立即写入，这样占用的内存就很小了)，统计到100后终止。这一每次次归并就能将文件数减半，每个子文件包含最大的100个词频。</p></li></ol><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料:</h1><p>[1]: <a href="https://blog.csdn.net/Fly_as_tadpole/article/details/88375993">https://blog.csdn.net/Fly_as_tadpole/article/details/88375993</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目描述：有一个1G大小的文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M，要求返回频数最高的100个词&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    
    <category term="面经" scheme="https://www.torch-fan.site/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>扩展欧几里得算法和倒水问题</title>
    <link href="https://www.torch-fan.site/2023/04/01/%E5%80%92%E6%B0%B4%E9%97%AE%E9%A2%98/"/>
    <id>https://www.torch-fan.site/2023/04/01/%E5%80%92%E6%B0%B4%E9%97%AE%E9%A2%98/</id>
    <published>2023-04-01T02:05:24.000Z</published>
    <updated>2023-04-01T04:52:54.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>扩展偶极里德算法(Extended Euclidean algorithm, EXGCD), 用于求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax+by=gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>的一组可行解。</p><p>在面试中，面试官可能出一些看似是智力题的问题：有一个3升的杯子A和5升的杯子B，给你无限的水，如何倒出4升的水。</p><p>可能思路比较直观：</p><ol><li>先装满A，全部倒入B中</li><li>再装满A，将B装满，此时A中还剩下1L，B中有5L水</li><li>将B中的水全部倒掉，此时只有A中有1L水，倒入B中</li><li>将A再次装满，全部导入B中，此时B中有4L水</li></ol><p>但是，很容易发现，这个过程似乎并不是唯一的，我们还可以这样：</p><ol><li>先装满B，将B中水倒入A中装满A。此时A中有水3L，B有水2L。</li><li>将A中的水全部倒出，然后把B中的水全部倒入A，此时A有2L水，B为空。</li><li>再将B装满水，从B向A倒水直至满，此时A中有3L，B有4L水。</li><li>把A中水全倒了，我们就有4L水了。</li></ol><p>可以看到，这个倒水装水的过程并不是唯一的，用数学形式化这两个过程可以发现：</p><blockquote><p>+A表示将A装满， +B表示将杯B装满; -A表示将A中3L水倒出，-B表示将B中5L水倒出</p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>+</mo><mi>A</mi><mo>−</mo><mi>B</mi><mo>+</mo><mi>A</mi><mo>=</mo><mn>4</mn><mi>L</mi><mspace linebreak="newline"></mspace><mi>B</mi><mo>−</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo>=</mo><mn>4</mn><mi>L</mi></mrow><annotation encoding="application/x-tex">A + A - B + A = 4L \\B - A + B - A = 4L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault">L</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault">L</span></span></span></span></span></p><p>使用公式表示倒水、装水的这个过程，我们还能发现一个特点：我们一直都在杯满时倒水、杯空时装水。当杯只装一半水时，我们只进行转移操作——将一个杯中的水转移到另一个杯子里。</p><p>那么我们就可以从两个视角（假设只有两种杯子）来看到倒水问题了：</p><ol><li>不停的往A加水，转移到B中；A只要不为空就向B转移水，B只要满了就全部倒掉，最后有k(目标数)升水</li><li>不停的往B加水，转移到A中；B只要不为空就向A转移水，A只要满了就需要立即倒掉，最后留有k(目标数)升水</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>A</mi><mi mathvariant="normal">%</mi><mi>B</mi><mo>=</mo><mi>k</mi><mo separator="true">,</mo><mtext> m</mtext><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>n</mi><mi>B</mi><mi mathvariant="normal">%</mi><mi>A</mi><mo>=</mo><mi>k</mi><mo separator="true">,</mo><mtext> n</mtext><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mA \% B= k,\text{ m}\in [1, +\infin]  \\n B \% A = k, \text{ n}\in [1, +\infin]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">A</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord"> m</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">%</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord"> n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">]</span></span></span></span></span></p><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">A=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">B=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>m</mi><mi mathvariant="normal">%</mi><mn>5</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">3m\%5=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord mathdefault">m</span><span class="mord">%</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>，如果能找到这样一个m使得等式成立，则倒出目标数量水的意图就能达到。</p><h1 id="1-扩展欧几里得算法"><a class="markdownIt-Anchor" href="#1-扩展欧几里得算法"></a> 1. 扩展欧几里得算法</h1><p>将上面的倒水问题再形式化一下：<font color="green"><strong>用容积分别为a和b的水杯量出体积为c的水</strong></font>，相当于求解方程<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mtext> mod </mtext><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a\cdot x\text{ mod }b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord text"><span class="mord"> mod </span></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>。</p><ul><li>如果a, b互质，可以保证问题有解。</li><li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo><mi mathvariant="normal">≔</mi></mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mi mathvariant="normal">或</mi><mi mathvariant="normal">者</mi><mi>c</mi><mo><mi mathvariant="normal">≔</mi></mo><mi>k</mi><mo>⋅</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c\coloneqq gcd(a, b)或者c\coloneqq k\cdot gcd(a, b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mop" style="position:relative;top:-0.03472em;">:</span></span><span class="mrel"><span class="mspace" style="margin-right:-0.06666666666666667em;"></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mop" style="position:relative;top:-0.03472em;">:</span></span><span class="mrel"><span class="mspace" style="margin-right:-0.06666666666666667em;"></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>时，可以用扩展欧几里得算法求解<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></li></ul><blockquote><p>注意到，如果a和b互质，则gcd(a,b)=1，那么第二点也必然成立。因此只要c不等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k\cdot gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>，那么就无法找到一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，能够满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>x</mi><mtext> mod </mtext><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a\cdot x\text{ mod }b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord text"><span class="mord"> mod </span></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></p></blockquote><p>用扩展欧几里得算法公式来表示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">或</mi><mo>:</mo><mo stretchy="false">(</mo><mi>k</mi><mi>a</mi><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><mo stretchy="false">(</mo><mi>k</mi><mi>b</mi><mo stretchy="false">)</mo><mi>y</mi><mo>=</mo><mi>k</mi><mo>⋅</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax+by=gcd(a,b) \\或:(ka)x+(kb)y = k\cdot gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 扩展欧几里得算法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123;<br>        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-type">int</span> d = <span class="hljs-built_in">Exgcd</span>(b, a % b, x, y);<br>    <span class="hljs-type">int</span> t = x;<br>    x = y;<br>    y = t - (a/b) * y;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-type">int</span> a, b;<br>    a = <span class="hljs-number">3</span>, b = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">4</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;GCD: &quot;</span> &lt;&lt; <span class="hljs-built_in">Exgcd</span>(a * k, b * k, x, y) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;x: &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;\t&#x27;</span> &lt;&lt; <span class="hljs-string">&quot;y: &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便描述结果，我们用前言中的倒水例子来描述，还是3L、5L出4L。</p><p>即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">k=4,a=3,b=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>,程序的输出结果是:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GCD</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">x</span>: <span class="hljs-number">2</span>    y: -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">k=4,a=5,b=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>, 程序的输出结果是:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GCD</span>: <span class="hljs-number">4</span><br><span class="hljs-attribute">x</span>: -<span class="hljs-number">1</span>   y: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">k=1,a=3,b=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>, 程序的输出结果是:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GCD</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">x</span>: -<span class="hljs-number">1</span>   y: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">k=2,a=3,b=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>, 程序的输出结果是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GCD</span>: <span class="hljs-number">2</span><br><span class="hljs-attribute">x</span>: -<span class="hljs-number">1</span>   y: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>由此可见，k的数值对扩展欧几里得算法的结果并没有影响（仅对最后的gcd值造成倍数上的改变）。关于更多扩展欧几里得算法内容可以参考OI-WIKI的内容。</p><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1]: <a href="https://oi-wiki.org/math/number-theory/gcd/">https://oi-wiki.org/math/number-theory/gcd/</a></p><p>[2]: <a href="https://blog.csdn.net/lanchunhui/article/details/50594649">https://blog.csdn.net/lanchunhui/article/details/50594649</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;扩展偶极里德算法(Extended Euclidean algorithm, EXGCD), 用于求&lt;span class=&quot;katex&quot;&gt;&lt;s</summary>
      
    
    
    
    <category term="算法和数据结构" scheme="https://www.torch-fan.site/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数论" scheme="https://www.torch-fan.site/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库分库和分表基础概念</title>
    <link href="https://www.torch-fan.site/2023/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <id>https://www.torch-fan.site/2023/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E8%A1%A8/</id>
    <published>2023-03-30T07:02:05.000Z</published>
    <updated>2023-03-30T13:11:04.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念：</h1><h2 id="名词列举"><a class="markdownIt-Anchor" href="#名词列举"></a> 名词列举:</h2><table><thead><tr><th style="text-align:center">名词</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Database</td><td style="text-align:center">库</td></tr><tr><td style="text-align:center">Table</td><td style="text-align:center">表</td></tr><tr><td style="text-align:center">Sharding</td><td style="text-align:center">分库/分表</td></tr></tbody></table><p>后端将数据量较大的数据表拆分到各个数据库中，拆分出的库叫做<font color="red"><strong>分库</strong></font>，分库中的表叫做<font color="red"><strong>分表</strong></font>。</p><h1 id="1-架构的演变"><a class="markdownIt-Anchor" href="#1-架构的演变"></a> 1. 架构的演变:</h1><ol><li>最开始只用单机数据库就足够了</li><li>后来面对越来多的请求，开始将读操作、写操作分离，<font color="skyblue"><strong>主库</strong>(Master)</font>负责写，<font color="red"><strong>从库副本</strong></font>(Slaver Replication)负责读。从库从主库中不断同步更新数据，保持数据一致。当读请求增多时，从库可以不断地水平扩展来解决该问题。</li><li>然而当用户数量达到一定量级后，写请求越来越多。仅仅靠增加主库不能简单的解决问题，因为会带来数据一致性问题，数据同步会使得问题更加复杂。由此就引出了<font color="skyblue"><strong>分库分表</strong></font>（sharding），对写操作进行切分。</li></ol><p><img src="database_sharding.png" alt="Database Sharding" /></p><h1 id="2-垂直纵向切分vertical-sharding"><a class="markdownIt-Anchor" href="#2-垂直纵向切分vertical-sharding"></a> 2. 垂直（纵向）切分(Vertical Sharding)</h1><h2 id="21-垂直分库"><a class="markdownIt-Anchor" href="#21-垂直分库"></a> 2.1 垂直分库</h2><blockquote><p>垂直分库是根据业务的耦合性，将<font color="cyan"><strong>关联度低的不同表</strong></font>存储在不同的数据库。</p></blockquote><p>通过按照业务将不同表分类，放在不同数据库上，而每个库又可以放在不同服务器上。其核心理念是专库专用，带来的提升是：</p><ul><li>解决业务层面的耦合，业务清晰</li><li>能对不同业务的数据进行分级管理、维护、监控、扩展等</li><li>高并发场景下，垂直分库可以一定程度上提升IO、数据库连接数、降低单机硬件资源的瓶颈。</li></ul><h2 id="22-垂直分表"><a class="markdownIt-Anchor" href="#22-垂直分表"></a> 2.2 垂直分表</h2><blockquote><p>垂直分表则面向表中的列，将<font color="red"><strong>不经常用、长度较大</strong></font>的字段拆分到扩展表中。通过大表拆小表的方式，方便开发和维护，还能避免跨页问题。</p><blockquote><p>MySQl底层是通过数据页存储的，一条记录占用空间过大会导致跨页，造成额外的性能开销。</p></blockquote><p>数据库中<font color="cyan"><strong>以行为单位</strong></font>加载进缓存，如果每一行数据量越小，能同时加载的行数就提升，缓存命中的概率就更高，就能减少硬盘IO。将高频访问的字段放进主表也是相似的道理。</p></blockquote><p>垂直分表后，如果需要同时查询主、从表中的数据，不应使用join联表查询，而应进行两次（视从表数量而定）数据查询。因为join的性能开销较大，并且联表查询时会将两行合并，导致跨页。</p><h1 id="3-水平横向切分horizontal-sharding"><a class="markdownIt-Anchor" href="#3-水平横向切分horizontal-sharding"></a> 3. 水平（横向）切分（Horizontal Sharding）</h1><blockquote><p>根据业务或者字段访问频率去垂直切分的粒度有限，或者即使垂直切分了数据行数巨大也存在单库读写、存储性能瓶颈。这时需要进行水平切片。</p></blockquote><h2 id="31-库内分表仅分表"><a class="markdownIt-Anchor" href="#31-库内分表仅分表"></a> 3.1 库内分表（仅分表）</h2><p>库内分表只能解决单一表数据量过大的问题，但没有将表分布到不同的库上。对MySQL来说帮助不大，所有的数据库连接请求还是竞争同一个物理机的CPU、内存和网络IO。</p><h2 id="32-分库分表既分库也分表"><a class="markdownIt-Anchor" href="#32-分库分表既分库也分表"></a> 3.2 分库分表（既分库也分表）</h2><p>将一个表的数据划分到不同节点上才能尽可能避免单个节点的瓶颈约束。</p><h2 id="33-水平切分的方式"><a class="markdownIt-Anchor" href="#33-水平切分的方式"></a> 3.3 水平切分的方式：</h2><h3 id="331-根据数值范围range"><a class="markdownIt-Anchor" href="#331-根据数值范围range"></a> 3.3.1 根据数值范围(Range)</h3><h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点：</h4><ol><li>扩展性和可维护性好，每次只需要<font color="cyan"><strong>将新的数据存入到新的库中</strong></font>，无需对其它分片进行数据迁移。</li><li>单表大小可控（只要确定划分的数值范围即可）</li><li>使用分片的条件字段进行范围查询时，连续分片可快速定位到分片进行查询，有效避免跨分片查询的问题。</li></ol><h4 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点：</h4><p><font color="red"><strong>热点数据不均匀</strong></font>：有的分片中对应数据被频繁访问，而有的分片数据极少被访问。例如新注册用户可能比较活跃，而10年“老兵”可能许久都未曾上线了。数据访问密度的不均衡，减弱了分库分表的作用，单个节点仍然可能成为限制整个系统的瓶颈。</p><h3 id="332-使用取模mod"><a class="markdownIt-Anchor" href="#332-使用取模mod"></a> 3.3.2 使用取模(Mod)</h3><h4 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2"></a> 优点：</h4><p>数据分片相对均匀，不易出现热点数据库问题。</p><h4 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2"></a> 缺点：</h4><ol><li>对分片进行扩容的时候需要进行数据迁移（可以使用一致性Hash算法解决）</li><li>分片查询时可能增加查询难度。譬如查询数据中是否存在某一项时，需要同时查询所有分片，然后聚合，最后返回给应用，Sharding此时反而成为了累赘。</li></ol><h3 id="333-使用一致性hash算法consistent-hashing"><a class="markdownIt-Anchor" href="#333-使用一致性hash算法consistent-hashing"></a> 3.3.3 使用一致性Hash算法(Consistent Hashing)</h3><blockquote><p>事实上，这个所谓的一致性算法和Chord环有些相似</p></blockquote><blockquote><p>一致性hash算法：对于分布式存储，不同机器上存储了不同对象的数据，需要使用Hash函数建立从数据到服务器之间的映射关系。在物理节点数量不变的情况下，普通Hash算法就已经能胜任这个映射过程。但是一旦<font color="red"><strong>需要对节点进行扩容</strong></font>，那么会造成大量的数据迁移，导致网络通信压力突增，严重时还会导致数据库宕机。</p></blockquote><p>一致性Hash算法正是为了保证当机器增加或者减少时，<font color="pink"><strong>节点之间的数据迁移只限于两节点之间</strong></font>，不会造成全局的网络问题。</p><h4 id="环形hash空间"><a class="markdownIt-Anchor" href="#环形hash空间"></a> 环形Hash空间</h4><p>按照常用的Hash算法将所有key哈希到一个具有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>个桶的空间中，将这些数字头尾相连，形成逻辑上的闭环，如下图所示：</p><p><img src="ch_1.png" alt="环形空间" /></p><p>接着我们将数据object1，object2…对象映通过特定的Hash计算，将其映射到Hash环上，如下图所示:</p><p><img src="ch_2.png" alt="对象映射到环形空间中" /></p><p>假设我们有Node1、Node2…若干台机器，通过Hash算法（机器IP或者其他机器的唯一标识）得到对应环上的KEY，映射到环中，示意图如下：</p><p><img src="ch_3.png" alt="将节点映射到环形空间中" /></p><p>如图所示，将节点也映射到环形空间中之后，我们就可以将不大于节点的数据存到对应节点中。当一个节点被删除时，由其第一后继节点接替其数据的存储；当一个节点被添加时，小于该节点且大于节点前驱节点key值的所有数据都转移到新的节点上。</p><h4 id="优点-3"><a class="markdownIt-Anchor" href="#优点-3"></a> 优点：</h4><p>扩容后最多在两个节点之间迁移数据，极大的减少了扩容时数据库迁移的负担。</p><h4 id="存在的问题"><a class="markdownIt-Anchor" href="#存在的问题"></a> 存在的问题：</h4><p>当集群的节点数量较少时，就可能会出现节点在环形Hash空间分布不均衡的问题。会造成<font color="cyan"><strong>Hash环的倾斜</strong></font>。大部分的数据只存放在少量节点上，大量节点上数据稀少。各个节点之间负载不均衡。</p><p>解决的办法在于创建虚拟节点：每个物理节点对应多个虚拟节点，这样一来一定程度上可以减少Hash环倾斜的问题。</p><h3 id="334-使用snowflake进行分片"><a class="markdownIt-Anchor" href="#334-使用snowflake进行分片"></a> 3.3.4 使用Snowflake进行分片</h3><blockquote><p>待详细补充</p></blockquote><blockquote><p>主要思想是使用该算法生成带有<font color="cyan"><strong>时间戳信息和分片维度（数据库分片值和表分片值）</strong></font></p></blockquote><h1 id="4-数据库分片引入的问题"><a class="markdownIt-Anchor" href="#4-数据库分片引入的问题"></a> 4. 数据库分片引入的问题</h1><blockquote><p>内容较多，待补充</p></blockquote><h2 id="41-分布式事务"><a class="markdownIt-Anchor" href="#41-分布式事务"></a> 4.1 分布式事务</h2><h2 id="42-跨节点join联表查询"><a class="markdownIt-Anchor" href="#42-跨节点join联表查询"></a> 4.2 跨节点join联表查询</h2><h2 id="43-跨节点聚合"><a class="markdownIt-Anchor" href="#43-跨节点聚合"></a> 4.3 跨节点聚合</h2><h2 id="44-节点扩容"><a class="markdownIt-Anchor" href="#44-节点扩容"></a> 4.4 节点扩容</h2><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h1><p>1: <a href="https://help.aliyun.com/document_detail/133453.html">分库分表</a></p><p>2: <a href="https://juejin.cn/post/6844903648670007310">MySQL 分库分表方案，总结的非常好！</a></p><p>3: <a href="https://cloud.tencent.com/developer/article/1819045">实战彻底搞清分库分表（垂直分库，垂直分表，水平分库，水平分表）</a></p><p>4: <a href="https://blog.csdn.net/weixin_44062339/article/details/100491744">彻底搞清分库分表（垂直分库，垂直分表，水平分库，水平分表）</a></p><p>5: <a href="https://blog.csdn.net/qq_32828253/article/details/109586242">数据库分库分表及其切片方案（垂直切分、水平切分）</a></p><p>6: <a href="https://zhuanlan.zhihu.com/p/129049724">一致性哈希算法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本概念&quot;&gt;&lt;/a&gt; 基本概念：&lt;/h1&gt;
&lt;h2 id=&quot;名词列举&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#名词列举&quot;&gt;&lt;/a&gt; 名词列举:&lt;/</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据库" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="基础知识" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>通过Remote Forward让无联网权限服务器联网</title>
    <link href="https://www.torch-fan.site/2023/02/09/%E9%80%9A%E8%BF%87Remote-Forward%E8%AE%A9%E6%97%A0%E8%81%94%E7%BD%91%E6%9D%83%E9%99%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%81%94%E7%BD%91/"/>
    <id>https://www.torch-fan.site/2023/02/09/%E9%80%9A%E8%BF%87Remote-Forward%E8%AE%A9%E6%97%A0%E8%81%94%E7%BD%91%E6%9D%83%E9%99%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%81%94%E7%BD%91/</id>
    <published>2023-02-09T11:44:19.000Z</published>
    <updated>2023-02-19T07:43:18.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先回顾一下remote forward的作用：将本地服务转发出去，以SSH服务器为媒介，外部访问SSH服务器的特定端口，流量会转发到本地端口上</p></blockquote><p>参考资料：<a href="https://unix.stackexchange.com/questions/116191/give-server-access-to-internet-via-client-connecting-by-ssh">https://unix.stackexchange.com/questions/116191/give-server-access-to-internet-via-client-connecting-by-ssh</a></p><h1 id="1-安装squid-以ubuntu为例"><a class="markdownIt-Anchor" href="#1-安装squid-以ubuntu为例"></a> 1. 安装Squid （以Ubuntu为例）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># squid的默认监听端口是`3128`</span><br>sudo apt install squid<br><br><span class="hljs-comment"># Make sure  the service is started</span><br>sudo service squid start<br><br><span class="hljs-comment"># 编辑配置文件 </span><br>sudo vim /etc/squid/squid.conf<br></code></pre></td></tr></table></figure><p>在配置文件中注释掉: <code>http_access deny all</code>, 并且添加: <code>http_access allow all</code></p><h1 id="2-如果host使用了代理譬如需要访问google服务等内容"><a class="markdownIt-Anchor" href="#2-如果host使用了代理譬如需要访问google服务等内容"></a> 2. 如果Host使用了代理（譬如需要访问Google服务等内容）：</h1><blockquote><p>有一点需要注意，在squid中加入代理设置会和clash的代理冲突，导致clash软件出现一些奇怪BUG, 或者导致squid的转发出现中断； 这时需要重新启动clash，然后重新建立转发隧道</p></blockquote><p>假设Host使用的代理为：<code>127.0.0.1:7890</code><br />那么需要在配置文件<code>/etc/squid/squid.conf</code>中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">refresh_pattern (Release|Packages(.gz)*)$ 0 20% 2880<br>cache_peer 127.0.0.1 parent 7890 0 no-query default<br>ever_direct deny local-servers  <span class="hljs-comment"># 本地的域名直连</span><br>never_direct allow all<br></code></pre></td></tr></table></figure><blockquote><p>后面还需要<code>sudo service squid restart</code>重启一下服务，同时记得暂时断开所有使用了squid服务的SSH连接。</p></blockquote><h1 id="3-在server上配置"><a class="markdownIt-Anchor" href="#3-在server上配置"></a> 3. 在Server上配置：</h1><blockquote><p>下面这个可以写进配置文件里，在登陆用户时使得该配置自动生效；也可以就在终端临时配置；</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:3129&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:3129&quot;</span><br></code></pre></td></tr></table></figure><h1 id="4-remote-forward"><a class="markdownIt-Anchor" href="#4-remote-forward"></a> 4. Remote forward</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -R 3129:localhost:3128 user@server_ip<br></code></pre></td></tr></table></figure><p>也可以使用autossh来建立一个持久化的SSH隧道，具体可见：<a href="https://wiki.gentoo.org/wiki/Autossh">https://wiki.gentoo.org/wiki/Autossh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要配好密钥，使得其可以免密登陆</span><br>autossh -M 20000 -f -NT -R 3129:localhost:3128 user@server_id<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;首先回顾一下remote forward的作用：将本地服务转发出去，以SSH服务器为媒介，外部访问SSH服务器的特定端口，流量会转发到本地端口上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://unix.sta</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建VECROsim笔记</title>
    <link href="https://www.torch-fan.site/2023/01/03/%E6%90%AD%E5%BB%BAVECROsim%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.torch-fan.site/2023/01/03/%E6%90%AD%E5%BB%BAVECROsim%E7%AC%94%E8%AE%B0/</id>
    <published>2023-01-03T11:49:01.000Z</published>
    <updated>2023-02-08T04:59:31.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-相关资料"><a class="markdownIt-Anchor" href="#1-相关资料"></a> 1. 相关资料：</h1><ul><li>代码仓库：<a href="https://github.com/etigerstudio/VECROsim">https://github.com/etigerstudio/VECROsim</a></li><li>相关论文: <a href="https://ieeexplore.ieee.org/abstract/document/9978950">VECROsim: A Versatile Metric-oriented Microservice Fault Simulation System</a></li></ul><blockquote><p>搭建过程中有一些问题是镜像问题，除了第一次启动minikube需要设置proxy外，拉取完所有镜像后，请stop minikube，然后重新启动：<code>minikube start --image-mirror-country=cn --registry-mirror https://dockerhub.azk8s.cn</code></p></blockquote><h1 id="2-部署过程"><a class="markdownIt-Anchor" href="#2-部署过程"></a> 2. 部署过程:</h1><blockquote><p>部署过程中如果遇到问题，但是一直摸不着头脑，不如<code>minikube dashboard</code>看一下(比如查看镜像名是否正确), 错误信息更加准确有效～</p><p>如果想进入minikube虚拟机： <code>minikube ssh</code></p><p>如果想进入pod: <code>kubectl exec -it &lt;pod&gt; -n &lt;namespace&gt; -- /bin/sh</code></p><p>如果觉得minikube给的资源太少：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">minikube stop<br>minikube config <span class="hljs-built_in">set</span> cpus 4<br>minikube start<br></code></pre></td></tr></table></figure></blockquote><h2 id="21-安装minikube和go"><a class="markdownIt-Anchor" href="#21-安装minikube和go"></a> 2.1 安装minikube和Go：</h2><p><a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<br>sudo install minikube-linux-amd64 /usr/local/bin/minikube<br>minikube version<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://golang.google.cn/dl/go1.19.4.linux-amd64.tar.gz<br>sudo <span class="hljs-built_in">rm</span> -rf /usr/local/go &amp;&amp; sudo tar -C /usr/local -xzf go1.19.4.linux-amd64.tar.gz<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:/usr/local/go/bin&#x27;</span> &gt;&gt; ~/.profile<br>go version<br></code></pre></td></tr></table></figure><h2 id="22-创建集群"><a class="markdownIt-Anchor" href="#22-创建集群"></a> 2.2 创建集群：</h2><blockquote><p>注意，创建集群时，如若需要VPN. 代理的配置请见笔记：<a href="https://www.torch-fan.site/2022/07/20/Ubuntu%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/">Ubuntu下配置代理</a></p><p>minikube会创建一个网卡用于和主机通信，如果使用VPN务必将minikube的网卡IP忽略掉，这个IP地址在部署过程中会给出提示，所以不必担心不知道</p><p><code>minikube start --cpus=8 --memory 8196 --disk-size 32g --docker-env http_proxy=http://192.168.8.2:7890 --docker-env https_proxy=http://192.168.8.2:7890 --docker-env no_proxy=localhost,127.0.0.1,10.96.0.0/12,192.168.59.0/24,192.168.49.0/24,192.168.39.0/24,192.168.49.2 --image-mirror-country=cn</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">minikube start --cpus=8 --memory=8196 --disk-size 32g --image-mirror-country=cn<br>minikube ssh docker pull mongo<br></code></pre></td></tr></table></figure><h2 id="23-构建镜像"><a class="markdownIt-Anchor" href="#23-构建镜像"></a> 2.3 构建镜像:</h2><ul><li>vecro-base: <a href="https://github.com/etigerstudio/vecro-base">https://github.com/etigerstudio/vecro-base</a></li><li>vecro-mongodb: <a href="https://github.com/etigerstudio/vecro-mongodb">https://github.com/etigerstudio/vecro-mongodb</a></li></ul><blockquote><p>推荐使用我修改后的仓库：</p></blockquote><ul><li>vecro-base: <a href="https://github.com/QiliangFan/vecro-base">https://github.com/QiliangFan/vecro-base</a></li><li>vecro-mongodb: <a href="https://github.com/QiliangFan/vecro-mongodb">https://github.com/QiliangFan/vecro-mongodb</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/etigerstudio/vecro-base<br><span class="hljs-built_in">cd</span> vecro-base<br>GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o vecro-base .<br>docker build . -t fanqiliang/vecro-base:v1<br><span class="hljs-comment"># 或者这样，就不用push和改名了</span><br>minikube image build -t vecro-base:v1 .<br></code></pre></td></tr></table></figure><blockquote><p>！！！！ 注意，请勿使用latest的mongo镜像，必然会失败！经过测试，mongo:4.2可正常运行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/etigerstudio/vecro-mongodb<br><span class="hljs-built_in">cd</span> vecro-mongodb<br>GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o vecro-mongodb .<br>docker build . -t fanqiliangvecro-mongodb:v1 <br><span class="hljs-comment"># 或者这样，就不用push和改名了</span><br>minikube image build -t vecro-mongodb:v1 .<br></code></pre></td></tr></table></figure><blockquote><p>这里我已经build好并且把镜像上传了，大家要使用的话只需要加个前缀<code>fanqiliang/</code>或者直接使用我fork的仓库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker login<br>docker push fanqiliang/vecro-base:v1<br>docker push fanqiliang/vecro-mongodb:v1 <br></code></pre></td></tr></table></figure><h2 id="24-部署monitoring-infrastructure"><a class="markdownIt-Anchor" href="#24-部署monitoring-infrastructure"></a> 2.4 部署monitoring infrastructure:</h2><blockquote><p>进入VECROsim源码根目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> metrics/setup/ <br>sh ./setup.sh<br></code></pre></td></tr></table></figure><h2 id="25-部署microservice-system"><a class="markdownIt-Anchor" href="#25-部署microservice-system"></a> 2.5 部署microservice system:</h2><blockquote><p>进入VECROsim源码根目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> deploy<br>kubectl create namespace social<br>kubectl create configmap mongo-initjs -n social --from-file=mongo-init.js<br><span class="hljs-comment"># Deploy Social system in the cluster</span><br>go run . -deffile base/social.yaml<br><span class="hljs-comment"># Install Prometheus monitor for Social system</span><br>kubectl create namespace monitoring<br>kubectl apply -f base/social-monitor.yaml<br></code></pre></td></tr></table></figure><blockquote><p>注意，如果pod镜像拉取失败，如果想要删除pod可以这样，pod会自动重新生成</p><p><code>kubectl delete pods --all -n social</code></p><p>如果想要彻底删除这些pod只需要删除对应namespace即可</p><p><code>kubectl delete namespace social</code></p><p>如果想立即强制kill并删除容器可以这样<br /><code>kubectl delete pods --all -n social --force --grace-period=0</code></p></blockquote><p>有时是mongo镜像拉取失败，可以进入虚拟机拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">minikube ssh docker pull mongo<br></code></pre></td></tr></table></figure><h2 id="25-施加负载"><a class="markdownIt-Anchor" href="#25-施加负载"></a> 2.5 施加负载:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Make &#x27;text&#x27; service accessible at http://localhost:8080</span><br><span class="hljs-built_in">cd</span> ./load<br>kubectl port-forward -n social svc/social-text 8080:80 &gt; /dev/null &amp; <br>go run . -delay 100ms -duration 2h -<span class="hljs-built_in">users</span> 5 -url <span class="hljs-string">&quot;http://localhost:8080&quot;</span><br></code></pre></td></tr></table></figure><h2 id="26-注入故障"><a class="markdownIt-Anchor" href="#26-注入故障"></a> 2.6 注入故障：</h2><blockquote><p>Inject the a network delay fault (3 minutes 500ms network delay to service posts-storage) to the system.</p></blockquote><p>在注入故障过程中，作者借用了<a href="https://chaos-mesh.org/zh/docs/quick-start/">chaos-mesh工具</a>, 这个工具是专门用来模拟微服务中故障注入的。 因此需要先安装chaos-mesh，推荐使用helm安装chaos-mesh: <a href="https://chaos-mesh.org/docs/production-installation-using-helm/">https://chaos-mesh.org/docs/production-installation-using-helm/</a></p><blockquote><p>注意，如果helm安装chaos-mesh后pod启动失败，极有可能是网络不好。在搭建过程中我就反复失败，但是网络环境好时，就一下成功了。 （注意，特别需要设置好vpn~）</p><p>如果是因为拉取镜像失败，可以提前拉取：<code>minikube ssh docker pull ghcr.io/chaos-mesh/chaos-mesh:v2.5.0</code></p><p>可以通过反复卸载安装chaos-mesh来重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm uninstall chaos-mesh -n chaos-mesh<br>helm install chaos-mesh chaos-mesh/chaos-mesh -n=chaos-mesh<br></code></pre></td></tr></table></figure><p>或者这样重启：<code>kubectl rollout restart deployment/chaos-controller-manager -n chaos-mesh</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Inject network delay fault to the deployed system</span><br>kubectl apply -f ./inject/social-delay.yaml <br></code></pre></td></tr></table></figure><h2 id="27-获取数据"><a class="markdownIt-Anchor" href="#27-获取数据"></a> 2.7 获取数据：</h2><blockquote><p>开放端口：</p></blockquote><blockquote><p>参考：<a href="https://blog.marcnuri.com/prometheus-grafana-setup-minikube">https://blog.marcnuri.com/prometheus-grafana-setup-minikube</a></p></blockquote><h3 id="271-grafana"><a class="markdownIt-Anchor" href="#271-grafana"></a> 2.7.1： Grafana</h3><blockquote><p>其实这个没必要.</p></blockquote><p>用户/密码都是<code>admin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl expose service grafana -n simple --<span class="hljs-built_in">type</span>=NodePort --target-port=3000 --name=grafana-np<br>minikube service grafana-np -n simple<br><span class="hljs-comment"># kubectl delete service grafana-np -n simple</span><br></code></pre></td></tr></table></figure><h3 id="272-promethues"><a class="markdownIt-Anchor" href="#272-promethues"></a> 2.7.2: Promethues</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl expose service prometheus-k8s -n simple --<span class="hljs-built_in">type</span>=NodePort --target-port=9090 --name=prometheus-np<br>minikube service prometheus-np -n simple<br></code></pre></td></tr></table></figure><p>然后prometheus就会输出url，访问url就能获取指标了，这也是后面python脚本需要修改的地方：</p><blockquote><p>这里部署了两个prometheus服务，所有有两</p></blockquote><table><thead><tr><th>NAMESPACE</th><th>NAME</th><th>TARGET PORT</th><th>URL</th></tr></thead><tbody><tr><td>simple</td><td>prometheus-np</td><td>port-1/9090</td><td><a href="http://192.168.49.2:32165">http://192.168.49.2:32165</a></td></tr><tr><td></td><td></td><td>port-2/8080</td><td><a href="http://192.168.49.2:32261">http://192.168.49.2:32261</a></td></tr></tbody></table><blockquote><p>⚠️ vecrosim获取的指标都是在vecro-base中自定义的指标，因此需要了解Prometheus通过编程自定义指标的方式。</p></blockquote><blockquote><p>有一个小问题，minikube虚拟机创建时时区是UTC+0,和主机的时区不同导致时间不一样，因此需要更改系统时区。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cd metrics/<br>python3 collect_social.py<br></code></pre></td></tr></table></figure><p>有一些参数需要配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># url 在暴露端口时minikube service会输出prometheus的ip和端口</span><br>prometheus_host_url = <span class="hljs-string">&quot;http://127.0.0.1:9091/&quot;</span><br>start_time = parse_datetime(<span class="hljs-string">&quot;2022-05-22 21:00:00&quot;</span>)<br>end_time = parse_datetime(<span class="hljs-string">&quot;2022-05-22 22:00:00&quot;</span>)<br>step = <span class="hljs-string">&quot;60s&quot;</span><br>filepath = <span class="hljs-string">&quot;social-delay/jitter_high&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-相关资料&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-相关资料&quot;&gt;&lt;/a&gt; 1. 相关资料：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;代码仓库：&lt;a href=&quot;https://github.com/etigerstudio/VECROs</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://www.torch-fan.site/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Google OnlineBoutique流程</title>
    <link href="https://www.torch-fan.site/2022/12/26/%E6%90%AD%E5%BB%BAGoogle-OnlineBoutique%E6%B5%81%E7%A8%8B/"/>
    <id>https://www.torch-fan.site/2022/12/26/%E6%90%AD%E5%BB%BAGoogle-OnlineBoutique%E6%B5%81%E7%A8%8B/</id>
    <published>2022-12-26T03:07:52.000Z</published>
    <updated>2023-02-08T04:59:31.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-资料准备"><a class="markdownIt-Anchor" href="#1-资料准备"></a> 1. 资料准备：</h1><ul><li>OnlineBoutique仓库地址：<a href="https://github.com/GoogleCloudPlatform/microservices-demo">https://github.com/GoogleCloudPlatform/microservices-demo</a></li><li>部署文档：<a href="https://github.com/GoogleCloudPlatform/microservices-demo/blob/main/docs/development-guide.md">https://github.com/GoogleCloudPlatform/microservices-demo/blob/main/docs/development-guide.md</a></li><li>安装Helm（The package manager for Kubernetes）：<a href="https://helm.sh/">https://helm.sh/</a></li><li>为minikube安装prometheus和grafana：<a href="https://blog.marcnuri.com/prometheus-grafana-setup-minikube">https://blog.marcnuri.com/prometheus-grafana-setup-minikube</a></li></ul><h1 id="2-环境准备"><a class="markdownIt-Anchor" href="#2-环境准备"></a> 2. 环境准备：</h1><h2 id="21-docker-engine"><a class="markdownIt-Anchor" href="#21-docker-engine"></a> 2.1 Docker engine：</h2><p>Document：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install \<br>    ca-certificates \<br>    curl \<br>    gnupg \<br>    lsb-release<br>sudo <span class="hljs-built_in">mkdir</span> -p /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br>sudo apt-get update<br>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><h2 id="22-kubectl"><a class="markdownIt-Anchor" href="#22-kubectl"></a> 2.2 kubectl:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span><br>sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl<br>kubectl version --client --output=yaml<br></code></pre></td></tr></table></figure><h2 id="23-skaffold-20"><a class="markdownIt-Anchor" href="#23-skaffold-20"></a> 2.3 skaffold (2.0+):</h2><p><a href="https://skaffold.dev/docs/install/">https://skaffold.dev/docs/install/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># For Linux x86_64 (amd64)</span><br>curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 &amp;&amp; \<br>sudo install skaffold /usr/local/bin/<br>skaffold version<br></code></pre></td></tr></table></figure><h2 id="24-minikube"><a class="markdownIt-Anchor" href="#24-minikube"></a> 2.4 minikube:</h2><p><a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<br>sudo install minikube-linux-amd64 /usr/local/bin/minikube<br>minikube version<br></code></pre></td></tr></table></figure><h2 id="25-kind"><a class="markdownIt-Anchor" href="#25-kind"></a> 2.5 kind:</h2><p><a href="https://kind.sigs.k8s.io/docs/user/quick-start">https://kind.sigs.k8s.io/docs/user/quick-start</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64<br><span class="hljs-built_in">chmod</span> +x ./kind<br>sudo <span class="hljs-built_in">mv</span> ./kind /usr/local/bin/kind<br>kind --version<br></code></pre></td></tr></table></figure><h1 id="3-创建集群"><a class="markdownIt-Anchor" href="#3-创建集群"></a> 3. 创建集群：</h1><blockquote><p>注意，创建集群时，务必连接VPN，否则会超时. 代理的配置请见笔记：<a href="https://www.torch-fan.site/2022/07/20/Ubuntu%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/">Ubuntu下配置代理</a></p><p><code>minikube start --docker-env http_proxy=http://127.0.0.1:7890 --docker-env https_proxy=http://127.0.0.1:7890 --docker-env no_proxy=localhost,127.0.0.1,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24</code></p></blockquote><blockquote><p>机器配置</p><p>4 CPUs</p><p>4.0 GiB memory</p><p>32 GB disk space</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果使用代理 (只有第一次拉镜像需要vpn)</span><br>minikube start --docker-env http_proxy=192.168.8.2:7890 --docker-env https_proxy=192.168.8.2:7890 --docker-env no_proxy=localhost,127.0.0.1,10.96.0.0/12,192.168.0.1/16,192.168.49.2 --cpus=4 --memory 4096 --disk-size 32g<br><br>minikube start --cpus=4 --memory 4096 --disk-size 32g<br></code></pre></td></tr></table></figure><blockquote><p>查看是否连上了控制面板</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get nodes<br></code></pre></td></tr></table></figure><blockquote><p>运行集群</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">skaffold run<br><span class="hljs-comment"># 这一步仍然需要VPN</span><br><span class="hljs-built_in">export</span> http_proxy=192.168.8.2:7890<br><span class="hljs-built_in">export</span> https_proxy=192.168.8.2:7890<br><span class="hljs-built_in">export</span> no_proxy=<span class="hljs-string">&quot;localhost,127.0.0.1,10.96.0.0/12,192.168.0.1/16,192.168.49.2&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>获取所有pods</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pods<br></code></pre></td></tr></table></figure><blockquote><p>清理</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">skaffold delete<br></code></pre></td></tr></table></figure><h1 id="4-收集指标"><a class="markdownIt-Anchor" href="#4-收集指标"></a> 4. 收集指标</h1><blockquote><p>安装Prometheus</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo snap install helm --classic<br>helm repo add prometheus-community https://prometheus-community.github.io/helm-charts<br>helm install prometheus prometheus-community/prometheus<br>kubectl expose service prometheus-server --<span class="hljs-built_in">type</span>=NodePort --target-port=9090 --name=prometheus-server-np<br><span class="hljs-comment"># 开放prometheus的端口，可供外部访问, 并自动打开浏览器访问</span><br>minikube service prometheus-server-np<br></code></pre></td></tr></table></figure><blockquote><p>安装Grafana</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm repo add grafana https://grafana.github.io/helm-charts<br>helm install grafana grafana/grafana<br>kubectl expose service grafana --<span class="hljs-built_in">type</span>=NodePort --target-port=3000 --name=grafana-np<br><span class="hljs-comment"># 这一行打印账号“admin”的密码，需要记住！</span><br>kubectl get secret --namespace default grafana -o jsonpath=<span class="hljs-string">&quot;&#123;.data.admin-password&#125;&quot;</span> | <span class="hljs-built_in">base64</span> --decode ; <span class="hljs-built_in">echo</span><br><span class="hljs-comment"># 开放Grafana的端口，可供外部访问, 并自动打开浏览器访问</span><br>minikube service grafana-np<br></code></pre></td></tr></table></figure><p>需要在Grafana中配置来自Prometheus的datasource，就可以创建pane进行可视化，并且导出数据了。但是这里仍然不包含fault injection的部分，需要找一个合适的故障注入工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-资料准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-资料准备&quot;&gt;&lt;/a&gt; 1. 资料准备：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;OnlineBoutique仓库地址：&lt;a href=&quot;https://github.com/Googl</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://www.torch-fan.site/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu使用EasyConnect连接学校服务器</title>
    <link href="https://www.torch-fan.site/2022/11/26/Ubuntu%E4%BD%BF%E7%94%A8EasyConnect%E8%BF%9E%E6%8E%A5%E5%AD%A6%E6%A0%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.torch-fan.site/2022/11/26/Ubuntu%E4%BD%BF%E7%94%A8EasyConnect%E8%BF%9E%E6%8E%A5%E5%AD%A6%E6%A0%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-11-26T07:02:34.000Z</published>
    <updated>2022-11-29T09:23:44.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>EasyConnect是知名的流氓软件，如果不了解可以搜索“流氓软件 EasyConnect”，想在Linux下安全使用可以遵循这篇</p></blockquote><h1 id="1-准备"><a class="markdownIt-Anchor" href="#1-准备"></a> 1. 准备：</h1><blockquote><p>注意安装Docker一定要配置好用户组权限，不然在后续步骤会出现一系列问题</p></blockquote><ul><li>首先安装Docker（记得配置好用户组权限）</li><li>使用docker-easyconnect: <a href="https://github.com/Hagb/docker-easyconnect">https://github.com/Hagb/docker-easyconnect</a></li></ul><h1 id="2-使用方法"><a class="markdownIt-Anchor" href="#2-使用方法"></a> 2. 使用方法：</h1><blockquote><p>如果只需要创建临时容器，可以加上–rm</p><p>退出后可以用<code>docker start -ai &lt;container&gt;</code> 重新启动一下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --device /dev/net/tun --cap-add NET_ADMIN -ti -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 -e EC_VER=7.6.3 -e CLI_OPTS=<span class="hljs-string">&quot;-d vpnaddress -u username -p password&quot;</span> hagb/docker-easyconnect:cli<br></code></pre></td></tr></table></figure><p>如果要连接NK的VPN：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">STUID=&lt;学号&gt;<br>PASSWD=&lt;密码&gt;<br>docker run --name ec --device /dev/net/tun --cap-add NET_ADMIN -ti -p 127.0.0.1:1080:1080 -p 127.0.0.1:8888:8888 -e EC_VER=7.6.3 -e CLI_OPTS=<span class="hljs-string">&quot;-d https://vpn.nankai.edu.cn -u <span class="hljs-variable">$STUID</span> -p <span class="hljs-variable">$PASSWD</span>&quot;</span> hagb/docker-easyconnect:cli<br></code></pre></td></tr></table></figure><h1 id="3-设置代理"><a class="markdownIt-Anchor" href="#3-设置代理"></a> 3. 设置代理：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;127.0.0.1:8888&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;127.0.0.1:8888&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;EasyConnect是知名的流氓软件，如果不了解可以搜索“流氓软件 EasyConnect”，想在Linux下安全使用可以遵循这篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-准备&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    <category term="Ubuntu" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/"/>
    
    
    <category term="南开" scheme="https://www.torch-fan.site/tags/%E5%8D%97%E5%BC%80/"/>
    
  </entry>
  
  <entry>
    <title>Mac 清理垃圾</title>
    <link href="https://www.torch-fan.site/2022/09/29/Mac-%E6%B8%85%E7%90%86%E5%9E%83%E5%9C%BE/"/>
    <id>https://www.torch-fan.site/2022/09/29/Mac-%E6%B8%85%E7%90%86%E5%9E%83%E5%9C%BE/</id>
    <published>2022-09-29T01:12:48.000Z</published>
    <updated>2022-11-15T02:27:36.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-清理日志文件"><a class="markdownIt-Anchor" href="#1-清理日志文件"></a> 1 清理日志文件:</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不是很推荐把log文件夹给删除, 删除内容就行</span><br>sudo <span class="hljs-built_in">rm</span> -rf /private/var/log/*<br>sudo <span class="hljs-built_in">rm</span> -rf /private/var/logs/*<br></code></pre></td></tr></table></figure><h1 id="2-清理临时文件和缓存文件"><a class="markdownIt-Anchor" href="#2-清理临时文件和缓存文件"></a> 2 清理临时文件和缓存文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> -rf /private/var/tmp/*<br><br>sudo <span class="hljs-built_in">rm</span> -rf ~/Library/Caches/*<br></code></pre></td></tr></table></figure><h1 id="3-删除本机的时间机器备份注意-不是指时间机器备份硬盘"><a class="markdownIt-Anchor" href="#3-删除本机的时间机器备份注意-不是指时间机器备份硬盘"></a> 3 删除本机的时间机器备份(注意, 不是指时间机器备份硬盘)</h1><blockquote><p>Mac OS 除了用硬盘搞时间机器备份, 他自己还会搞一份备份</p><p>删除时间机器缓存最节省空间的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本机上所有本地时间机器缓存</span><br>sudo tmutil listlocalsnapshots /<br><br><span class="hljs-comment"># 删除指定的时间机器备份缓存(可以多出很多~, 系统文件大部分都是这些搞的备份)</span><br>tmutil deletelocalsnapshots 2022-09-28-105624<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-清理日志文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-清理日志文件&quot;&gt;&lt;/a&gt; 1 清理日志文件:&lt;/h1&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
    <category term="Mac OS" scheme="https://www.torch-fan.site/tags/Mac-OS/"/>
    
  </entry>
  
  <entry>
    <title>vscode连接虚拟机小贴士</title>
    <link href="https://www.torch-fan.site/2022/09/23/vscode%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    <id>https://www.torch-fan.site/2022/09/23/vscode%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B0%8F%E8%B4%B4%E5%A3%AB/</id>
    <published>2022-09-23T11:09:38.000Z</published>
    <updated>2022-11-15T02:27:36.105Z</updated>
    
    <content type="html"><![CDATA[<p>谈到vscode连接虚拟机, 很多人第一想到桥接模式, 但是对于wifi网卡, 现阶段似乎无法实现,如果对wifi网卡使用桥接, 客户机将没有网络, 还表现为没有路由和ipv4地址, 因此这篇笔记主要是为那些使用笔记本(拥有无线网卡)的同学准备.</p><h1 id="1-准备工作"><a class="markdownIt-Anchor" href="#1-准备工作"></a> 1. 准备工作:</h1><p>创建一个NAT网络的虚拟机.</p><h1 id="2-配置端口映射"><a class="markdownIt-Anchor" href="#2-配置端口映射"></a> 2. 配置端口映射:</h1><p>在NAT模式下, 客户机的IP是不被感知的, 为了能够方便的访问到客户机, 我们进行端口映射(有时也叫NAT映射).</p><p>思路: 我们可以在virtual box中将<code>宿主机的端口</code>映射到<code>客户机的端口</code>:</p><p>假设我们有客户机IP: <code>10.0.2.15</code></p><p><img src="https://s1.ax1x.com/2022/09/23/xkXQaR.jpg" alt="客户机IP" /></p><p>我们设立如下的端口映射:</p><table><thead><tr><th style="text-align:center">Host</th><th style="text-align:center">Guest</th></tr></thead><tbody><tr><td style="text-align:center">127.0.0.1:22</td><td style="text-align:center">10.0.2.15:22</td></tr></tbody></table><blockquote><p>下图中配置的映射是 127.0.0.1:2233 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 10.0.2.15:22, 但是为了方便, 推荐将主机端口换为22, 这样连接时就不用额外的参数,至于端口冲突,最后一节给出解决思路.</p></blockquote><p><img src="https://s1.ax1x.com/2022/09/23/xkX3Px.jpg" alt="端口映射" /></p><h1 id="3-访问客户机"><a class="markdownIt-Anchor" href="#3-访问客户机"></a> 3. 访问客户机:</h1><p>如果我们需要SSH到客户机, 一般想的可能是直接ssh: <code>ssh guest_user@&lt;guest_ip&gt;</code>, 但是NAT情况下IP是不感知的, 因此无法访问, 但是我们做端口映射之后, 就变了, 我们可以通过这种方式访问客户机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh guest_user@127.0.0.1 <span class="hljs-comment"># 事实上, 他是ssh到客户机上, 登陆用户名为guest_user</span><br></code></pre></td></tr></table></figure><p>随后如果想使用vscode, 像往常一样即可.</p><h1 id="4-其他"><a class="markdownIt-Anchor" href="#4-其他"></a> 4. 其他:</h1><p>上文我们讲到, 将本机的22端口映射到客户机的22端口, 但是本机的22端口并不总是空闲的, 为此我们可能将2233端口映射到客户机的22端口, 访问方式就变化了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -p 2233 guest_user@127.0.0.1<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谈到vscode连接虚拟机, 很多人第一想到桥接模式, 但是对于wifi网卡, 现阶段似乎无法实现,如果对wifi网卡使用桥接, 客户机将没有网络, 还表现为没有路由和ipv4地址, 因此这篇笔记主要是为那些使用笔记本(拥有无线网卡)的同学准备.&lt;/p&gt;
&lt;h1 id=&quot;1</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CMU Bomblab(汇编小笔记)</title>
    <link href="https://www.torch-fan.site/2022/09/22/CMU-Bomblab-%E6%B1%87%E7%BC%96%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.torch-fan.site/2022/09/22/CMU-Bomblab-%E6%B1%87%E7%BC%96%E5%B0%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-22T09:59:06.000Z</published>
    <updated>2022-11-15T02:27:36.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考: <a href="https://github.com/CurryTang/bomb_lab_solution">https://github.com/CurryTang/bomb_lab_solution</a></p></blockquote><blockquote><p>以下从x64架构为准</p></blockquote><h1 id="1-相关指令"><a class="markdownIt-Anchor" href="#1-相关指令"></a> 1. 相关指令:</h1><h2 id="11-objdump-用于给出所有汇编指令"><a class="markdownIt-Anchor" href="#11-objdump-用于给出所有汇编指令"></a> 1.1 objdump: 用于给出所有汇编指令</h2><blockquote><p>objdump -d</p><p><code>Display assembler contents of executable sections</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d xxx &gt; xxx.asm<br></code></pre></td></tr></table></figure><h2 id="12-gdb"><a class="markdownIt-Anchor" href="#12-gdb"></a> 1.2 gdb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb &lt;program&gt; <span class="hljs-comment"># 调试程序</span><br>p &lt;var&gt;  <span class="hljs-comment"># 打印变量</span><br>b &lt;func&gt;  <span class="hljs-comment"># 给函数设置端点</span><br>c <span class="hljs-comment"># continue</span><br>n <span class="hljs-comment"># next line, stepping over function calls</span><br>s <span class="hljs-comment"># next line, stepping into funciton calls</span><br>list <span class="hljs-comment"># 展开源程序代码</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">p/c *0x2000@10 <span class="hljs-comment"># 查看内存字符值</span><br>x /25c 0x2000  <span class="hljs-comment"># x本身就是看内存的, 不需要加*</span><br><br>p/x <span class="hljs-variable">$eax</span> <span class="hljs-comment"># 查看寄存器值的8进制形式</span><br><br>x /20a 0x2000<br></code></pre></td></tr></table></figure><p>x 按十六进制格式显示变量。</p><p>d 按十进制格式显示变量。</p><p>u 按十六进制格式显示无符号整型。</p><p>o 按八进制格式显示变量。</p><p>t 按二进制格式显示变量。</p><p>a 按十六进制格式显示变量。</p><p>c 按字符格式显示变量。</p><p>f 按浮点数格式显示变量。</p><p>切换栈帧:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bt</span><br><br><span class="hljs-attribute">f</span><span class="hljs-meta"> [N]</span><br></code></pre></td></tr></table></figure><p>显示所有寄存器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> registers<br></code></pre></td></tr></table></figure><p>看寄存器的值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span> /<span class="hljs-number">16</span>xb $eax+<span class="hljs-number">0</span>x14<br></code></pre></td></tr></table></figure><h2 id="13-strings"><a class="markdownIt-Anchor" href="#13-strings"></a> 1.3 strings</h2><p>如果从汇编中看到某些关键字符, 可以这样获取一整句话:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings bomb | grep keywords<br></code></pre></td></tr></table></figure><h1 id="2-bomblab实验操作"><a class="markdownIt-Anchor" href="#2-bomblab实验操作"></a> 2. Bomblab实验操作</h1><ol><li>开启汇编窗口(好查看对应的汇编代码)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">layout asm<br></code></pre></td></tr></table></figure><ol start="2"><li>打断点</li></ol><p>在进每个阶段前且在readline前打断点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b *0x400e37 <span class="hljs-comment"># 地址\指针前要有 *</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">b phase_1<br>b phase_2<br>b phase_3<br>b phase_4<br>b phase_5<br>b phase_6<br></code></pre></td></tr></table></figure><ol start="3"><li>开始运行,进行调试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">r<br><br><span class="hljs-comment"># 查看某一个地址/函数的汇编 (如果不在运行没法根据地址看汇编, 只能用函数名名字)</span><br>disassem *0x400ee0<br><br>disassem phase_1<br><br>disassem strings_not_equal<br></code></pre></td></tr></table></figure><h1 id="3-看汇编"><a class="markdownIt-Anchor" href="#3-看汇编"></a> 3. 看汇编</h1><p>x86系统中,栈的地址是从高地址往低地址, push栈帧的时候, rsp(<code>stack pointer</code>)减少四个字节.</p><p><img src="https://s1.328888.xyz/2022/09/22/IoR1S.png" alt="寄存器" /></p><h2 id="31-通用寄存器64位寄存器"><a class="markdownIt-Anchor" href="#31-通用寄存器64位寄存器"></a> 3.1 通用寄存器(64位寄存器)</h2><p>0x8(%rsp) 表示上一个变量(一般第一个)</p><blockquote><p>bomb中将string_length的返回值放在EAX中</p></blockquote><p>EAX: accumulator, 加法乘法指令的缺省寄存器<br />EBX: base基地址寄存器,在内存寻址时存放基地址<br />ECX: counter计数器, 重复(REP)前缀指令和LOOP指令的内定计数器<br />EDX: 存放整数除法产生的余数<br />ESI/EDI: source/destination index, 字符串操作指令里, DS:ESI指向源串, ES:EDI指向目标串<br />EBP: base pointer, 高级语言函数调用时的frame pointer保存地方<br />如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push ebp;  // 保存当前ebp<br>mov ebp,esp; // ebp设为当前<br>sub esp,xxx;  // 预留xxx字节给函数临时变量<br></code></pre></td></tr></table></figure><p>ESP: 专门用作堆栈的顶部指针</p><h2 id="32-其他寄存器"><a class="markdownIt-Anchor" href="#32-其他寄存器"></a> 3.2 其他寄存器:</h2><p>R0~R12 是64位工作寄存器, 其中R12有可能被linker修改,所以函数开头经常对R12进行保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">push %r12 <span class="hljs-comment"># 将R12的内容推入堆栈进行保护</span><br></code></pre></td></tr></table></figure><p>当函数参数少于7个时, 从左到右参数依次放入寄存器:</p><ul><li>rdi</li><li>rsi</li><li>rdx</li><li>rcx</li><li>r8</li><li>r9</li></ul><h2 id="33-条件跳转指令和比较指令"><a class="markdownIt-Anchor" href="#33-条件跳转指令和比较指令"></a> 3.3 条件跳转指令和比较指令:</h2><blockquote><p><a href="https://faydoc.tripod.com/cpu/jle.htm">https://faydoc.tripod.com/cpu/jle.htm</a></p></blockquote><p><code>test</code> 指令主要将两个操作数按位与, 并根据结果设置<code>标志寄存器</code> (结果不会写回到目标操作数), <code>test</code>的两个寄存器只有都是空(全0)时或者不同时, ZF才会被置位</p><blockquote><p>注意: addq src, dst -&gt; dst = dst + src, 会将结果写回到目标寄存器上</p></blockquote><p><code>test</code>指令位与运算结果为0的话, ZF(Zero Flag)设为0.</p><p><code>je</code> 是jz(jump if zero)的别称.<br /><code>jne</code>就是反过来的条件跳转指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cmp</span> eax, edx<br>ja somewhere ; <span class="hljs-attribute">will</span> go <span class="hljs-string">&quot;somewhere&quot;</span> if eax &gt;u edx<br>             ; <span class="hljs-attribute">where</span> &gt;u is <span class="hljs-string">&quot;unsigned greater than&quot;</span><br><br>cmp eax, edx<br>jg somewhere ; <span class="hljs-attribute">will</span> go <span class="hljs-string">&quot;somewhere&quot;</span> if eax &gt;s edx<br>             ; <span class="hljs-attribute">where</span> &gt;s is <span class="hljs-string">&quot;signed greater than&quot;</span><br></code></pre></td></tr></table></figure><p><code>cmpb</code>: 判断是否相等, 然后置ZF为1:</p><p><code>cmpl</code>:<br />For &gt;, there is ja for unsigned and jg for signed (jump if above and jump if greater).</p><pre><code class="hljs">For &lt;, there is jb for unsigned and jl for signed (jump if below and jump if less).</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmpb <span class="hljs-variable">$0x0</span>, (%edx)<br></code></pre></td></tr></table></figure><p><code>(%edx)</code> 表示 %edx中所保存的地址指向单元的内容(即取指针所指内容)</p><h2 id="34-寄存器操作"><a class="markdownIt-Anchor" href="#34-寄存器操作"></a> 3.4 寄存器操作:</h2><blockquote><p><a href="https://stackoverflow.com/questions/19748074/meaning-of-0x8rsp">https://stackoverflow.com/questions/19748074/meaning-of-0x8rsp</a></p></blockquote><p><code>0x8(%rsp)</code> means &quot;get the location on the stack that is 8 bytes away from the stack pointer %rsp</p><p><code>lea</code>: 和mov很像, 不过有其他作用</p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他:</h1><p>因为不同同学的bomb内容不同, 我帮的一位同学比网上的版本要稍微复杂一些,共计19小时,bingo~</p><p>这篇笔记只是零星随笔, 帮助自己回忆汇编, 日后有机会会综合整理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://github.com/CurryTang/bomb_lab_solution&quot;&gt;https://github.com/CurryTang/bomb_lab_solution&lt;/a&gt;&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    <category term="汇编" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/%E6%B1%87%E7%BC%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Generate 204链接收集</title>
    <link href="https://www.torch-fan.site/2022/09/04/Generate-204%E9%93%BE%E6%8E%A5%E6%94%B6%E9%9B%86/"/>
    <id>https://www.torch-fan.site/2022/09/04/Generate-204%E9%93%BE%E6%8E%A5%E6%94%B6%E9%9B%86/</id>
    <published>2022-09-04T04:39:15.000Z</published>
    <updated>2022-11-15T02:27:36.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意, 这些链接都可以用https替代, 但是并不推荐.</p></blockquote><ul><li><a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204</a></li><li><a href="http://cp.cloudflare.com/generate_204">http://cp.cloudflare.com/generate_204</a></li><li><a href="http://www.qualcomm.cn/generate_204">http://www.qualcomm.cn/generate_204</a></li><li><a href="http://clients3.google.com/generate_204">http://clients3.google.com/generate_204</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注意, 这些链接都可以用https替代, 但是并不推荐.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gstatic.com/generate_204&quot;&gt;http://www.gstatic.com</summary>
      
    
    
    
    <category term="收藏" scheme="https://www.torch-fan.site/categories/%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>dbs结项报告</title>
    <link href="https://www.torch-fan.site/2022/09/03/dbs%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.torch-fan.site/2022/09/03/dbs%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/</id>
    <published>2022-09-03T08:24:39.000Z</published>
    <updated>2022-11-15T02:27:36.104Z</updated>
    
    <content type="html"><![CDATA[<center>    <font size="10"><bold>使用命令行参数启动微型虚拟机</bold></font>    <br/><br/></center><h1 id="1-项目实现方案研究"><a class="markdownIt-Anchor" href="#1-项目实现方案研究"></a> 1. 📽 项目实现方案研究:</h1><blockquote><p>实现方案给出是为了提供<font color="cyan">可复现性</font></p></blockquote><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>处理器</td><td>AMD® Ryzen 7 4800h with radeon graphics × 16</td></tr><tr><td>内存</td><td>32g</td></tr><tr><td>显卡</td><td>NVIDIA Corporation TU117M [GeForce GTX 1650 Ti Mobile] / NVIDIA GeForce GTX 1650 Ti/PCIe/SSE2</td></tr><tr><td>OS</td><td>Ubuntu 22.04 LTS</td></tr><tr><td>rustc版本</td><td>rustc 1.62.1</td></tr></tbody></table><h2 id="11-参考目标-firecracker"><a class="markdownIt-Anchor" href="#11-参考目标-firecracker"></a> 1.1 🎲 参考目标: <a href="https://github.com/firecracker-microvm/firecracker">firecracker</a></h2><h3 id="111-构建firecracker"><a class="markdownIt-Anchor" href="#111-构建firecracker"></a> 1.1.1 构建<code>firecracker</code></h3><blockquote><p>cargo的使用文档: <a href="https://doc.rust-lang.org/cargo/index.html">https://doc.rust-lang.org/cargo/index.html</a></p><p>如果需要编译其他平台的crate, 可能还需要用rustup添加对应的toolchain, rustup的使用文档: <a href="https://rust-lang.github.io/rustup/index.html">https://rust-lang.github.io/rustup/index.html</a></p></blockquote><ol><li>拉取源码:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/firecracker-microvm/firecracker<br><span class="hljs-built_in">cd</span> firecracker<br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置依赖</p><blockquote><p>构建firecraker依赖于<code>Docker</code>, 我的个人博客上docker的安装笔记可供参考: <a href="https://www.torch-fan.site/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/">Ubuntu上使用Docker</a></p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential clang<br>cargo check <br></code></pre></td></tr></table></figure><ol start="3"><li>构建firecracker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tools/devtool build<br><br><span class="hljs-comment"># release</span><br>tools/devtool build --release<br></code></pre></td></tr></table></figure><h3 id="112-使用firecracker创建虚拟机"><a class="markdownIt-Anchor" href="#112-使用firecracker创建虚拟机"></a> 1.1.2 使用<code>firecracker</code>创建虚拟机</h3><blockquote><p>参考资料: <a href="https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md">https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md</a></p></blockquote><blockquote><p>事实上, 报告的最终目的目的并不在于描述构建firecraker或者使用dbs之类的方式, 而是借助对firecraker的了解来辅助使用命令行参数从<code>DBS</code>中启动一个虚拟机, 因此文档叙述不以线性进行, 将进行跳转, 体现思考的过程.</p></blockquote><p>​使用firecracker创建虚拟机, 需要这些内容:</p><ol><li><code>API socket</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./firecracker --api-sock /tmp/firecracker.socket<br></code></pre></td></tr></table></figure><ol start="2"><li><p><code>Linux kernel</code></p></li><li><p><code>rootfs</code></p></li></ol><p>​因此当我们开始了解<code>DBS</code>时, 需要关注<code>DBS</code>已经具备和不具备的要素,</p><h2 id="12-更进一步"><a class="markdownIt-Anchor" href="#12-更进一步"></a> 1.2 🦌 更进一步</h2><blockquote><p>上面的步骤不存在任何困难, 但我们并不关心是否创建好虚拟机, 而关注在firecracker一开始是如何创建一个虚拟机</p></blockquote><h3 id="121-vmm的对外接口"><a class="markdownIt-Anchor" href="#121-vmm的对外接口"></a> 1.2.1 VMM的对外接口</h3><blockquote><p>定位到<code>src/firecracker/src/main.rs</code>, 关注在<code>api-sock</code>命令行参数</p></blockquote><p>firecracker对虚拟机进行配置主要分为<font color="cyan"><strong>两种形式</strong></font>:</p><ol><li>HTTP API的请求方式进行配置(也可以同时指定配置文件)</li><li>通过指定配置文件的方式进行配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">rootfs_path=$(<span class="hljs-built_in">pwd</span>)<span class="hljs-string">&quot;/hello-rootfs.ext4&quot;</span><br>curl --unix-socket /tmp/firecracker.socket -i \<br>  -X PUT <span class="hljs-string">&#x27;http://localhost/drives/rootfs&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: application/json&#x27;</span>           \<br>  -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>     \<br>  -d <span class="hljs-string">&quot;&#123;</span><br><span class="hljs-string">        \&quot;drive_id\&quot;: \&quot;rootfs\&quot;,</span><br><span class="hljs-string">        \&quot;path_on_host\&quot;: \&quot;<span class="hljs-variable">$&#123;rootfs_path&#125;</span>\&quot;,</span><br><span class="hljs-string">        \&quot;is_root_device\&quot;: true,</span><br><span class="hljs-string">        \&quot;is_read_only\&quot;: false</span><br><span class="hljs-string">   &#125;&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不使用API进行配置, 传入配置文件</span><br>./firecracker --api-sock /tmp/firecracker.socket --config-file &lt;path_to_the_configuration_file&gt;<br></code></pre></td></tr></table></figure><blockquote><p>对于DBS而言, 项目最初目标是通过命令行参数进行启动, 而不需要kata的环境, 因此我们可以关注在使用配置文件创建虚拟机的代码逻辑部分, 因此可以关注函数<code>run_without_api</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>  <code>VmResources::from_json</code></p></blockquote><h3 id="122-rootfs和linux-kernel的使用方式"><a class="markdownIt-Anchor" href="#122-rootfs和linux-kernel的使用方式"></a> 1.2.2 rootfs和Linux kernel的使用方式</h3><blockquote><p>要了解rootfs和Linux kernel如何被使用了, 需要从<code>main.rs</code>的<code>run_without_api</code>中, 深入到<code>build_microvm_from_json</code></p></blockquote><ul><li>kernel被以<code>VmmConfig::block_devices</code>的形式传入</li><li>rootfs作为<code>VmmConfig::block_devices</code>配置的一部分进行传入</li><li>至于启动虚拟机等命令, 则可以HTTP API形式, 传递给<code>api_server/src/lib.rs</code>, 接受请求<code>/actions</code>的参数, 并启动配置好的虚拟机</li></ul><blockquote><p>至此, 我们可以带着疑问, 边开始实现我们的项目需求, 边浏览了解firecracker是如何实现的.</p></blockquote><h1 id="2-阶段一-创建命令行前端接口"><a class="markdownIt-Anchor" href="#2-阶段一-创建命令行前端接口"></a> 2. 🔨 阶段一: 创建命令行前端接口</h1><blockquote><p>由于rust编程经验不多, 因此尽可能使用第三方库, 在命令行解析上, 选用<a href="https://github.com/clap-rs/clap">clap</a> (Dual-licensed under <code>Apache 2.0</code> or <code>MIT</code>, 对于DBS而言, 正好可以用<code>Apache 2.0</code>)</p><p><code>clap</code>的使用文档: <a href="https://docs.rs/clap/latest/clap/">https://docs.rs/clap/latest/clap/</a></p></blockquote><h2 id="21-命令行配置项"><a class="markdownIt-Anchor" href="#21-命令行配置项"></a> 2.1 🍨 命令行配置项</h2><blockquote><p>从<a href="https://github.com/kata-containers/kata-containers/tree/runtime-rs">kata-containers</a>的<code>runtime-rs</code>分支中, 可以在<code>dragonball::vm::VmConfigInfo</code>中看到DBS使用的虚拟机配置.</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CpuTopology</span> &#123;<br>    <span class="hljs-comment">/// threads per core to indicate hyperthreading is enabled or not</span><br>    <span class="hljs-keyword">pub</span> threads_per_core: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// cores per die to guide guest cpu topology init</span><br>    <span class="hljs-keyword">pub</span> cores_per_die: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// dies per socket to guide guest cpu topology</span><br>    <span class="hljs-keyword">pub</span> dies_per_socket: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// number of sockets</span><br>    <span class="hljs-keyword">pub</span> sockets: <span class="hljs-type">u8</span>,<br>&#125;<br><br><span class="hljs-meta">#[derive(Clone, Debug, PartialEq)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VmConfigInfo</span> &#123;<br>    <span class="hljs-comment">/// Number of vcpu to start.</span><br>    <span class="hljs-keyword">pub</span> vcpu_count: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// Max number of vcpu can be added</span><br>    <span class="hljs-keyword">pub</span> max_vcpu_count: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// cpu power management.</span><br>    <span class="hljs-keyword">pub</span> cpu_pm: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// cpu topology information</span><br>    <span class="hljs-keyword">pub</span> cpu_topology: CpuTopology,<br>    <span class="hljs-comment">/// vpmu support level</span><br>    <span class="hljs-keyword">pub</span> vpmu_feature: <span class="hljs-type">u8</span>,<br><br>    <span class="hljs-comment">/// Memory type that can be either hugetlbfs or shmem, default is shmem</span><br>    <span class="hljs-keyword">pub</span> mem_type: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// Memory file path</span><br>    <span class="hljs-keyword">pub</span> mem_file_path: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// The memory size in MiB.</span><br>    <span class="hljs-keyword">pub</span> mem_size_mib: <span class="hljs-type">usize</span>,<br><br>    <span class="hljs-comment">/// sock path</span><br>    <span class="hljs-keyword">pub</span> serial_path: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">String</span>&gt;,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>clap</code>定义命令行参数后，具体内容如下:</p><table><thead><tr><th style="text-align:center">arguments</th><th style="text-align:center">required</th><th style="text-align:center">default value</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center"><code>rootfs</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path to rootfs image.</td></tr><tr><td style="text-align:center"><code>kernel-path</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path of kernel image (Only uncompressed kernel is supported for Dragonball).</td></tr><tr><td style="text-align:center"><code>log-file</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;dbs-cli.log&quot;</code></td><td style="text-align:center">The path to log file</td></tr><tr><td style="text-align:center"><code>log-level</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;Info&quot;</code></td><td style="text-align:center">The logging level.</td></tr><tr><td style="text-align:center"><code>boot-args</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1</code></td><td style="text-align:center">The boot arguments passed to the kernel.</td></tr><tr><td style="text-align:center"><code>is-root</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>true</code></td><td style="text-align:center">Decide the device to be the root boot device or not.</td></tr><tr><td style="text-align:center"><code>is-read-only</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">The driver opened in read-only or not.</td></tr><tr><td style="text-align:center"><code>vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of vcpu to start.</td></tr><tr><td style="text-align:center"><code>max-vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The max number of vpu can be added.</td></tr><tr><td style="text-align:center"><code>cpu-pm</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>0</code></td><td style="text-align:center">vpmu support level.</td></tr><tr><td style="text-align:center"><code>threads-per-core</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Threads per core to indicate hyper-threading is enabled or not.</td></tr><tr><td style="text-align:center"><code>cores-per-die</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Cores per die to guide guest cpu topology init.</td></tr><tr><td style="text-align:center"><code>dies-per-socket</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Dies per socket to guide guest cpu topology.</td></tr><tr><td style="text-align:center"><code>sockets</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of sockets.</td></tr><tr><td style="text-align:center"><code>mem-type</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>shmem</code></td><td style="text-align:center">Memory type that can be either hugetlbfs or shmem.</td></tr><tr><td style="text-align:center"><code>mem-file</code></td><td style="text-align:center">false</td><td style="text-align:center">``</td><td style="text-align:center">Memory file path.</td></tr><tr><td style="text-align:center"><code>initrd-path</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>None</code></td><td style="text-align:center">The path of initrd.</td></tr></tbody></table><h2 id="22-参数相关的注意事项"><a class="markdownIt-Anchor" href="#22-参数相关的注意事项"></a> 2.2 参数相关的注意事项:</h2><p>整个命令行参数最为关键的三个参数是<code>rootfs</code>, <code>kernel-path</code> 和 <code>boot-args</code>. 由于从命令行终端进入vm的console采用的方式是将ttySx的输出重定向到当前终端的stdout, 因此需要确保kernel支持serial console并且rootfs在构建时需要配置好启动之后能够启动对应终端, 否则将无法进入vm. 对于<code>boot-args</code>, <code>console=xx</code>和<code>root=&quot;dev/vda1&quot;</code> 是根据对应rootfs的设置来的, 因此虽然不是必须给出的参数, 但是需要自行查看是否需要有所修改。</p><h1 id="3-阶段二-项目实现思路及问题解决"><a class="markdownIt-Anchor" href="#3-阶段二-项目实现思路及问题解决"></a> 3. 🔥 阶段二： 项目实现思路及问题解决</h1><h2 id="31-命令行参数"><a class="markdownIt-Anchor" href="#31-命令行参数"></a> 3.1 命令行参数：</h2><p>​根据firecraker和kata-container现有代码，确定启动虚拟机必备参数后，便可直接用<code>clap</code>提供的一些<code>derive</code>来定义命令行参数，参数项见上表，暂无问题出现。</p><h2 id="32-进入vm终端"><a class="markdownIt-Anchor" href="#32-进入vm终端"></a> 3.2 进入vm终端：</h2><p>​基于现有kata-container的一些创建vm、启动vm、创建设备等API，只需进行简单的修改调用即可完成。但是最后在IO上出现问题，具体可以描述为创建vm的标准输入输出终端时，<code>com1</code>未将输出重定向到stdout，导致无法与vm进行交互。</p><p>​解决方法，为<code>com1</code>设置输出流并重定向到<code>stdout</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">device.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">set_output_stream</span>(<span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(std::io::<span class="hljs-title function_ invoke__">stdout</span>())));<br></code></pre></td></tr></table></figure><h2 id="33-基本原理-serial-console"><a class="markdownIt-Anchor" href="#33-基本原理-serial-console"></a> 3.3 基本原理： <code>serial console</code></h2><ul><li><a href="https://www.kernel.org/doc/html/latest/admin-guide/serial-console.html">Linux Serial Console — The Linux Kernel documentation</a></li><li><a href="https://tldp.org/HOWTO/Serial-HOWTO-10.html">Serial HOWTO: Serial Port Devices /dev/ttyS2, etc. (tldp.org)</a></li></ul><blockquote><p>下图为串口对应终端名以及IO地址</p></blockquote><p><img src="https://s1.ax1x.com/2022/08/29/vfSKR1.png" alt="" /></p><p><code>kata-container</code>在<code>runtime-rs</code>分支下，com2被用来输出日志信息（同时也将dmesg也写入logger了），因此只能使用设备com1连接到对应的终端。</p><blockquote><p><code>console=device,options</code> 用来指定终端的输出，该参数放在kernel的启动参数中。</p><p><code>device</code>可能的值为：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">tty0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> foreground virtual console<br>                ttyX <span class="hljs-keyword">for</span> <span class="hljs-keyword">any</span> other virtual console<br>                ttySx <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> serial port<br>                lp0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> parallel port<br>                ttyUSB0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> USB serial device<br></code></pre></td></tr></table></figure></blockquote><p>在<code>kata-container</code>仓库<code>runtime-rs</code>分支的现有代码下，已经有通过socket进入serial console的代码，但是从命令行将stdio重定向到虚拟机serial console的代码却不能达到正常预期。在通过反复浏览代码，通过<code>3.2</code>中的修改，解决了无法创建stdio console的问题，再加上此前实现的命令行参数解析，整个流程就已经完成了。</p><h1 id="4-项目成果展示"><a class="markdownIt-Anchor" href="#4-项目成果展示"></a> 4. 项目成果展示：</h1><h2 id="41-本地开发仓库"><a class="markdownIt-Anchor" href="#41-本地开发仓库"></a> 4.1 本地开发仓库：</h2><p>仓库地址： <a href="https://github.com/QiliangFan/kata-containers">https://github.com/QiliangFan/kata-containers</a></p><p>分支：<code>runtime-rs</code></p><h2 id="42-pull-request"><a class="markdownIt-Anchor" href="#42-pull-request"></a> 4.2  pull request:</h2><ul><li><p><a href="https://github.com/openanolis/dbs-cli/pull/1">Create VM from command line arguments #1</a></p></li><li><p><a href="https://github.com/kata-containers/kata-containers/pull/5082">dragonball: Fix problem that stdio console cannot connect to stdout #5082</a></p></li></ul><h2 id="43-运行示例与结果截图"><a class="markdownIt-Anchor" href="#43-运行示例与结果截图"></a> 4.3 运行示例与结果截图:</h2><blockquote><p>为了结果易于复现，使用了firecraker项目的kernel和rootfs(方便用户下载， 当然其他支持serial console的内核和rootfs也可以)，如需运行此CLI，可前往<a href="https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md">firecracker/getting-started.md at main · firecracker-microvm/firecracker (github.com)</a>下载并使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli --kernel-path ~/data/build/dbs/firecracker/vmlinux.bin --rootfs ~/data/build/dbs/firecracker/bionic.rootfs.ext4 --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/08/27/vRc536.png" alt="进入vm" /></p><p><img src="https://s1.ax1x.com/2022/08/27/vRczgf.png" alt="输入指令" /></p><h2 id="44-可通过命令行配置的参数"><a class="markdownIt-Anchor" href="#44-可通过命令行配置的参数"></a> 4.4 可通过命令行配置的参数：</h2><table><thead><tr><th style="text-align:center">arguments</th><th style="text-align:center">required</th><th style="text-align:center">default value</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center"><code>rootfs</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path to rootfs image.</td></tr><tr><td style="text-align:center"><code>kernel-path</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path of kernel image (Only uncompressed kernel is supported for Dragonball).</td></tr><tr><td style="text-align:center"><code>log-file</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;dbs-cli.log&quot;</code></td><td style="text-align:center">The path to log file</td></tr><tr><td style="text-align:center"><code>log-level</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;Info&quot;</code></td><td style="text-align:center">The logging level.</td></tr><tr><td style="text-align:center"><code>boot-args</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1</code></td><td style="text-align:center">The boot arguments passed to the kernel.</td></tr><tr><td style="text-align:center"><code>is-root</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>true</code></td><td style="text-align:center">Decide the device to be the root boot device or not.</td></tr><tr><td style="text-align:center"><code>is-read-only</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">The driver opened in read-only or not.</td></tr><tr><td style="text-align:center"><code>vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of vcpu to start.</td></tr><tr><td style="text-align:center"><code>max-vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The max number of vpu can be added.</td></tr><tr><td style="text-align:center"><code>cpu-pm</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>0</code></td><td style="text-align:center">vpmu support level.</td></tr><tr><td style="text-align:center"><code>threads-per-core</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Threads per core to indicate hyper-threading is enabled or not.</td></tr><tr><td style="text-align:center"><code>cores-per-die</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Cores per die to guide guest cpu topology init.</td></tr><tr><td style="text-align:center"><code>dies-per-socket</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Dies per socket to guide guest cpu topology.</td></tr><tr><td style="text-align:center"><code>sockets</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of sockets.</td></tr><tr><td style="text-align:center"><code>mem-type</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>shmem</code></td><td style="text-align:center">Memory type that can be either hugetlbfs or shmem.</td></tr><tr><td style="text-align:center"><code>mem-file</code></td><td style="text-align:center">false</td><td style="text-align:center">``</td><td style="text-align:center">Memory file path.</td></tr><tr><td style="text-align:center"><code>initrd-path</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>None</code></td><td style="text-align:center">The path of initrd.</td></tr></tbody></table><h2 id="45-使用示例"><a class="markdownIt-Anchor" href="#45-使用示例"></a> 4.5 使用示例:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/rootfs.dmg \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure><p>For the rootfs from firecracker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/bionic.rootfs.ext4 \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda&quot;</span> ;<br></code></pre></td></tr></table></figure><p>For the rootfs build from kata:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/kata-containers.img \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure><p>Set the log level and log file:</p><blockquote><p>The log-level argument is case-insensitive: ErrOR and InFO are valid.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --log-file dbs-cli.log --log-level ERROR \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/kata-containers.img \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;
    &lt;font size=&quot;10&quot;&gt;&lt;bold&gt;使用命令行参数启动微型虚拟机&lt;/bold&gt;&lt;/font&gt;
    &lt;br/&gt;&lt;br/&gt;
&lt;/center&gt;
&lt;h1 id=&quot;1-项目实现方案研究&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    
    <category term="报告" scheme="https://www.torch-fan.site/tags/%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>Linux个人使用指令收集</title>
    <link href="https://www.torch-fan.site/2022/08/24/Linux%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <id>https://www.torch-fan.site/2022/08/24/Linux%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/</id>
    <published>2022-08-24T12:02:52.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-socketserial"><a class="markdownIt-Anchor" href="#1-socketserial"></a> 1. Socket/Serial</h1><blockquote><p>登陆绑定在socket上的console</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># console.sock 改为对应的socket地址</span><br>socat <span class="hljs-string">&quot;stdin,raw,echo=0,escape=0x11&quot;</span> <span class="hljs-string">&quot;unix-connect:[console.sock]&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-socketserial&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-socketserial&quot;&gt;&lt;/a&gt; 1. Socket/Serial&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;登陆绑定在socket上的console&lt;</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>matplotlib的常用设置</title>
    <link href="https://www.torch-fan.site/2022/08/23/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>https://www.torch-fan.site/2022/08/23/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-08-23T01:22:52.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-backend"><a class="markdownIt-Anchor" href="#1-backend"></a> 1. backend</h1><blockquote><p>有时保存的图片不只是png, 可能还需要pdf, 因此设置可以设置好backedn</p><p>参考资料: <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=backend">https://matplotlib.org/stable/api/matplotlib_configuration_api.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">matplotlib.use(&quot;pdf&quot;);<br></code></pre></td></tr></table></figure><ul><li>interactive backends: GTK3Agg, GTK3Cairo, GTK4Agg, GTK4Cairo, MacOSX, nbAgg, QtAgg, QtCairo, TkAgg, TkCairo, WebAgg, WX, WXAgg, WXCairo, Qt5Agg, Qt5Cairo</li><li>non-interactive backends: agg, cairo, pdf, pgf, ps, svg, template</li></ul><h1 id="2-rcparams"><a class="markdownIt-Anchor" href="#2-rcparams"></a> 2. rcParams</h1><blockquote><p>可设置的属性列表: <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams#matplotlib.rcParams">https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams#matplotlib.rcParams</a></p></blockquote><h2 id="21-dpi-涉及清晰度"><a class="markdownIt-Anchor" href="#21-dpi-涉及清晰度"></a> 2.1 DPI (涉及清晰度)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;figure.dpi&#x27;</span>] = <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h2 id="22-字体"><a class="markdownIt-Anchor" href="#22-字体"></a> 2.2 字体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams.update(&#123;<br>    <span class="hljs-string">&quot;font.size&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&#x27;font.sans-serif&#x27;</span>: <span class="hljs-string">&quot;simsun&quot;</span>  <span class="hljs-comment"># SimHei</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="221-ubuntu支持中文"><a class="markdownIt-Anchor" href="#221-ubuntu支持中文"></a> 2.2.1 ubuntu支持中文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看matplotlib配置文件位置</span><br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-built_in">print</span>(matplotlib.matplotlib_fname())<br><span class="hljs-comment"># 如: /APP/anaconda/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入字体库</span><br><span class="hljs-built_in">cd</span> ~/APP/anaconda/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf<br><br><span class="hljs-comment"># 清除缓存</span><br><span class="hljs-built_in">rm</span> ~/.cache/matplotlib<br><br><span class="hljs-comment"># 将simsun.ttf复制到该目录下即可</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-backend&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-backend&quot;&gt;&lt;/a&gt; 1. backend&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有时保存的图片不只是png, 可能还需要pdf, 因此设置可以设置好bac</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Python" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Matplotlib/"/>
    
    
  </entry>
  
  <entry>
    <title>kernel和rootfs镜像构建</title>
    <link href="https://www.torch-fan.site/2022/08/15/kernel%E5%92%8Crootfs%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://www.torch-fan.site/2022/08/15/kernel%E5%92%8Crootfs%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2022-08-15T10:58:57.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建rootfs"><a class="markdownIt-Anchor" href="#1-创建rootfs"></a> 1. 创建rootfs:</h1><p>在Linux上自带<code>mkfs</code>指令, 用于创建文件系统.</p><p><img src="https://s1.ax1x.com/2022/08/15/vdcuFA.png" alt="mkfs" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个容量为512MB的根文件系统</span><br>mkfs -t ext4 rootfs.ext4 512M<br></code></pre></td></tr></table></figure><h1 id="2-构建vmlinux-elf文件-内核编译最原始的文件-可被rust的linux-loader加载"><a class="markdownIt-Anchor" href="#2-构建vmlinux-elf文件-内核编译最原始的文件-可被rust的linux-loader加载"></a> 2. 构建vmlinux (ELF文件, 内核编译最原始的文件, 可被rust的<code>linux-loader</code>加载)</h1><blockquote><p>参考文档: <a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel">https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel</a></p></blockquote><h2 id="21-下载内核源码"><a class="markdownIt-Anchor" href="#21-下载内核源码"></a> 2.1 下载内核源码:</h2><p>源码仓库: <a href="https://www.kernel.org/">https://www.kernel.org/</a></p><h2 id="22-安装依赖"><a class="markdownIt-Anchor" href="#22-安装依赖"></a> 2.2 安装依赖:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf git<br></code></pre></td></tr></table></figure><h2 id="23-配置内核"><a class="markdownIt-Anchor" href="#23-配置内核"></a> 2.3 配置内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># optional: 复制本机的配置</span><br><span class="hljs-built_in">cp</span> -v /boot/config-$(<span class="hljs-built_in">uname</span> -r) .config<br><br><span class="hljs-built_in">chmod</span> +x ./scripts/*<br>make menuconfig<br></code></pre></td></tr></table></figure><p>从内核源码根目录的makefile中, 可以看到默认就是vmlinux, 暂时也不需要去考虑vmlinuz的压缩问题.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># The all: target is the default when no target is given on the</span><br><span class="hljs-comment"># command line.</span><br><span class="hljs-comment"># This allow a user to issue only &#x27;make&#x27; to build a kernel including modules</span><br><span class="hljs-comment"># Defaults to vmlinux, but the arch makefile usually adds further targets</span><br><span class="hljs-section">all: vmlinux</span><br></code></pre></td></tr></table></figure><p>构建内核</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-创建rootfs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-创建rootfs&quot;&gt;&lt;/a&gt; 1. 创建rootfs:&lt;/h1&gt;
&lt;p&gt;在Linux上自带&lt;code&gt;mkfs&lt;/code&gt;指令, 用于创建文件系统.&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://www.torch-fan.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust错误处理</title>
    <link href="https://www.torch-fan.site/2022/08/02/Rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://www.torch-fan.site/2022/08/02/Rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2022-08-02T12:49:12.000Z</published>
    <updated>2022-11-15T02:27:36.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里不复述文档和教程中有的内容, 比如<code>Result</code>之类的细节, 可以自行看文档内容:</p><ul><li><p><a href="https://learning-rust.github.io/docs/e7.custom_error_types.html">https://learning-rust.github.io/docs/e7.custom_error_types.html</a></p></li><li><p><a href="https://doc.rust-lang.org/book/ch09-00-error-handling.html">https://doc.rust-lang.org/book/ch09-00-error-handling.html</a></p></li></ul><p>参考资料: <a href="https://www.philipdaniels.com/blog/2019/defining-rust-error-types/">https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</a></p></blockquote><h1 id="1-rust中自定义error的方式"><a class="markdownIt-Anchor" href="#1-rust中自定义error的方式"></a> 1. Rust中自定义Error的方式</h1><h2 id="11-定义一个错误类型"><a class="markdownIt-Anchor" href="#11-定义一个错误类型"></a> 1.1 定义一个错误类型:</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyErorType</span> &#123;<br>    <span class="hljs-comment">// Errors from external libraries..</span><br>    <span class="hljs-title function_ invoke__">Io</span>(io::Error),<br>    <span class="hljs-title function_ invoke__">Git</span>(git2::Error),<br>    <span class="hljs-comment">// Errors raised by us...</span><br>    <span class="hljs-title function_ invoke__">Regular</span>(ErrorKind),<br>    <span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-type">String</span>)<br>&#125;<br><br><span class="hljs-meta">#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ErrorKind</span> &#123;<br>    NotFound,<br>    NotAuthorized,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ErrorKind</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">as_str</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            ErrorKind::NotFound =&gt; <span class="hljs-string">&quot;not found&quot;</span>,<br>            ErrorKind::NotAuthorized =&gt; <span class="hljs-string">&quot;not authorized&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-实现error和display这两个trait"><a class="markdownIt-Anchor" href="#12-实现error和display这两个trait"></a> 1.2 实现<code>Error</code>和<code>Display</code>这两个trait</h2><blockquote><p><code>Error</code>只允许返回静态字符串常量</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Error</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">description</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">description</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">description</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">as_str</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-keyword">ref</span> err) =&gt; err,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>fmt::Display</code>更为灵活一点</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmt</span>(&amp;<span class="hljs-keyword">self</span>, f: &amp;<span class="hljs-keyword">mut</span> fmt::Formatter) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">fmt</span>(f),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">fmt</span>(f),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(<span class="hljs-keyword">ref</span> err) =&gt; <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;A regular error occurred &#123;:?&#125;&quot;</span>, err),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-keyword">ref</span> err) =&gt; <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;A custom error occurred &#123;:?&#125;&quot;</span>, err),<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-为external-error-type实现from"><a class="markdownIt-Anchor" href="#13-为external-error-type实现from"></a> 1.3 为external error type实现<code>From</code></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(err: io::Error) <span class="hljs-punctuation">-&gt;</span> MyErrorType &#123;<br>        MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(err)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(err: git2::Error) <span class="hljs-punctuation">-&gt;</span> MyErrorType &#123;<br>        MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用起来就可以这样, 在捕获异常的代码片段中:</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">MyErrorType::<span class="hljs-title function_ invoke__">From</span>(err)<br></code></pre></td></tr></table></figure><h2 id="14-可选-创建一个result别名"><a class="markdownIt-Anchor" href="#14-可选-创建一个result别名"></a> 1.4 可选: 创建一个Result别名</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Result</span>&lt;T&gt; = std::result::<span class="hljs-type">Result</span>&lt;T, MyErrorType&gt;;<br></code></pre></td></tr></table></figure><h2 id="15-使用自定义的类型"><a class="markdownIt-Anchor" href="#15-使用自定义的类型"></a> 1.5 使用自定义的类型:</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">some_func</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">usize</span>&gt; &#123;<br>    <span class="hljs-comment">// possible: std::io::Error</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_f</span> = std::fs::File::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-string">&quot;aa&quot;</span>)?;<br>    <span class="hljs-comment">// possible: git2::Error</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_g</span> = Respository::<span class="hljs-title function_ invoke__">init</span>(<span class="hljs-string">&quot;/path/to/repo&quot;</span>)?;<br><br>    <span class="hljs-comment">// return a error</span><br>    <span class="hljs-title function_ invoke__">Err</span>(MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(ErrorKind::NotAuthorized));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-rust-中使用-thiserror-和-anyhow-简洁-好用"><a class="markdownIt-Anchor" href="#2-rust-中使用-thiserror-和-anyhow-简洁-好用"></a> 2. Rust 中使用 <code>thiserror</code> 和 <code>anyhow</code> (简洁, 好用)</h1><blockquote><p><code>thiserror</code>文档: <a href="https://docs.rs/thiserror/latest/thiserror/">https://docs.rs/thiserror/latest/thiserror/</a></p><p><code>anyhow</code>文档: <a href="https://github.com/dtolnay/anyhow">https://github.com/dtolnay/anyhow</a></p><p>这两个库主要还是为了某些库里处理数量众多的异常类型, 可以解决兼容, 但还需要额外处理</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> anyhow::<span class="hljs-type">Result</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;()&gt; &#123;  <span class="hljs-comment">// ~~接收任意类型异常~~</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-错误类型映射"><a class="markdownIt-Anchor" href="#3-错误类型映射"></a> 3. 错误类型映射</h1><blockquote><p>前面所作的努力只是为了兼容, 但是rust并不会主动去做, 转换工作还是得自己来</p></blockquote><h2 id="31-map_err"><a class="markdownIt-Anchor" href="#31-map_err"></a> 3.1 <code>map_err</code></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::env;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">double_arg</span>(<span class="hljs-keyword">mut</span> argv: env::Args) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, <span class="hljs-type">String</span>&gt; &#123;<br>    argv.<span class="hljs-title function_ invoke__">nth</span>(<span class="hljs-number">1</span>)<br>        .<span class="hljs-title function_ invoke__">ok_or</span>(<span class="hljs-string">&quot;Please give at least one argument&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>())<br>        .<span class="hljs-title function_ invoke__">and_then</span>(|arg| arg.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map_err</span>(|err| err.<span class="hljs-title function_ invoke__">to_string</span>()))<br>        .<span class="hljs-title function_ invoke__">map</span>(|n| <span class="hljs-number">2</span> * n)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">match</span> <span class="hljs-title function_ invoke__">double_arg</span>(env::<span class="hljs-title function_ invoke__">args</span>()) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(err) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, err),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 这里是用构造函数做lambda函数了</span><br>cmdline.<span class="hljs-title function_ invoke__">insert_str</span>(boot_args)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(BootSourceConfigError::InvalidKernelCommandLine)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(VmmActionError::BootSource)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(CLIError::BootSource)?;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这里不复述文档和教程中有的内容, 比如&lt;code&gt;Result&lt;/code&gt;之类的细节, 可以自行看文档内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://learning-rust.github.io/docs/e7.cu</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Rust" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Rust/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>LaTex基础-Table</title>
    <link href="https://www.torch-fan.site/2022/08/02/LaTex%E5%9F%BA%E7%A1%80-Table/"/>
    <id>https://www.torch-fan.site/2022/08/02/LaTex%E5%9F%BA%E7%A1%80-Table/</id>
    <published>2022-08-02T08:09:42.000Z</published>
    <updated>2022-11-15T02:27:36.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;[pos]&#123;cols&#125;<br><br>  table content<br><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><p>where options can be:</p><ul><li><code>pos</code> : Vertical position. It can assume the following values:</li></ul><table><thead><tr><th><code>t</code></th><th>the line at the top is aligned with the text baseline (可以理解为一横文字的底部基线, 所有文字在这个基线上排布)</th></tr></thead><tbody><tr><td><code>b</code></td><td>the line at the bottom is aligned with the text baseline</td></tr><tr><td><code>c</code> or none</td><td>the table is centred to the text baseline</td></tr></tbody></table><ul><li><code>cols</code> : Defines the alignment and the borders of each column. It can have the following values:</li></ul><table><thead><tr><th><code>l</code></th><th>left-justified column</th></tr></thead><tbody><tr><td><code>c</code></td><td>centred column</td></tr><tr><td><code>r</code></td><td>right-justified column</td></tr><tr><td><code>p&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned at the top</td></tr><tr><td><code>m&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned in the middle (requires <code>array</code><br /> package)</td></tr><tr><td><code>b&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned at the bottom (requires <code>array</code><br /> package)</td></tr><tr><td><code>&amp;#124;</code></td><td>vertical line</td></tr><tr><td><code>&amp;#124;&amp;#124;</code></td><td>double vertical line</td></tr><tr><td><code>*&#123;num&#125;&#123;form&#125;</code></td><td>the format form is repeated <em>num</em> times; for example <code>*&#123;3&#125;&#123;&amp;#124;l&#125;&amp;#124;</code><br /> is equal to <code>&amp;#124;l&amp;#124;l&amp;#124;l&amp;#124;</code></td></tr></tbody></table><p>To separate between cells and introducing new lines use the following commands:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>column separator</td></tr><tr><td><code>\\\\</code></td><td>start new row (additional space may be specified after <code>\\</code><br /> using square brackets, such as <code>\\[6pt]</code><br />)</td></tr><tr><td><code>\\hline</code></td><td>horizontal line between rows</td></tr><tr><td><code>\\newline</code></td><td>start a new line within a cell (in a paragraph column)</td></tr><tr><td><code>\\cline&#123;i-j&#125;</code></td><td>partial horizontal line beginning in column <em>i</em> and ending in column <em>j</em></td></tr></tbody></table><h1 id="1-用table制作封面"><a class="markdownIt-Anchor" href="#1-用table制作封面"></a> 1. 用table制作封面:</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% 用于制作更复杂的封面</span><br><span class="hljs-keyword">\title</span>&#123;<span class="hljs-keyword">\makebox</span>&#123;<br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;img/nankai.jpg&#125; <span class="hljs-keyword">\\</span><br>         <span class="hljs-keyword">\textbf</span>&#123;课程报告&#125; <span class="hljs-keyword">\\</span><br>         xxxxxx<br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">\author</span>&#123;<span class="hljs-keyword">\makebox</span>&#123;<br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;<br>        姓名： <span class="hljs-built_in">&amp;</span> xxxx  <span class="hljs-keyword">\\</span><br>        学号： <span class="hljs-built_in">&amp;</span> xxxx<br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\today</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-将表格进行整体缩放并不推荐-除非迫不得已"><a class="markdownIt-Anchor" href="#2-将表格进行整体缩放并不推荐-除非迫不得已"></a> 2. 将表格进行整体缩放(并不推荐, 除非迫不得已)</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\resizebox</span>&#123;<span class="hljs-keyword">\textwidth</span>&#125;&#123;15mm&#125;&#123;<br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;<br>    <span class="hljs-keyword">\hline</span><br>    <span class="hljs-keyword">\ </span> <span class="hljs-built_in">&amp;</span> 平均运行时间(单位: s) <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\hline</span><br>    训练阶段 <span class="hljs-built_in">&amp;</span> 2333.5593 <span class="hljs-keyword">\\</span><br>    测试阶段 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ </span> <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;  <span class="hljs-comment">% 只能包含tabular 不能包含文本 如 \caption</span><br></code></pre></td></tr></table></figure><h1 id="3-整体调整每一列宽度"><a class="markdownIt-Anchor" href="#3-整体调整每一列宽度"></a> 3. 整体调整每一列宽度</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\setlength</span>&#123;<span class="hljs-keyword">\tabcolsep</span>&#125;&#123;7mm&#125;&#123;<br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cccccc&#125; <br>    <span class="hljs-keyword">\toprule</span><br>    Models  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span> c<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\alpha</span><span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>0<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>1<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>2<span class="hljs-built_in">$</span>  <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>    model  <span class="hljs-built_in">&amp;</span> 30.6302  <span class="hljs-built_in">&amp;</span> 0.4127  <span class="hljs-built_in">&amp;</span> 9.4257  <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 12.4089  <span class="hljs-built_in">&amp;</span> 0.5169  <span class="hljs-built_in">&amp;</span> 18.6986  <span class="hljs-built_in">&amp;</span> -6.6157  <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 14.8586  <span class="hljs-built_in">&amp;</span> 0.4991  <span class="hljs-built_in">&amp;</span> 19.5421  <span class="hljs-built_in">&amp;</span> -7.0717  <span class="hljs-built_in">&amp;</span> 0.2183  <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 3.06302  <span class="hljs-built_in">&amp;</span> 0.41266  <span class="hljs-built_in">&amp;</span> 0.11725  <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 1.24089  <span class="hljs-built_in">&amp;</span> 0.51691  <span class="hljs-built_in">&amp;</span> 0.83605  <span class="hljs-built_in">&amp;</span> -0.66157  <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 1.48586  <span class="hljs-built_in">&amp;</span> 0.49906  <span class="hljs-built_in">&amp;</span> 0.95609  <span class="hljs-built_in">&amp;</span> -0.70717  <span class="hljs-built_in">&amp;</span> 0.02183  <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><br>    <span class="hljs-keyword">\caption</span>&#123;哈哈哈&#125;<br>  <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;  <span class="hljs-comment">% 这个可以包含很多元素</span><br></code></pre></td></tr></table></figure><h1 id="4-设置列高"><a class="markdownIt-Anchor" href="#4-设置列高"></a> 4.  设置列高</h1><blockquote><p><code>\rule&#123;线的宽度&#125;&#123;线撑起的高度&#125;</code></p><p>线设置为0pt宽度, 就可以起到撑起单元格的作用了</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\ </span> <span class="hljs-built_in">&amp;</span> 平均运行时间(单位: s) <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\rule</span>&#123;0pt&#125;&#123;8pt&#125;训练阶段 <span class="hljs-built_in">&amp;</span> 2333.5593 <span class="hljs-keyword">\\</span><br>  测试阶段 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ </span> <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><h1 id="5-三线表"><a class="markdownIt-Anchor" href="#5-三线表"></a> 5. 三线表</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125; <br><span class="hljs-keyword">\usepackage</span>&#123;float&#125;<span class="hljs-comment">%提供float浮动环境</span><br><span class="hljs-keyword">\usepackage</span>&#123;booktabs&#125;<span class="hljs-comment">%提供命令\toprule、\midrule、\bottomrule</span><br> <br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br> <br>  <span class="hljs-comment">%经典三线表</span><br>  <span class="hljs-keyword">\begin</span>&#123;table&#125;[H]<br>    <span class="hljs-keyword">\caption</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;Example 1&#125;&#125;<span class="hljs-comment">%标题</span><br>    <span class="hljs-keyword">\centering</span><span class="hljs-comment">%把表居中</span><br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#123;80pt&#125;c&#123;80pt&#125;c&#123;80pt&#125;c&#123;80pt&#125;&#125;<span class="hljs-comment">%四个c代表该表一共四列，内容全部居中</span><br>    <span class="hljs-keyword">\toprule</span><span class="hljs-comment">%第一道横线</span><br>    Item 1<span class="hljs-built_in">&amp;</span>Item 2<span class="hljs-built_in">&amp;</span>Item 3<span class="hljs-built_in">&amp;</span>Item 4 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\midrule</span><span class="hljs-comment">%第二道横线 </span><br>    Data1<span class="hljs-built_in">&amp;</span>Data2<span class="hljs-built_in">&amp;</span>Data3<span class="hljs-built_in">&amp;</span>Data4 <span class="hljs-keyword">\\</span><br>    Data5<span class="hljs-built_in">&amp;</span>Data6<span class="hljs-built_in">&amp;</span>Data7<span class="hljs-built_in">&amp;</span>Data8 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><span class="hljs-comment">%第三道横线</span><br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>  <span class="hljs-keyword">\end</span>&#123;table&#125;<br> <br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h1 id="6-复杂表格"><a class="markdownIt-Anchor" href="#6-复杂表格"></a> 6. 复杂表格</h1><blockquote><p>多列表格中用<code>\cline</code> 控制哪几列有横线: <code>\cline&#123;3-5&#125;</code> 表示第3列和第5列有横线.</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% 如果要间隔一列加横线只要两个指令就行</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;llrr&#125; <br>  a <span class="hljs-built_in">&amp;</span>b <span class="hljs-built_in">&amp;</span>c <span class="hljs-built_in">&amp;</span>d <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;3-4&#125; <br>  e <span class="hljs-built_in">&amp;</span>f <span class="hljs-built_in">&amp;</span>g <span class="hljs-built_in">&amp;</span>h <br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果用了<code>booktabs</code>, 想要<code>\cline</code>类似的多列横线, 则可以使用<code>\cmidrule</code>, 这个比<code>\midrule</code>更细</p></blockquote><p><img src="https://img1.imgtp.com/2022/08/02/VIxH5MFg.png" alt="解释" /></p><p><img src="https://img1.imgtp.com/2022/08/02/L8Ict2Bp.png" alt="解释2" /></p><hr /><blockquote><p>\usepackage{multirow}</p></blockquote><blockquote><p><code>\multirow&#123;nrows&#125;[bigstruct]&#123;width&#125;[fixup]&#123;text&#125;</code></p><ul><li>nrows: 占用的行数</li><li>bigstructs: 可选, 在使用了bigstruct宏包时用</li><li>width: 该栏宽度, 如果为*则由LaTex自行决定</li><li>fixup: 可选项, 调整文本的垂直位置</li><li>text: 所要排版的文本, 可以用 \ 强制换行</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-comment">%跨行（将两行合并为一行） 第一个参数指明跨几行 记得下一行对应位置空出来 不然会重叠, 第二个参数是宽度</span><br>  <span class="hljs-keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;1&#125; <span class="hljs-built_in">&amp;</span> 11 <span class="hljs-built_in">&amp;</span> 111 <span class="hljs-built_in">&amp;</span> 1111 <span class="hljs-built_in">&amp;</span> 11111 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\cline</span>&#123;2-5&#125;<br>   <span class="hljs-built_in">&amp;</span> 22 <span class="hljs-built_in">&amp;</span> 222 <span class="hljs-built_in">&amp;</span> 2222 <span class="hljs-built_in">&amp;</span> 22222 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  3 <span class="hljs-built_in">&amp;</span> 33 <span class="hljs-built_in">&amp;</span> 333 <span class="hljs-built_in">&amp;</span> 3333 <span class="hljs-built_in">&amp;</span> 33333 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>\multicolumn&#123;ncols&#125;&#123;指明对齐方式以及方格线&#125;&#123;单元格内容&#125;</code></p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-comment">% after \\: \hline or \cline&#123;col1-col2&#125; \cline&#123;col3-col4&#125; ...</span><br>  <span class="hljs-comment">%跨列（将两列合并为一列）第一个参数指明跨几列  第二个参数指明内容居中并在左右两边画上直线 最后一个参数是表格内容</span><br>  <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;|c|&#125;&#123;1&#125;  <span class="hljs-built_in">&amp;</span> 111 <span class="hljs-built_in">&amp;</span> 1111 <span class="hljs-built_in">&amp;</span> 11111 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>   2 <span class="hljs-built_in">&amp;</span> 22 <span class="hljs-built_in">&amp;</span> 222 <span class="hljs-built_in">&amp;</span> 2222 <span class="hljs-built_in">&amp;</span> 22222 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  3 <span class="hljs-built_in">&amp;</span> 33 <span class="hljs-built_in">&amp;</span> 333 <span class="hljs-built_in">&amp;</span> 3333 <span class="hljs-built_in">&amp;</span> 33333 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><h1 id="7-表格的列方向上分散对齐"><a class="markdownIt-Anchor" href="#7-表格的列方向上分散对齐"></a> 7. 表格的列方向上分散对齐</h1><blockquote><p><code>\makebox[width][position]&#123;text&#125;</code></p><p><code>\makebox[4em][s]&#123;content&#125;</code></p><ul><li>l - left</li><li>r - right</li><li>s - interword space adjusted so text fills box exactly</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;rl&#125;<br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;论文题目&#125;：        <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@title</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;专<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;业&#125;：<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@major</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;博<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;士<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;生&#125;：      <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@author</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;指导教师&#125;：        <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@advisorname</span> <span class="hljs-keyword">\,</span><span class="hljs-keyword">\,</span> <span class="hljs-keyword">\@advisortitle</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>表格内换行</li></ol><blockquote><p><code>\makecell</code></p></blockquote><p><img src="https://img1.imgtp.com/2022/08/02/LNe2NvOn.png" alt="解释" /></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>&#123;makecell&#125;<br><br><span class="hljs-comment">% ...</span><br><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;<br>  <span class="hljs-keyword">\makecell</span>[l]&#123;a <span class="hljs-keyword">\\</span> b <span class="hljs-keyword">\\</span> c &#125; <span class="hljs-built_in">&amp;</span> 1 <span class="hljs-keyword">\\</span>  <span class="hljs-comment">% 用于单元格内换行</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><p>除了使用<code>\makecell</code>外, 还可以用嵌套tabular的方式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cccc&#125;<br>    <span class="hljs-keyword">\toprule</span><br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#125;<br>            物理机<span class="hljs-keyword">\\</span>资源类型<br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>          <span class="hljs-built_in">&amp;</span> CPU资源（单位：核） <span class="hljs-built_in">&amp;</span> 内存资源（单位：G） <span class="hljs-built_in">&amp;</span> 机器数量 <span class="hljs-keyword">\\</span><br>     <span class="hljs-keyword">\hline</span><br>         类型一 <span class="hljs-built_in">&amp;</span>  32  <span class="hljs-built_in">&amp;</span> 64 <span class="hljs-built_in">&amp;</span> 6000 <span class="hljs-keyword">\\</span><br>         类型二 <span class="hljs-built_in">&amp;</span> 92 <span class="hljs-built_in">&amp;</span> 288 <span class="hljs-built_in">&amp;</span> 3000 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><ol start="9"><li>设置合理列宽</li></ol><blockquote><p>需要导入<code>makecell</code>包</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% p&#123;xpt&#125; 可以指定每一列的宽度， 但是这样就没有t, c, b 对齐的作用了, 但是可以自动换行!</span><br><br><span class="hljs-keyword">\begin</span>&#123;table &#125;[ htbp]<br>  <span class="hljs-keyword">\centering</span><br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;p&#123;80 pt&#125;p&#123;80 pt&#125;p&#123;80 pt&#125;&#125;<br>  <span class="hljs-keyword">\toprule</span><br>  操作系统 <span class="hljs-built_in">&amp;</span> 发行版 <span class="hljs-built_in">&amp;</span> 编辑器 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\midrule</span><br>  Windows <span class="hljs-built_in">&amp;</span> MikTeX <span class="hljs-built_in">&amp;</span> TexMakerX <span class="hljs-keyword">\\</span><br>   Unix/Linux <span class="hljs-built_in">&amp;</span> teTeX <span class="hljs-built_in">&amp;</span> Kile <span class="hljs-keyword">\\</span><br>  Mac OS <span class="hljs-built_in">&amp;</span> MacTeX <span class="hljs-built_in">&amp;</span> TeXShop <span class="hljs-keyword">\\</span><br>   通用 <span class="hljs-built_in">&amp;</span> TeX Live <span class="hljs-built_in">&amp;</span> TeXworks <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\bottomrule</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% p&#123;80pt&#125;&lt;&#123;\centering&#125;</span><br><br><span class="hljs-keyword">\begin</span>&#123;table &#125;[ htbp]<br> <span class="hljs-keyword">\centering</span><br>  <span class="hljs-keyword">\begin</span>&#123;tabular &#125;&#123;p&#123;80 pt&#125;&lt;&#123;<span class="hljs-keyword">\centering</span>&#125;p&#123;80 pt&#125;&lt;&#123;<span class="hljs-keyword">\raggedleft</span><span class="hljs-keyword">\arraybackslash</span> &#125;p&#123;80 pt&#125;&#125;<br> <span class="hljs-keyword">\toprule</span><br>操作系统 <span class="hljs-built_in">&amp;</span> 发行版 <span class="hljs-built_in">&amp;</span> 编辑器 <span class="hljs-keyword">\\</span><br> <span class="hljs-keyword">\midrule</span><br>Windows <span class="hljs-built_in">&amp;</span> MikTeX <span class="hljs-built_in">&amp;</span> TexMakerX <span class="hljs-keyword">\\</span><br> Unix/Linux <span class="hljs-built_in">&amp;</span> teTeX <span class="hljs-built_in">&amp;</span> Kile <span class="hljs-keyword">\\</span><br>Mac OS <span class="hljs-built_in">&amp;</span> MacTeX <span class="hljs-built_in">&amp;</span> TeXShop <span class="hljs-keyword">\\</span><br> 通用 <span class="hljs-built_in">&amp;</span> TeX Live <span class="hljs-built_in">&amp;</span> TeXworks <span class="hljs-keyword">\\</span><br> <span class="hljs-keyword">\bottomrule</span><br> <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br></code></pre></td></tr></table></figure><h1 id="9-将表旋转90度显示"><a class="markdownIt-Anchor" href="#9-将表旋转90度显示"></a> 9. 将表旋转90度显示</h1><blockquote><p>使用宏包<code>rotating</code></p><p>将<code>table</code>环境改为<code>sidewaytable</code></p><ul><li><code>\usepackage[figuresleft]&#123;rotating&#125;</code>: 顺时针90度</li><li><code>\usepackage[figuresright]&#123;rotating&#125;</code>: 逆时针90度</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>[figuresright]&#123;rotating&#125;<br><br><span class="hljs-comment">%...</span><br><br><span class="hljs-keyword">\begin</span>&#123;sidewaystable&#125;[htp]<br><span class="hljs-keyword">\caption</span>&#123;This is a caption&#125;  <br><span class="hljs-keyword">\centering</span>  <span class="hljs-comment">%表格整体居中</span><br>  <span class="hljs-keyword">\footnotesize</span>  <span class="hljs-comment">%设置字体</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;l*&#123;7&#125;&#123;L&#123;3cm&#125;&#125;&#125; <span class="hljs-comment">%共7列，每一列列宽为3cm</span><br>    <span class="hljs-comment">%...</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\end</span>&#123;sidewaystable&#125;<br></code></pre></td></tr></table></figure><h1 id="multicolumn-小结"><a class="markdownIt-Anchor" href="#multicolumn-小结"></a> multicolumn 小结</h1><ul><li><code>m&#123;5cm&#125;</code>: 居中</li><li><code>p&#123;5cm&#125;</code>: 顶部</li><li><code>b&#123;5cm&#125;</code>: 底部</li></ul><p><img src="https://img1.imgtp.com/2022/08/02/UMYQll70.png" alt="multicolumn的位置设置" /></p><h2 id="1-垂直居中"><a class="markdownIt-Anchor" href="#1-垂直居中"></a> 1. 垂直居中</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;center&#125;<br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|l|l|l|l|&#125;<br><span class="hljs-keyword">\hline</span><br>Day <span class="hljs-built_in">&amp;</span> Min Temp <span class="hljs-built_in">&amp;</span> Max Temp <span class="hljs-built_in">&amp;</span> Summary <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><span class="hljs-comment">% 注意, multicolumn中 | 会覆盖全局的边框设置, 不加的话, 对应单元格也没边框</span><br>Monday <span class="hljs-built_in">&amp;</span> 11C <span class="hljs-built_in">&amp;</span> 22C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|p&#123;5cm&#125;|&#125;&#123;A clear day with lots of sunshine. However, the strong breeze will bring down the temperatures.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br>Tuesday <span class="hljs-built_in">&amp;</span> 9C <span class="hljs-built_in">&amp;</span> 19C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|m&#123;5cm&#125;|&#125;&#123;Cloudy with rain, across many northern regions. Clear spells across most of Scotland and Northern Ireland, but rain reaching the far northwest.&#125; <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">\hline</span><br>Wednesday <span class="hljs-built_in">&amp;</span> 10C <span class="hljs-built_in">&amp;</span> 21C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|b&#123;5cm&#125;|&#125;&#123;Rain will still linger for the morning. Conditions will improve by early afternoon and continue throughout the evening.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><br><span class="hljs-keyword">\end</span>&#123;center&#125;<br></code></pre></td></tr></table></figure><h2 id="2-垂直且水平居中"><a class="markdownIt-Anchor" href="#2-垂直且水平居中"></a> 2. 垂直且水平居中</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[a4paper,twoside,12pt]&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;amsbsy&#125;<span class="hljs-comment">%</span><br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;array&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;calc&#125;<br><span class="hljs-keyword">\newcolumntype</span>&#123;N&#125;&#123;&gt;&#123;<span class="hljs-keyword">\centering</span><span class="hljs-keyword">\arraybackslash</span>&#125;m&#123;.5in&#125;&#125;  <span class="hljs-comment">% \arraybackslash 就是那个 \\</span><br><span class="hljs-keyword">\newcolumntype</span>&#123;G&#125;&#123;&gt;&#123;<span class="hljs-keyword">\bfseries</span><span class="hljs-keyword">\centering</span><span class="hljs-keyword">\arraybackslash</span>&#125;m&#123;2in+6<span class="hljs-keyword">\tabcolsep</span>&#125;&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;table&#125;[H]<br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;*&#123;9&#125;&#123;N|&#125;&#125;<br><span class="hljs-keyword">\cline</span>&#123;2-9&#125;<br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;N|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;4&#125;&#123;G|&#125;&#123;Emissions (Pre Catalytic Converter)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;4&#125;&#123;G|&#125;&#123;Emissions (Post Catalytic Converter)&#125; <span class="hljs-keyword">\tabularnewline</span>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|N|&#125;&#123;<span class="hljs-keyword">\textbf</span>&#123;Dyno Load (<span class="hljs-keyword">\%</span>)&#125;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;CO (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;HC (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;Nox (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\boldsymbol</span>&#123;<span class="hljs-keyword">\mathrm</span>&#123;CO<span class="hljs-built_in">_</span>2&#125;&#125;<span class="hljs-built_in">$</span> (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;CO (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;HC (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;Nox (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\boldsymbol</span>&#123;<span class="hljs-keyword">\mathrm</span>&#123;CO<span class="hljs-built_in">_</span>2&#125;&#125;<span class="hljs-built_in">$</span> (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|N|&#125;&#123;10&#125; <span class="hljs-built_in">&amp;</span> 0.77 <span class="hljs-built_in">&amp;</span> 23 <span class="hljs-built_in">&amp;</span> 523 <span class="hljs-built_in">&amp;</span> 14.0 <span class="hljs-built_in">&amp;</span> 0.09 <span class="hljs-built_in">&amp;</span> 18 <span class="hljs-built_in">&amp;</span> 130 <span class="hljs-built_in">&amp;</span> 13.8 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;30&#125; <span class="hljs-built_in">&amp;</span> 0.78 <span class="hljs-built_in">&amp;</span> 13 <span class="hljs-built_in">&amp;</span> 555 <span class="hljs-built_in">&amp;</span> 14.2 <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;70&#125; <span class="hljs-built_in">&amp;</span> 0.70 <span class="hljs-built_in">&amp;</span> 14 <span class="hljs-built_in">&amp;</span> 580 <span class="hljs-built_in">&amp;</span> 14.4 <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;90&#125; <span class="hljs-built_in">&amp;</span> 0.74 <span class="hljs-built_in">&amp;</span> 15 <span class="hljs-built_in">&amp;</span> 630 <span class="hljs-built_in">&amp;</span> 14.5 <span class="hljs-built_in">&amp;</span> 0.70 <span class="hljs-built_in">&amp;</span> 15 <span class="hljs-built_in">&amp;</span> 618 <span class="hljs-built_in">&amp;</span> 14.6 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;Neutral&#125; <span class="hljs-built_in">&amp;</span> 0.06 <span class="hljs-built_in">&amp;</span> 7 <span class="hljs-built_in">&amp;</span> 21 <span class="hljs-built_in">&amp;</span> 15.6 <span class="hljs-built_in">&amp;</span> 0.06 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 27 <span class="hljs-built_in">&amp;</span> 15.7 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\caption</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;&#125;&#125;<br><span class="hljs-keyword">\label</span>&#123;2000Emissions&#125;<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h2 id="3-newcolumntype是如何工作的呢"><a class="markdownIt-Anchor" href="#3-newcolumntype是如何工作的呢"></a> 3. <code>newcolumntype是如何工作的呢?</code></h2><blockquote><p>详情可见: <a href="https://tex.stackexchange.com/questions/257128/how-does-the-newcolumntype-command-work">https://tex.stackexchange.com/questions/257128/how-does-the-newcolumntype-command-work</a></p></blockquote><blockquote><p><code>\arraybackslash</code></p></blockquote><blockquote><p>As for <code>\arraybackslash</code>, the <code>\raggedright</code>, <code>\raggedleft</code>, and <code>\centering</code> declarations refine <code>\</code> in a way that conflicts with its use in a tabular or array environments. The command <code>\arraybackslash</code> (implemented in array and tabularx) restoresthe meaning of <code>\</code> for use in array and tabular (you would only need <code>\arraybackslash</code> for the last column).</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight latex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="教程" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文档撰写" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    
    <category term="LaTex" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/LaTex/"/>
    
    
    <category term="LaTex" scheme="https://www.torch-fan.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>LaTex小技巧</title>
    <link href="https://www.torch-fan.site/2022/07/29/LaTex%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.torch-fan.site/2022/07/29/LaTex%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2022-07-29T06:01:03.000Z</published>
    <updated>2022-11-15T02:27:36.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-符号"><a class="markdownIt-Anchor" href="#1-符号"></a> 1. 符号</h1><blockquote><p><code>~</code>: 波浪号表示一个空格, 但又不只是一个空格, 波浪号左右的内容不允许换行截断, 在用<code>A~\cite&#123;name&#125;</code>引用时, 名字和引用就不会因换行而截断了.</p></blockquote><p><code>\checkmark</code>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">✓</mi></mrow><annotation encoding="application/x-tex">\checkmark</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord amsrm">✓</span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-符号&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-符号&quot;&gt;&lt;/a&gt; 1. 符号&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;: 波浪号表示一个空格, 但又不只是一个空格, 波浪号左右的内容不允许换行截</summary>
      
    
    
    
    <category term="教程" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文档撰写" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    
    <category term="LaTex" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/LaTex/"/>
    
    
    <category term="LaTex" scheme="https://www.torch-fan.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>LaTex基础-Figure</title>
    <link href="https://www.torch-fan.site/2022/07/28/LaTex%E5%9F%BA%E7%A1%80-Figure/"/>
    <id>https://www.torch-fan.site/2022/07/28/LaTex%E5%9F%BA%E7%A1%80-Figure/</id>
    <published>2022-07-28T11:59:59.000Z</published>
    <updated>2022-11-15T02:27:36.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-子图"><a class="markdownIt-Anchor" href="#1-子图"></a> 1. 子图</h1><blockquote><p>注意, 子图和正常的figure也是一样有caption的, 也可以加<code>\label</code>, 为了突出重点就不搞复杂了. 下面是一般要引入的package</p><p><code>\usepackages&#123;subcaption&#125;</code></p><p><code>\usepackage&#123;graphicx&#125;</code></p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;<br>    <span class="hljs-keyword">\centering</span><br>    <span class="hljs-keyword">\begin</span>&#123;subfigure&#125;&#123;0.4<span class="hljs-keyword">\textwidth</span>&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;example-image&#125;<br>    <span class="hljs-keyword">\end</span>&#123;subfigure&#125;<br>    <span class="hljs-comment">% 这里很微妙, 如果没有这个\quad, 两个子图会垂直并列, 加上后就是水平并列</span><br>    <span class="hljs-comment">% 使用 \hfill 也能起到让子图水平并列的作用 </span><br>    <span class="hljs-comment">% 当然如果水平摆不下, 剩余的图还是会去下一行挤</span><br>    <span class="hljs-keyword">\quad</span> <br>    <span class="hljs-keyword">\begin</span>&#123;subfigure&#125;&#123;0.4<span class="hljs-keyword">\textwidth</span>&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;example-image&#125;<br>    <span class="hljs-keyword">\end</span>&#123;subfigure&#125;<br>    <br>    <span class="hljs-keyword">\caption</span>&#123;The common architecture of a recurrent VAE. &#125;<br>    <span class="hljs-keyword">\label</span>&#123;fig:recurrent<span class="hljs-built_in">_</span>vae&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-子图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-子图&quot;&gt;&lt;/a&gt; 1. 子图&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;注意, 子图和正常的figure也是一样有caption的, 也可以加&lt;code&gt;\label&lt;/cod</summary>
      
    
    
    
    <category term="教程" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文档撰写" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    
    <category term="LaTex" scheme="https://www.torch-fan.site/categories/%E6%95%99%E7%A8%8B/%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/LaTex/"/>
    
    
    <category term="LaTex" scheme="https://www.torch-fan.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>git工具用法小结</title>
    <link href="https://www.torch-fan.site/2022/07/27/git%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.torch-fan.site/2022/07/27/git%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</id>
    <published>2022-07-27T03:32:12.000Z</published>
    <updated>2022-11-15T02:27:36.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-submodule"><a class="markdownIt-Anchor" href="#1-submodule"></a> 1. <code>submodule</code></h1><blockquote><p>有时候, 遇到复杂的项目会存在submodule, 要拉取这样的仓库, 需要这样. (至于如何给自己的项目添加一个submodule, git官方给了例子, 就不复制了)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull remote main<br>git submodule update --init <span class="hljs-comment"># 初始化submodule以及拉取其代码</span><br>git submodule update &lt;submodule-name&gt; <span class="hljs-comment"># 获取submodule的远程更新, 也可以不指定名字, 全部更新.</span><br></code></pre></td></tr></table></figure><h1 id="2-commit"><a class="markdownIt-Anchor" href="#2-commit"></a> 2. <code>commit</code></h1><blockquote><p><code>-i</code> 表示进入交互模式</p><p><code>HEAD~10</code> 表示目标是从HEAD向前(更早)的10次提交</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~10<br></code></pre></td></tr></table></figure><p>随后打开一个交互界面, 将<code>pick</code>都替换为<code>squash</code>, !!! 除了最顶上那行的<code>pick</code>保留, 那是<code>HEAD</code>指针所指向的最新提交. 最后保存文件退出即可.</p><p>退出后, 会进入另一个文件, 这里是编辑commit的提交信息的, 每个合并的commit其信息会被合并在一起, 因此是否修改可以看需求, 一般直接退出就行了.</p><p>这里是rebase中其他可供使用的命令:</p><blockquote><p>命令:<br />p, pick &lt;提交&gt; = 使用提交</p><p>r, reword &lt;提交&gt; = 使用提交，但编辑提交说明</p><p>e, edit &lt;提交&gt; = 使用提交，但停止以便在 shell 中修补提交</p><p>s, squash &lt;提交&gt; = 使用提交，但挤压到前一个提交</p><p>f, fixup [-C | -c] &lt;提交&gt; = 类似于 “squash”，但只保留前一个提交<br />的提交说明，除非使用了 -C 参数，此情况下则只<br />保留本提交说明。使用 -c 和 -C 类似，但会打开<br />编辑器修改提交说明</p><p>x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）</p><p>b, break = 在此处停止（使用 ‘git rebase --continue’ 继续变基）</p><p>d, drop &lt;提交&gt; = 删除提交</p><p>l, label <label> = 为当前 HEAD 打上标记</p><p>t, reset <label> = 重置 HEAD 到该标记</p><p>m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]<br />.       创建一个合并提交，并使用原始的合并提交说明（如果没有指定<br />.       原始提交，使用注释部分的 oneline 作为提交说明）。使用<br />.       -c &lt;提交&gt; 可以编辑提交说明。</p><p>可以对这些行重新排序，将从上至下执行。</p><p>如果您在这里删除一行，对应的提交将会丢失。</p><p>然而，如果您删除全部内容，变基操作将会终止。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-submodule&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-submodule&quot;&gt;&lt;/a&gt; 1. &lt;code&gt;submodule&lt;/code&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候, 遇到复杂的项目会存在sub</summary>
      
    
    
    
    <category term="工具" scheme="https://www.torch-fan.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Git" scheme="https://www.torch-fan.site/categories/%E5%B7%A5%E5%85%B7/Git/"/>
    
    <category term="基础" scheme="https://www.torch-fan.site/categories/%E5%B7%A5%E5%85%B7/Git/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Git" scheme="https://www.torch-fan.site/tags/Git/"/>
    
  </entry>
  
</feed>
