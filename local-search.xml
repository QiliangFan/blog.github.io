<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mac 清理垃圾</title>
    <link href="/2022/09/29/Mac-%E6%B8%85%E7%90%86%E5%9E%83%E5%9C%BE/"/>
    <url>/2022/09/29/Mac-%E6%B8%85%E7%90%86%E5%9E%83%E5%9C%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-清理日志文件"><a class="markdownIt-Anchor" href="#1-清理日志文件"></a> 1 清理日志文件:</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不是很推荐把log文件夹给删除, 删除内容就行</span><br>sudo <span class="hljs-built_in">rm</span> -rf /private/var/log/*<br>sudo <span class="hljs-built_in">rm</span> -rf /private/var/logs/*<br></code></pre></td></tr></table></figure><h1 id="2-清理临时文件和缓存文件"><a class="markdownIt-Anchor" href="#2-清理临时文件和缓存文件"></a> 2 清理临时文件和缓存文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> -rf /private/var/tmp/*<br><br>sudo <span class="hljs-built_in">rm</span> -rf ~/Library/Caches/*<br></code></pre></td></tr></table></figure><h1 id="3-删除本机的时间机器备份注意-不是指时间机器备份硬盘"><a class="markdownIt-Anchor" href="#3-删除本机的时间机器备份注意-不是指时间机器备份硬盘"></a> 3 删除本机的时间机器备份(注意, 不是指时间机器备份硬盘)</h1><blockquote><p>Mac OS 除了用硬盘搞时间机器备份, 他自己还会搞一份备份</p><p>删除时间机器缓存最节省空间的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本机上所有本地时间机器缓存</span><br>sudo tmutil listlocalsnapshots /<br><br><span class="hljs-comment"># 删除指定的时间机器备份缓存(可以多出很多~, 系统文件大部分都是这些搞的备份)</span><br>tmutil deletelocalsnapshots 2022-09-28-105624<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode连接虚拟机小贴士</title>
    <link href="/2022/09/23/vscode%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    <url>/2022/09/23/vscode%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    
    <content type="html"><![CDATA[<p>谈到vscode连接虚拟机, 很多人第一想到桥接模式, 但是对于wifi网卡, 现阶段似乎无法实现,如果对wifi网卡使用桥接, 客户机将没有网络, 还表现为没有路由和ipv4地址, 因此这篇笔记主要是为那些使用笔记本(拥有无线网卡)的同学准备.</p><h1 id="1-准备工作"><a class="markdownIt-Anchor" href="#1-准备工作"></a> 1. 准备工作:</h1><p>创建一个NAT网络的虚拟机.</p><h1 id="2-配置端口映射"><a class="markdownIt-Anchor" href="#2-配置端口映射"></a> 2. 配置端口映射:</h1><p>在NAT模式下, 客户机的IP是不被感知的, 为了能够方便的访问到客户机, 我们进行端口映射(有时也叫NAT映射).</p><p>思路: 我们可以在virtual box中将<code>宿主机的端口</code>映射到<code>客户机的端口</code>:</p><p>假设我们有客户机IP: <code>10.0.2.15</code></p><p><img src="https://s1.ax1x.com/2022/09/23/xkXQaR.jpg" alt="客户机IP" /></p><p>我们设立如下的端口映射:</p><table><thead><tr><th style="text-align:center">Host</th><th style="text-align:center">Guest</th></tr></thead><tbody><tr><td style="text-align:center">127.0.0.1:22</td><td style="text-align:center">10.0.2.15:22</td></tr></tbody></table><blockquote><p>下图中配置的映射是 127.0.0.1:2233 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 10.0.2.15:22, 但是为了方便, 推荐将主机端口换为22, 这样连接时就不用额外的参数,至于端口冲突,最后一节给出解决思路.</p></blockquote><p><img src="https://s1.ax1x.com/2022/09/23/xkX3Px.jpg" alt="端口映射" /></p><h1 id="3-访问客户机"><a class="markdownIt-Anchor" href="#3-访问客户机"></a> 3. 访问客户机:</h1><p>如果我们需要SSH到客户机, 一般想的可能是直接ssh: <code>ssh guest_user@&lt;guest_ip&gt;</code>, 但是NAT情况下IP是不感知的, 因此无法访问, 但是我们做端口映射之后, 就变了, 我们可以通过这种方式访问客户机:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh guest_user@127.0.0.1 <span class="hljs-comment"># 事实上, 他是ssh到客户机上, 登陆用户名为guest_user</span><br></code></pre></td></tr></table></figure><p>随后如果想使用vscode, 像往常一样即可.</p><h1 id="4-其他"><a class="markdownIt-Anchor" href="#4-其他"></a> 4. 其他:</h1><p>上文我们讲到, 将本机的22端口映射到客户机的22端口, 但是本机的22端口并不总是空闲的, 为此我们可能将2233端口映射到客户机的22端口, 访问方式就变化了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -p 2233 guest_user@127.0.0.1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CMU Bomblab(汇编小笔记)</title>
    <link href="/2022/09/22/CMU-Bomblab-%E6%B1%87%E7%BC%96%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/22/CMU-Bomblab-%E6%B1%87%E7%BC%96%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考: <a href="https://github.com/CurryTang/bomb_lab_solution">https://github.com/CurryTang/bomb_lab_solution</a></p></blockquote><blockquote><p>以下从x64架构为准</p></blockquote><h1 id="1-相关指令"><a class="markdownIt-Anchor" href="#1-相关指令"></a> 1. 相关指令:</h1><h2 id="11-objdump-用于给出所有汇编指令"><a class="markdownIt-Anchor" href="#11-objdump-用于给出所有汇编指令"></a> 1.1 objdump: 用于给出所有汇编指令</h2><blockquote><p>objdump -d</p><p><code>Display assembler contents of executable sections</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d xxx &gt; xxx.asm<br></code></pre></td></tr></table></figure><h2 id="12-gdb"><a class="markdownIt-Anchor" href="#12-gdb"></a> 1.2 gdb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb &lt;program&gt; <span class="hljs-comment"># 调试程序</span><br>p &lt;var&gt;  <span class="hljs-comment"># 打印变量</span><br>b &lt;func&gt;  <span class="hljs-comment"># 给函数设置端点</span><br>c <span class="hljs-comment"># continue</span><br>n <span class="hljs-comment"># next line, stepping over function calls</span><br>s <span class="hljs-comment"># next line, stepping into funciton calls</span><br>list <span class="hljs-comment"># 展开源程序代码</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">p/c *0x2000@10 <span class="hljs-comment"># 查看内存字符值</span><br>x /25c 0x2000  <span class="hljs-comment"># x本身就是看内存的, 不需要加*</span><br><br>p/x <span class="hljs-variable">$eax</span> <span class="hljs-comment"># 查看寄存器值的8进制形式</span><br><br>x /20a 0x2000<br></code></pre></td></tr></table></figure><p>x 按十六进制格式显示变量。</p><p>d 按十进制格式显示变量。</p><p>u 按十六进制格式显示无符号整型。</p><p>o 按八进制格式显示变量。</p><p>t 按二进制格式显示变量。</p><p>a 按十六进制格式显示变量。</p><p>c 按字符格式显示变量。</p><p>f 按浮点数格式显示变量。</p><p>切换栈帧:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bt</span><br><br><span class="hljs-attribute">f</span><span class="hljs-meta"> [N]</span><br></code></pre></td></tr></table></figure><p>显示所有寄存器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> registers<br></code></pre></td></tr></table></figure><p>看寄存器的值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span> /<span class="hljs-number">16</span>xb $eax+<span class="hljs-number">0</span>x14<br></code></pre></td></tr></table></figure><h2 id="13-strings"><a class="markdownIt-Anchor" href="#13-strings"></a> 1.3 strings</h2><p>如果从汇编中看到某些关键字符, 可以这样获取一整句话:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings bomb | grep keywords<br></code></pre></td></tr></table></figure><h1 id="2-bomblab实验操作"><a class="markdownIt-Anchor" href="#2-bomblab实验操作"></a> 2. Bomblab实验操作</h1><ol><li>开启汇编窗口(好查看对应的汇编代码)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">layout asm<br></code></pre></td></tr></table></figure><ol start="2"><li>打断点</li></ol><p>在进每个阶段前且在readline前打断点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b *0x400e37 <span class="hljs-comment"># 地址\指针前要有 *</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">b phase_1<br>b phase_2<br>b phase_3<br>b phase_4<br>b phase_5<br>b phase_6<br></code></pre></td></tr></table></figure><ol start="3"><li>开始运行,进行调试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">r<br><br><span class="hljs-comment"># 查看某一个地址/函数的汇编 (如果不在运行没法根据地址看汇编, 只能用函数名名字)</span><br>disassem *0x400ee0<br><br>disassem phase_1<br><br>disassem strings_not_equal<br></code></pre></td></tr></table></figure><h1 id="3-看汇编"><a class="markdownIt-Anchor" href="#3-看汇编"></a> 3. 看汇编</h1><p>x86系统中,栈的地址是从高地址往低地址, push栈帧的时候, rsp(<code>stack pointer</code>)减少四个字节.</p><p><img src="https://s1.328888.xyz/2022/09/22/IoR1S.png" alt="寄存器" /></p><h2 id="31-通用寄存器64位寄存器"><a class="markdownIt-Anchor" href="#31-通用寄存器64位寄存器"></a> 3.1 通用寄存器(64位寄存器)</h2><p>0x8(%rsp) 表示上一个变量(一般第一个)</p><blockquote><p>bomb中将string_length的返回值放在EAX中</p></blockquote><p>EAX: accumulator, 加法乘法指令的缺省寄存器<br />EBX: base基地址寄存器,在内存寻址时存放基地址<br />ECX: counter计数器, 重复(REP)前缀指令和LOOP指令的内定计数器<br />EDX: 存放整数除法产生的余数<br />ESI/EDI: source/destination index, 字符串操作指令里, DS:ESI指向源串, ES:EDI指向目标串<br />EBP: base pointer, 高级语言函数调用时的frame pointer保存地方<br />如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push ebp;  // 保存当前ebp<br>mov ebp,esp; // ebp设为当前<br>sub esp,xxx;  // 预留xxx字节给函数临时变量<br></code></pre></td></tr></table></figure><p>ESP: 专门用作堆栈的顶部指针</p><h2 id="32-其他寄存器"><a class="markdownIt-Anchor" href="#32-其他寄存器"></a> 3.2 其他寄存器:</h2><p>R0~R12 是64位工作寄存器, 其中R12有可能被linker修改,所以函数开头经常对R12进行保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">push %r12 <span class="hljs-comment"># 将R12的内容推入堆栈进行保护</span><br></code></pre></td></tr></table></figure><p>当函数参数少于7个时, 从左到右参数依次放入寄存器:</p><ul><li>rdi</li><li>rsi</li><li>rdx</li><li>rcx</li><li>r8</li><li>r9</li></ul><h2 id="33-条件跳转指令和比较指令"><a class="markdownIt-Anchor" href="#33-条件跳转指令和比较指令"></a> 3.3 条件跳转指令和比较指令:</h2><blockquote><p><a href="https://faydoc.tripod.com/cpu/jle.htm">https://faydoc.tripod.com/cpu/jle.htm</a></p></blockquote><p><code>test</code> 指令主要将两个操作数按位与, 并根据结果设置<code>标志寄存器</code> (结果不会写回到目标操作数), <code>test</code>的两个寄存器只有都是空(全0)时或者不同时, ZF才会被置位</p><blockquote><p>注意: addq src, dst -&gt; dst = dst + src, 会将结果写回到目标寄存器上</p></blockquote><p><code>test</code>指令位与运算结果为0的话, ZF(Zero Flag)设为0.</p><p><code>je</code> 是jz(jump if zero)的别称.<br /><code>jne</code>就是反过来的条件跳转指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cmp</span> eax, edx<br>ja somewhere ; <span class="hljs-attribute">will</span> go <span class="hljs-string">&quot;somewhere&quot;</span> if eax &gt;u edx<br>             ; <span class="hljs-attribute">where</span> &gt;u is <span class="hljs-string">&quot;unsigned greater than&quot;</span><br><br>cmp eax, edx<br>jg somewhere ; <span class="hljs-attribute">will</span> go <span class="hljs-string">&quot;somewhere&quot;</span> if eax &gt;s edx<br>             ; <span class="hljs-attribute">where</span> &gt;s is <span class="hljs-string">&quot;signed greater than&quot;</span><br></code></pre></td></tr></table></figure><p><code>cmpb</code>: 判断是否相等, 然后置ZF为1:</p><p><code>cmpl</code>:<br />For &gt;, there is ja for unsigned and jg for signed (jump if above and jump if greater).</p><pre><code class="hljs">For &lt;, there is jb for unsigned and jl for signed (jump if below and jump if less).</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmpb <span class="hljs-variable">$0x0</span>, (%edx)<br></code></pre></td></tr></table></figure><p><code>(%edx)</code> 表示 %edx中所保存的地址指向单元的内容(即取指针所指内容)</p><h2 id="34-寄存器操作"><a class="markdownIt-Anchor" href="#34-寄存器操作"></a> 3.4 寄存器操作:</h2><blockquote><p><a href="https://stackoverflow.com/questions/19748074/meaning-of-0x8rsp">https://stackoverflow.com/questions/19748074/meaning-of-0x8rsp</a></p></blockquote><p><code>0x8(%rsp)</code> means &quot;get the location on the stack that is 8 bytes away from the stack pointer %rsp</p><p><code>lea</code>: 和mov很像, 不过有其他作用</p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他:</h1><p>因为不同同学的bomb内容不同, 我帮的一位同学比网上的版本要稍微复杂一些,共计19小时,bingo~</p><p>这篇笔记只是零星随笔, 帮助自己回忆汇编, 日后有机会会综合整理</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
      <category>汇编</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Generate 204链接收集</title>
    <link href="/2022/09/04/Generate-204%E9%93%BE%E6%8E%A5%E6%94%B6%E9%9B%86/"/>
    <url>/2022/09/04/Generate-204%E9%93%BE%E6%8E%A5%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意, 这些链接都可以用https替代, 但是并不推荐.</p></blockquote><ul><li><a href="http://www.gstatic.com/generate_204">http://www.gstatic.com/generate_204</a></li><li><a href="http://cp.cloudflare.com/generate_204">http://cp.cloudflare.com/generate_204</a></li><li><a href="http://www.qualcomm.cn/generate_204">http://www.qualcomm.cn/generate_204</a></li><li><a href="http://clients3.google.com/generate_204">http://clients3.google.com/generate_204</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dbs结项报告</title>
    <link href="/2022/09/03/dbs%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/"/>
    <url>/2022/09/03/dbs%E7%BB%93%E9%A1%B9%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<center>    <font size="10"><bold>使用命令行参数启动微型虚拟机</bold></font>    <br/><br/></center><h1 id="1-项目实现方案研究"><a class="markdownIt-Anchor" href="#1-项目实现方案研究"></a> 1. 📽 项目实现方案研究:</h1><blockquote><p>实现方案给出是为了提供<font color="cyan">可复现性</font></p></blockquote><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>处理器</td><td>AMD® Ryzen 7 4800h with radeon graphics × 16</td></tr><tr><td>内存</td><td>32g</td></tr><tr><td>显卡</td><td>NVIDIA Corporation TU117M [GeForce GTX 1650 Ti Mobile] / NVIDIA GeForce GTX 1650 Ti/PCIe/SSE2</td></tr><tr><td>OS</td><td>Ubuntu 22.04 LTS</td></tr><tr><td>rustc版本</td><td>rustc 1.62.1</td></tr></tbody></table><h2 id="11-参考目标-firecracker"><a class="markdownIt-Anchor" href="#11-参考目标-firecracker"></a> 1.1 🎲 参考目标: <a href="https://github.com/firecracker-microvm/firecracker">firecracker</a></h2><h3 id="111-构建firecracker"><a class="markdownIt-Anchor" href="#111-构建firecracker"></a> 1.1.1 构建<code>firecracker</code></h3><blockquote><p>cargo的使用文档: <a href="https://doc.rust-lang.org/cargo/index.html">https://doc.rust-lang.org/cargo/index.html</a></p><p>如果需要编译其他平台的crate, 可能还需要用rustup添加对应的toolchain, rustup的使用文档: <a href="https://rust-lang.github.io/rustup/index.html">https://rust-lang.github.io/rustup/index.html</a></p></blockquote><ol><li>拉取源码:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/firecracker-microvm/firecracker<br><span class="hljs-built_in">cd</span> firecracker<br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置依赖</p><blockquote><p>构建firecraker依赖于<code>Docker</code>, 我的个人博客上docker的安装笔记可供参考: <a href="https://www.torch-fan.site/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/">Ubuntu上使用Docker</a></p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential clang<br>cargo check <br></code></pre></td></tr></table></figure><ol start="3"><li>构建firecracker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tools/devtool build<br><br><span class="hljs-comment"># release</span><br>tools/devtool build --release<br></code></pre></td></tr></table></figure><h3 id="112-使用firecracker创建虚拟机"><a class="markdownIt-Anchor" href="#112-使用firecracker创建虚拟机"></a> 1.1.2 使用<code>firecracker</code>创建虚拟机</h3><blockquote><p>参考资料: <a href="https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md">https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md</a></p></blockquote><blockquote><p>事实上, 报告的最终目的目的并不在于描述构建firecraker或者使用dbs之类的方式, 而是借助对firecraker的了解来辅助使用命令行参数从<code>DBS</code>中启动一个虚拟机, 因此文档叙述不以线性进行, 将进行跳转, 体现思考的过程.</p></blockquote><p>​使用firecracker创建虚拟机, 需要这些内容:</p><ol><li><code>API socket</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./firecracker --api-sock /tmp/firecracker.socket<br></code></pre></td></tr></table></figure><ol start="2"><li><p><code>Linux kernel</code></p></li><li><p><code>rootfs</code></p></li></ol><p>​因此当我们开始了解<code>DBS</code>时, 需要关注<code>DBS</code>已经具备和不具备的要素,</p><h2 id="12-更进一步"><a class="markdownIt-Anchor" href="#12-更进一步"></a> 1.2 🦌 更进一步</h2><blockquote><p>上面的步骤不存在任何困难, 但我们并不关心是否创建好虚拟机, 而关注在firecracker一开始是如何创建一个虚拟机</p></blockquote><h3 id="121-vmm的对外接口"><a class="markdownIt-Anchor" href="#121-vmm的对外接口"></a> 1.2.1 VMM的对外接口</h3><blockquote><p>定位到<code>src/firecracker/src/main.rs</code>, 关注在<code>api-sock</code>命令行参数</p></blockquote><p>firecracker对虚拟机进行配置主要分为<font color="cyan"><strong>两种形式</strong></font>:</p><ol><li>HTTP API的请求方式进行配置(也可以同时指定配置文件)</li><li>通过指定配置文件的方式进行配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">rootfs_path=$(<span class="hljs-built_in">pwd</span>)<span class="hljs-string">&quot;/hello-rootfs.ext4&quot;</span><br>curl --unix-socket /tmp/firecracker.socket -i \<br>  -X PUT <span class="hljs-string">&#x27;http://localhost/drives/rootfs&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: application/json&#x27;</span>           \<br>  -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span>     \<br>  -d <span class="hljs-string">&quot;&#123;</span><br><span class="hljs-string">        \&quot;drive_id\&quot;: \&quot;rootfs\&quot;,</span><br><span class="hljs-string">        \&quot;path_on_host\&quot;: \&quot;<span class="hljs-variable">$&#123;rootfs_path&#125;</span>\&quot;,</span><br><span class="hljs-string">        \&quot;is_root_device\&quot;: true,</span><br><span class="hljs-string">        \&quot;is_read_only\&quot;: false</span><br><span class="hljs-string">   &#125;&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 不使用API进行配置, 传入配置文件</span><br>./firecracker --api-sock /tmp/firecracker.socket --config-file &lt;path_to_the_configuration_file&gt;<br></code></pre></td></tr></table></figure><blockquote><p>对于DBS而言, 项目最初目标是通过命令行参数进行启动, 而不需要kata的环境, 因此我们可以关注在使用配置文件创建虚拟机的代码逻辑部分, 因此可以关注函数<code>run_without_api</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>  <code>VmResources::from_json</code></p></blockquote><h3 id="122-rootfs和linux-kernel的使用方式"><a class="markdownIt-Anchor" href="#122-rootfs和linux-kernel的使用方式"></a> 1.2.2 rootfs和Linux kernel的使用方式</h3><blockquote><p>要了解rootfs和Linux kernel如何被使用了, 需要从<code>main.rs</code>的<code>run_without_api</code>中, 深入到<code>build_microvm_from_json</code></p></blockquote><ul><li>kernel被以<code>VmmConfig::block_devices</code>的形式传入</li><li>rootfs作为<code>VmmConfig::block_devices</code>配置的一部分进行传入</li><li>至于启动虚拟机等命令, 则可以HTTP API形式, 传递给<code>api_server/src/lib.rs</code>, 接受请求<code>/actions</code>的参数, 并启动配置好的虚拟机</li></ul><blockquote><p>至此, 我们可以带着疑问, 边开始实现我们的项目需求, 边浏览了解firecracker是如何实现的.</p></blockquote><h1 id="2-阶段一-创建命令行前端接口"><a class="markdownIt-Anchor" href="#2-阶段一-创建命令行前端接口"></a> 2. 🔨 阶段一: 创建命令行前端接口</h1><blockquote><p>由于rust编程经验不多, 因此尽可能使用第三方库, 在命令行解析上, 选用<a href="https://github.com/clap-rs/clap">clap</a> (Dual-licensed under <code>Apache 2.0</code> or <code>MIT</code>, 对于DBS而言, 正好可以用<code>Apache 2.0</code>)</p><p><code>clap</code>的使用文档: <a href="https://docs.rs/clap/latest/clap/">https://docs.rs/clap/latest/clap/</a></p></blockquote><h2 id="21-命令行配置项"><a class="markdownIt-Anchor" href="#21-命令行配置项"></a> 2.1 🍨 命令行配置项</h2><blockquote><p>从<a href="https://github.com/kata-containers/kata-containers/tree/runtime-rs">kata-containers</a>的<code>runtime-rs</code>分支中, 可以在<code>dragonball::vm::VmConfigInfo</code>中看到DBS使用的虚拟机配置.</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CpuTopology</span> &#123;<br>    <span class="hljs-comment">/// threads per core to indicate hyperthreading is enabled or not</span><br>    <span class="hljs-keyword">pub</span> threads_per_core: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// cores per die to guide guest cpu topology init</span><br>    <span class="hljs-keyword">pub</span> cores_per_die: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// dies per socket to guide guest cpu topology</span><br>    <span class="hljs-keyword">pub</span> dies_per_socket: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// number of sockets</span><br>    <span class="hljs-keyword">pub</span> sockets: <span class="hljs-type">u8</span>,<br>&#125;<br><br><span class="hljs-meta">#[derive(Clone, Debug, PartialEq)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VmConfigInfo</span> &#123;<br>    <span class="hljs-comment">/// Number of vcpu to start.</span><br>    <span class="hljs-keyword">pub</span> vcpu_count: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// Max number of vcpu can be added</span><br>    <span class="hljs-keyword">pub</span> max_vcpu_count: <span class="hljs-type">u8</span>,<br>    <span class="hljs-comment">/// cpu power management.</span><br>    <span class="hljs-keyword">pub</span> cpu_pm: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// cpu topology information</span><br>    <span class="hljs-keyword">pub</span> cpu_topology: CpuTopology,<br>    <span class="hljs-comment">/// vpmu support level</span><br>    <span class="hljs-keyword">pub</span> vpmu_feature: <span class="hljs-type">u8</span>,<br><br>    <span class="hljs-comment">/// Memory type that can be either hugetlbfs or shmem, default is shmem</span><br>    <span class="hljs-keyword">pub</span> mem_type: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// Memory file path</span><br>    <span class="hljs-keyword">pub</span> mem_file_path: <span class="hljs-type">String</span>,<br>    <span class="hljs-comment">/// The memory size in MiB.</span><br>    <span class="hljs-keyword">pub</span> mem_size_mib: <span class="hljs-type">usize</span>,<br><br>    <span class="hljs-comment">/// sock path</span><br>    <span class="hljs-keyword">pub</span> serial_path: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">String</span>&gt;,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>clap</code>定义命令行参数后，具体内容如下:</p><table><thead><tr><th style="text-align:center">arguments</th><th style="text-align:center">required</th><th style="text-align:center">default value</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center"><code>rootfs</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path to rootfs image.</td></tr><tr><td style="text-align:center"><code>kernel-path</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path of kernel image (Only uncompressed kernel is supported for Dragonball).</td></tr><tr><td style="text-align:center"><code>log-file</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;dbs-cli.log&quot;</code></td><td style="text-align:center">The path to log file</td></tr><tr><td style="text-align:center"><code>log-level</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;Info&quot;</code></td><td style="text-align:center">The logging level.</td></tr><tr><td style="text-align:center"><code>boot-args</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1</code></td><td style="text-align:center">The boot arguments passed to the kernel.</td></tr><tr><td style="text-align:center"><code>is-root</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>true</code></td><td style="text-align:center">Decide the device to be the root boot device or not.</td></tr><tr><td style="text-align:center"><code>is-read-only</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">The driver opened in read-only or not.</td></tr><tr><td style="text-align:center"><code>vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of vcpu to start.</td></tr><tr><td style="text-align:center"><code>max-vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The max number of vpu can be added.</td></tr><tr><td style="text-align:center"><code>cpu-pm</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>0</code></td><td style="text-align:center">vpmu support level.</td></tr><tr><td style="text-align:center"><code>threads-per-core</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Threads per core to indicate hyper-threading is enabled or not.</td></tr><tr><td style="text-align:center"><code>cores-per-die</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Cores per die to guide guest cpu topology init.</td></tr><tr><td style="text-align:center"><code>dies-per-socket</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Dies per socket to guide guest cpu topology.</td></tr><tr><td style="text-align:center"><code>sockets</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of sockets.</td></tr><tr><td style="text-align:center"><code>mem-type</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>shmem</code></td><td style="text-align:center">Memory type that can be either hugetlbfs or shmem.</td></tr><tr><td style="text-align:center"><code>mem-file</code></td><td style="text-align:center">false</td><td style="text-align:center">``</td><td style="text-align:center">Memory file path.</td></tr><tr><td style="text-align:center"><code>initrd-path</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>None</code></td><td style="text-align:center">The path of initrd.</td></tr></tbody></table><h2 id="22-参数相关的注意事项"><a class="markdownIt-Anchor" href="#22-参数相关的注意事项"></a> 2.2 参数相关的注意事项:</h2><p>整个命令行参数最为关键的三个参数是<code>rootfs</code>, <code>kernel-path</code> 和 <code>boot-args</code>. 由于从命令行终端进入vm的console采用的方式是将ttySx的输出重定向到当前终端的stdout, 因此需要确保kernel支持serial console并且rootfs在构建时需要配置好启动之后能够启动对应终端, 否则将无法进入vm. 对于<code>boot-args</code>, <code>console=xx</code>和<code>root=&quot;dev/vda1&quot;</code> 是根据对应rootfs的设置来的, 因此虽然不是必须给出的参数, 但是需要自行查看是否需要有所修改。</p><h1 id="3-阶段二-项目实现思路及问题解决"><a class="markdownIt-Anchor" href="#3-阶段二-项目实现思路及问题解决"></a> 3. 🔥 阶段二： 项目实现思路及问题解决</h1><h2 id="31-命令行参数"><a class="markdownIt-Anchor" href="#31-命令行参数"></a> 3.1 命令行参数：</h2><p>​根据firecraker和kata-container现有代码，确定启动虚拟机必备参数后，便可直接用<code>clap</code>提供的一些<code>derive</code>来定义命令行参数，参数项见上表，暂无问题出现。</p><h2 id="32-进入vm终端"><a class="markdownIt-Anchor" href="#32-进入vm终端"></a> 3.2 进入vm终端：</h2><p>​基于现有kata-container的一些创建vm、启动vm、创建设备等API，只需进行简单的修改调用即可完成。但是最后在IO上出现问题，具体可以描述为创建vm的标准输入输出终端时，<code>com1</code>未将输出重定向到stdout，导致无法与vm进行交互。</p><p>​解决方法，为<code>com1</code>设置输出流并重定向到<code>stdout</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">device.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">set_output_stream</span>(<span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(std::io::<span class="hljs-title function_ invoke__">stdout</span>())));<br></code></pre></td></tr></table></figure><h2 id="33-基本原理-serial-console"><a class="markdownIt-Anchor" href="#33-基本原理-serial-console"></a> 3.3 基本原理： <code>serial console</code></h2><ul><li><a href="https://www.kernel.org/doc/html/latest/admin-guide/serial-console.html">Linux Serial Console — The Linux Kernel documentation</a></li><li><a href="https://tldp.org/HOWTO/Serial-HOWTO-10.html">Serial HOWTO: Serial Port Devices /dev/ttyS2, etc. (tldp.org)</a></li></ul><blockquote><p>下图为串口对应终端名以及IO地址</p></blockquote><p><img src="https://s1.ax1x.com/2022/08/29/vfSKR1.png" alt="" /></p><p><code>kata-container</code>在<code>runtime-rs</code>分支下，com2被用来输出日志信息（同时也将dmesg也写入logger了），因此只能使用设备com1连接到对应的终端。</p><blockquote><p><code>console=device,options</code> 用来指定终端的输出，该参数放在kernel的启动参数中。</p><p><code>device</code>可能的值为：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">tty0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> foreground virtual console<br>                ttyX <span class="hljs-keyword">for</span> <span class="hljs-keyword">any</span> other virtual console<br>                ttySx <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> serial port<br>                lp0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> parallel port<br>                ttyUSB0 <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> USB serial device<br></code></pre></td></tr></table></figure></blockquote><p>在<code>kata-container</code>仓库<code>runtime-rs</code>分支的现有代码下，已经有通过socket进入serial console的代码，但是从命令行将stdio重定向到虚拟机serial console的代码却不能达到正常预期。在通过反复浏览代码，通过<code>3.2</code>中的修改，解决了无法创建stdio console的问题，再加上此前实现的命令行参数解析，整个流程就已经完成了。</p><h1 id="4-项目成果展示"><a class="markdownIt-Anchor" href="#4-项目成果展示"></a> 4. 项目成果展示：</h1><h2 id="41-本地开发仓库"><a class="markdownIt-Anchor" href="#41-本地开发仓库"></a> 4.1 本地开发仓库：</h2><p>仓库地址： <a href="https://github.com/QiliangFan/kata-containers">https://github.com/QiliangFan/kata-containers</a></p><p>分支：<code>runtime-rs</code></p><h2 id="42-pull-request"><a class="markdownIt-Anchor" href="#42-pull-request"></a> 4.2  pull request:</h2><ul><li><p><a href="https://github.com/openanolis/dbs-cli/pull/1">Create VM from command line arguments #1</a></p></li><li><p><a href="https://github.com/kata-containers/kata-containers/pull/5082">dragonball: Fix problem that stdio console cannot connect to stdout #5082</a></p></li></ul><h2 id="43-运行示例与结果截图"><a class="markdownIt-Anchor" href="#43-运行示例与结果截图"></a> 4.3 运行示例与结果截图:</h2><blockquote><p>为了结果易于复现，使用了firecraker项目的kernel和rootfs(方便用户下载， 当然其他支持serial console的内核和rootfs也可以)，如需运行此CLI，可前往<a href="https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md">firecracker/getting-started.md at main · firecracker-microvm/firecracker (github.com)</a>下载并使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli --kernel-path ~/data/build/dbs/firecracker/vmlinux.bin --rootfs ~/data/build/dbs/firecracker/bionic.rootfs.ext4 --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/08/27/vRc536.png" alt="进入vm" /></p><p><img src="https://s1.ax1x.com/2022/08/27/vRczgf.png" alt="输入指令" /></p><h2 id="44-可通过命令行配置的参数"><a class="markdownIt-Anchor" href="#44-可通过命令行配置的参数"></a> 4.4 可通过命令行配置的参数：</h2><table><thead><tr><th style="text-align:center">arguments</th><th style="text-align:center">required</th><th style="text-align:center">default value</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center"><code>rootfs</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path to rootfs image.</td></tr><tr><td style="text-align:center"><code>kernel-path</code></td><td style="text-align:center">true</td><td style="text-align:center">-</td><td style="text-align:center">The path of kernel image (Only uncompressed kernel is supported for Dragonball).</td></tr><tr><td style="text-align:center"><code>log-file</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;dbs-cli.log&quot;</code></td><td style="text-align:center">The path to log file</td></tr><tr><td style="text-align:center"><code>log-level</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>&quot;Info&quot;</code></td><td style="text-align:center">The logging level.</td></tr><tr><td style="text-align:center"><code>boot-args</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1</code></td><td style="text-align:center">The boot arguments passed to the kernel.</td></tr><tr><td style="text-align:center"><code>is-root</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>true</code></td><td style="text-align:center">Decide the device to be the root boot device or not.</td></tr><tr><td style="text-align:center"><code>is-read-only</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>false</code></td><td style="text-align:center">The driver opened in read-only or not.</td></tr><tr><td style="text-align:center"><code>vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of vcpu to start.</td></tr><tr><td style="text-align:center"><code>max-vcpu</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The max number of vpu can be added.</td></tr><tr><td style="text-align:center"><code>cpu-pm</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>0</code></td><td style="text-align:center">vpmu support level.</td></tr><tr><td style="text-align:center"><code>threads-per-core</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Threads per core to indicate hyper-threading is enabled or not.</td></tr><tr><td style="text-align:center"><code>cores-per-die</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Cores per die to guide guest cpu topology init.</td></tr><tr><td style="text-align:center"><code>dies-per-socket</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">Dies per socket to guide guest cpu topology.</td></tr><tr><td style="text-align:center"><code>sockets</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>1</code></td><td style="text-align:center">The number of sockets.</td></tr><tr><td style="text-align:center"><code>mem-type</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>shmem</code></td><td style="text-align:center">Memory type that can be either hugetlbfs or shmem.</td></tr><tr><td style="text-align:center"><code>mem-file</code></td><td style="text-align:center">false</td><td style="text-align:center">``</td><td style="text-align:center">Memory file path.</td></tr><tr><td style="text-align:center"><code>initrd-path</code></td><td style="text-align:center">false</td><td style="text-align:center"><code>None</code></td><td style="text-align:center">The path of initrd.</td></tr></tbody></table><h2 id="45-使用示例"><a class="markdownIt-Anchor" href="#45-使用示例"></a> 4.5 使用示例:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/rootfs.dmg \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure><p>For the rootfs from firecracker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/bionic.rootfs.ext4 \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda&quot;</span> ;<br></code></pre></td></tr></table></figure><p>For the rootfs build from kata:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/kata-containers.img \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure><p>Set the log level and log file:</p><blockquote><p>The log-level argument is case-insensitive: ErrOR and InFO are valid.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dbs-cli \<br>  --log-file dbs-cli.log --log-level ERROR \<br>  --kernel-path ~/data/build/dbs/vmlinux.bin \<br>  --rootfs ~/data/build/dbs/kata-containers.img \<br>  --boot-args <span class="hljs-string">&quot;console=ttyS0 tty0 reboot=k debug panic=1 pci=off root=/dev/vda1&quot;</span> ;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux个人使用指令收集</title>
    <link href="/2022/08/24/Linux%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
    <url>/2022/08/24/Linux%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-socketserial"><a class="markdownIt-Anchor" href="#1-socketserial"></a> 1. Socket/Serial</h1><blockquote><p>登陆绑定在socket上的console</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># console.sock 改为对应的socket地址</span><br>socat <span class="hljs-string">&quot;stdin,raw,echo=0,escape=0x11&quot;</span> <span class="hljs-string">&quot;unix-connect:[console.sock]&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib的常用设置</title>
    <link href="/2022/08/23/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/08/23/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-backend"><a class="markdownIt-Anchor" href="#1-backend"></a> 1. backend</h1><blockquote><p>有时保存的图片不只是png, 可能还需要pdf, 因此设置可以设置好backedn</p><p>参考资料: <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=backend">https://matplotlib.org/stable/api/matplotlib_configuration_api.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">matplotlib.use(&quot;pdf&quot;);<br></code></pre></td></tr></table></figure><ul><li>interactive backends: GTK3Agg, GTK3Cairo, GTK4Agg, GTK4Cairo, MacOSX, nbAgg, QtAgg, QtCairo, TkAgg, TkCairo, WebAgg, WX, WXAgg, WXCairo, Qt5Agg, Qt5Cairo</li><li>non-interactive backends: agg, cairo, pdf, pgf, ps, svg, template</li></ul><h1 id="2-rcparams"><a class="markdownIt-Anchor" href="#2-rcparams"></a> 2. rcParams</h1><blockquote><p>可设置的属性列表: <a href="https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams#matplotlib.rcParams">https://matplotlib.org/stable/api/matplotlib_configuration_api.html?highlight=rcparams#matplotlib.rcParams</a></p></blockquote><h2 id="21-dpi-涉及清晰度"><a class="markdownIt-Anchor" href="#21-dpi-涉及清晰度"></a> 2.1 DPI (涉及清晰度)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams[<span class="hljs-string">&#x27;figure.dpi&#x27;</span>] = <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h2 id="22-字体"><a class="markdownIt-Anchor" href="#22-字体"></a> 2.2 字体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.rcParams.update(&#123;<br>    <span class="hljs-string">&quot;font.size&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&#x27;font.sans-serif&#x27;</span>: <span class="hljs-string">&quot;simsun&quot;</span>  <span class="hljs-comment"># SimHei</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="221-ubuntu支持中文"><a class="markdownIt-Anchor" href="#221-ubuntu支持中文"></a> 2.2.1 ubuntu支持中文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看matplotlib配置文件位置</span><br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-built_in">print</span>(matplotlib.matplotlib_fname())<br><span class="hljs-comment"># 如: /APP/anaconda/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入字体库</span><br><span class="hljs-built_in">cd</span> ~/APP/anaconda/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf<br><br><span class="hljs-comment"># 清除缓存</span><br><span class="hljs-built_in">rm</span> ~/.cache/matplotlib<br><br><span class="hljs-comment"># 将simsun.ttf复制到该目录下即可</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Python</category>
      
      <category>Matplotlib</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kernel和rootfs镜像构建</title>
    <link href="/2022/08/15/kernel%E5%92%8Crootfs%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <url>/2022/08/15/kernel%E5%92%8Crootfs%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-创建rootfs"><a class="markdownIt-Anchor" href="#1-创建rootfs"></a> 1. 创建rootfs:</h1><p>在Linux上自带<code>mkfs</code>指令, 用于创建文件系统.</p><p><img src="https://s1.ax1x.com/2022/08/15/vdcuFA.png" alt="mkfs" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个容量为512MB的根文件系统</span><br>mkfs -t ext4 rootfs.ext4 512M<br></code></pre></td></tr></table></figure><h1 id="2-构建vmlinux-elf文件-内核编译最原始的文件-可被rust的linux-loader加载"><a class="markdownIt-Anchor" href="#2-构建vmlinux-elf文件-内核编译最原始的文件-可被rust的linux-loader加载"></a> 2. 构建vmlinux (ELF文件, 内核编译最原始的文件, 可被rust的<code>linux-loader</code>加载)</h1><blockquote><p>参考文档: <a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel">https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel</a></p></blockquote><h2 id="21-下载内核源码"><a class="markdownIt-Anchor" href="#21-下载内核源码"></a> 2.1 下载内核源码:</h2><p>源码仓库: <a href="https://www.kernel.org/">https://www.kernel.org/</a></p><h2 id="22-安装依赖"><a class="markdownIt-Anchor" href="#22-安装依赖"></a> 2.2 安装依赖:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf git<br></code></pre></td></tr></table></figure><h2 id="23-配置内核"><a class="markdownIt-Anchor" href="#23-配置内核"></a> 2.3 配置内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># optional: 复制本机的配置</span><br><span class="hljs-built_in">cp</span> -v /boot/config-$(<span class="hljs-built_in">uname</span> -r) .config<br><br><span class="hljs-built_in">chmod</span> +x ./scripts/*<br>make menuconfig<br></code></pre></td></tr></table></figure><p>从内核源码根目录的makefile中, 可以看到默认就是vmlinux, 暂时也不需要去考虑vmlinuz的压缩问题.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># The all: target is the default when no target is given on the</span><br><span class="hljs-comment"># command line.</span><br><span class="hljs-comment"># This allow a user to issue only &#x27;make&#x27; to build a kernel including modules</span><br><span class="hljs-comment"># Defaults to vmlinux, but the arch makefile usually adds further targets</span><br><span class="hljs-section">all: vmlinux</span><br></code></pre></td></tr></table></figure><p>构建内核</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust错误处理</title>
    <link href="/2022/08/02/Rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <url>/2022/08/02/Rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里不复述文档和教程中有的内容, 比如<code>Result</code>之类的细节, 可以自行看文档内容:</p><ul><li><p><a href="https://learning-rust.github.io/docs/e7.custom_error_types.html">https://learning-rust.github.io/docs/e7.custom_error_types.html</a></p></li><li><p><a href="https://doc.rust-lang.org/book/ch09-00-error-handling.html">https://doc.rust-lang.org/book/ch09-00-error-handling.html</a></p></li></ul><p>参考资料: <a href="https://www.philipdaniels.com/blog/2019/defining-rust-error-types/">https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</a></p></blockquote><h1 id="1-rust中自定义error的方式"><a class="markdownIt-Anchor" href="#1-rust中自定义error的方式"></a> 1. Rust中自定义Error的方式</h1><h2 id="11-定义一个错误类型"><a class="markdownIt-Anchor" href="#11-定义一个错误类型"></a> 1.1 定义一个错误类型:</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyErorType</span> &#123;<br>    <span class="hljs-comment">// Errors from external libraries..</span><br>    <span class="hljs-title function_ invoke__">Io</span>(io::Error),<br>    <span class="hljs-title function_ invoke__">Git</span>(git2::Error),<br>    <span class="hljs-comment">// Errors raised by us...</span><br>    <span class="hljs-title function_ invoke__">Regular</span>(ErrorKind),<br>    <span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-type">String</span>)<br>&#125;<br><br><span class="hljs-meta">#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ErrorKind</span> &#123;<br>    NotFound,<br>    NotAuthorized,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ErrorKind</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">as_str</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            ErrorKind::NotFound =&gt; <span class="hljs-string">&quot;not found&quot;</span>,<br>            ErrorKind::NotAuthorized =&gt; <span class="hljs-string">&quot;not authorized&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-实现error和display这两个trait"><a class="markdownIt-Anchor" href="#12-实现error和display这两个trait"></a> 1.2 实现<code>Error</code>和<code>Display</code>这两个trait</h2><blockquote><p><code>Error</code>只允许返回静态字符串常量</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Error</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">description</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">description</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">description</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">as_str</span>(),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-keyword">ref</span> err) =&gt; err,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>fmt::Display</code>更为灵活一点</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmt</span>(&amp;<span class="hljs-keyword">self</span>, f: &amp;<span class="hljs-keyword">mut</span> fmt::Formatter) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">fmt</span>(f),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(<span class="hljs-keyword">ref</span> err) =&gt; err.<span class="hljs-title function_ invoke__">fmt</span>(f),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(<span class="hljs-keyword">ref</span> err) =&gt; <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;A regular error occurred &#123;:?&#125;&quot;</span>, err),<br>            MyErrorType::<span class="hljs-title function_ invoke__">Custom</span>(<span class="hljs-keyword">ref</span> err) =&gt; <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;A custom error occurred &#123;:?&#125;&quot;</span>, err),<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-为external-error-type实现from"><a class="markdownIt-Anchor" href="#13-为external-error-type实现from"></a> 1.3 为external error type实现<code>From</code></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(err: io::Error) <span class="hljs-punctuation">-&gt;</span> MyErrorType &#123;<br>        MyErrorType::<span class="hljs-title function_ invoke__">Io</span>(err)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyErrorType</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(err: git2::Error) <span class="hljs-punctuation">-&gt;</span> MyErrorType &#123;<br>        MyErrorType::<span class="hljs-title function_ invoke__">Git</span>(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用起来就可以这样, 在捕获异常的代码片段中:</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">MyErrorType::<span class="hljs-title function_ invoke__">From</span>(err)<br></code></pre></td></tr></table></figure><h2 id="14-可选-创建一个result别名"><a class="markdownIt-Anchor" href="#14-可选-创建一个result别名"></a> 1.4 可选: 创建一个Result别名</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">Result</span>&lt;T&gt; = std::result::<span class="hljs-type">Result</span>&lt;T, MyErrorType&gt;;<br></code></pre></td></tr></table></figure><h2 id="15-使用自定义的类型"><a class="markdownIt-Anchor" href="#15-使用自定义的类型"></a> 1.5 使用自定义的类型:</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">some_func</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">usize</span>&gt; &#123;<br>    <span class="hljs-comment">// possible: std::io::Error</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_f</span> = std::fs::File::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-string">&quot;aa&quot;</span>)?;<br>    <span class="hljs-comment">// possible: git2::Error</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_g</span> = Respository::<span class="hljs-title function_ invoke__">init</span>(<span class="hljs-string">&quot;/path/to/repo&quot;</span>)?;<br><br>    <span class="hljs-comment">// return a error</span><br>    <span class="hljs-title function_ invoke__">Err</span>(MyErrorType::<span class="hljs-title function_ invoke__">Regular</span>(ErrorKind::NotAuthorized));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-rust-中使用-thiserror-和-anyhow-简洁-好用"><a class="markdownIt-Anchor" href="#2-rust-中使用-thiserror-和-anyhow-简洁-好用"></a> 2. Rust 中使用 <code>thiserror</code> 和 <code>anyhow</code> (简洁, 好用)</h1><blockquote><p><code>thiserror</code>文档: <a href="https://docs.rs/thiserror/latest/thiserror/">https://docs.rs/thiserror/latest/thiserror/</a></p><p><code>anyhow</code>文档: <a href="https://github.com/dtolnay/anyhow">https://github.com/dtolnay/anyhow</a></p><p>这两个库主要还是为了某些库里处理数量众多的异常类型, 可以解决兼容, 但还需要额外处理</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> anyhow::<span class="hljs-type">Result</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;()&gt; &#123;  <span class="hljs-comment">// ~~接收任意类型异常~~</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-错误类型映射"><a class="markdownIt-Anchor" href="#3-错误类型映射"></a> 3. 错误类型映射</h1><blockquote><p>前面所作的努力只是为了兼容, 但是rust并不会主动去做, 转换工作还是得自己来</p></blockquote><h2 id="31-map_err"><a class="markdownIt-Anchor" href="#31-map_err"></a> 3.1 <code>map_err</code></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::env;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">double_arg</span>(<span class="hljs-keyword">mut</span> argv: env::Args) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, <span class="hljs-type">String</span>&gt; &#123;<br>    argv.<span class="hljs-title function_ invoke__">nth</span>(<span class="hljs-number">1</span>)<br>        .<span class="hljs-title function_ invoke__">ok_or</span>(<span class="hljs-string">&quot;Please give at least one argument&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>())<br>        .<span class="hljs-title function_ invoke__">and_then</span>(|arg| arg.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map_err</span>(|err| err.<span class="hljs-title function_ invoke__">to_string</span>()))<br>        .<span class="hljs-title function_ invoke__">map</span>(|n| <span class="hljs-number">2</span> * n)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">match</span> <span class="hljs-title function_ invoke__">double_arg</span>(env::<span class="hljs-title function_ invoke__">args</span>()) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(err) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, err),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 这里是用构造函数做lambda函数了</span><br>cmdline.<span class="hljs-title function_ invoke__">insert_str</span>(boot_args)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(BootSourceConfigError::InvalidKernelCommandLine)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(VmmActionError::BootSource)<br>    .<span class="hljs-title function_ invoke__">map_err</span>(CLIError::BootSource)?;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LaTex基础-Table</title>
    <link href="/2022/08/02/LaTex%E5%9F%BA%E7%A1%80-Table/"/>
    <url>/2022/08/02/LaTex%E5%9F%BA%E7%A1%80-Table/</url>
    
    <content type="html"><![CDATA[<figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;[pos]&#123;cols&#125;<br><br>  table content<br><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><p>where options can be:</p><ul><li><code>pos</code> : Vertical position. It can assume the following values:</li></ul><table><thead><tr><th><code>t</code></th><th>the line at the top is aligned with the text baseline (可以理解为一横文字的底部基线, 所有文字在这个基线上排布)</th></tr></thead><tbody><tr><td><code>b</code></td><td>the line at the bottom is aligned with the text baseline</td></tr><tr><td><code>c</code> or none</td><td>the table is centred to the text baseline</td></tr></tbody></table><ul><li><code>cols</code> : Defines the alignment and the borders of each column. It can have the following values:</li></ul><table><thead><tr><th><code>l</code></th><th>left-justified column</th></tr></thead><tbody><tr><td><code>c</code></td><td>centred column</td></tr><tr><td><code>r</code></td><td>right-justified column</td></tr><tr><td><code>p&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned at the top</td></tr><tr><td><code>m&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned in the middle (requires <code>array</code><br /> package)</td></tr><tr><td><code>b&#123;'width'&#125;</code></td><td>paragraph column with text vertically aligned at the bottom (requires <code>array</code><br /> package)</td></tr><tr><td><code>&amp;#124;</code></td><td>vertical line</td></tr><tr><td><code>&amp;#124;&amp;#124;</code></td><td>double vertical line</td></tr><tr><td><code>*&#123;num&#125;&#123;form&#125;</code></td><td>the format form is repeated <em>num</em> times; for example <code>*&#123;3&#125;&#123;&amp;#124;l&#125;&amp;#124;</code><br /> is equal to <code>&amp;#124;l&amp;#124;l&amp;#124;l&amp;#124;</code></td></tr></tbody></table><p>To separate between cells and introducing new lines use the following commands:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>column separator</td></tr><tr><td><code>\\\\</code></td><td>start new row (additional space may be specified after <code>\\</code><br /> using square brackets, such as <code>\\[6pt]</code><br />)</td></tr><tr><td><code>\\hline</code></td><td>horizontal line between rows</td></tr><tr><td><code>\\newline</code></td><td>start a new line within a cell (in a paragraph column)</td></tr><tr><td><code>\\cline&#123;i-j&#125;</code></td><td>partial horizontal line beginning in column <em>i</em> and ending in column <em>j</em></td></tr></tbody></table><h1 id="1-用table制作封面"><a class="markdownIt-Anchor" href="#1-用table制作封面"></a> 1. 用table制作封面:</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% 用于制作更复杂的封面</span><br><span class="hljs-keyword">\title</span>&#123;<span class="hljs-keyword">\makebox</span>&#123;<br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;img/nankai.jpg&#125; <span class="hljs-keyword">\\</span><br>         <span class="hljs-keyword">\textbf</span>&#123;课程报告&#125; <span class="hljs-keyword">\\</span><br>         xxxxxx<br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">\author</span>&#123;<span class="hljs-keyword">\makebox</span>&#123;<br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;<br>        姓名： <span class="hljs-built_in">&amp;</span> xxxx  <span class="hljs-keyword">\\</span><br>        学号： <span class="hljs-built_in">&amp;</span> xxxx<br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\today</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-将表格进行整体缩放并不推荐-除非迫不得已"><a class="markdownIt-Anchor" href="#2-将表格进行整体缩放并不推荐-除非迫不得已"></a> 2. 将表格进行整体缩放(并不推荐, 除非迫不得已)</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\resizebox</span>&#123;<span class="hljs-keyword">\textwidth</span>&#125;&#123;15mm&#125;&#123;<br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;<br>    <span class="hljs-keyword">\hline</span><br>    <span class="hljs-keyword">\ </span> <span class="hljs-built_in">&amp;</span> 平均运行时间(单位: s) <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\hline</span><br>    训练阶段 <span class="hljs-built_in">&amp;</span> 2333.5593 <span class="hljs-keyword">\\</span><br>    测试阶段 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ </span> <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;  <span class="hljs-comment">% 只能包含tabular 不能包含文本 如 \caption</span><br></code></pre></td></tr></table></figure><h1 id="3-整体调整每一列宽度"><a class="markdownIt-Anchor" href="#3-整体调整每一列宽度"></a> 3. 整体调整每一列宽度</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\setlength</span>&#123;<span class="hljs-keyword">\tabcolsep</span>&#125;&#123;7mm&#125;&#123;<br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cccccc&#125; <br>    <span class="hljs-keyword">\toprule</span><br>    Models  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span> c<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\alpha</span><span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>0<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>1<span class="hljs-built_in">$</span>  <span class="hljs-built_in">&amp;</span>  <span class="hljs-built_in">$</span><span class="hljs-keyword">\hat</span><span class="hljs-keyword">\beta</span><span class="hljs-built_in">_</span>2<span class="hljs-built_in">$</span>  <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>    model  <span class="hljs-built_in">&amp;</span> 30.6302  <span class="hljs-built_in">&amp;</span> 0.4127  <span class="hljs-built_in">&amp;</span> 9.4257  <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 12.4089  <span class="hljs-built_in">&amp;</span> 0.5169  <span class="hljs-built_in">&amp;</span> 18.6986  <span class="hljs-built_in">&amp;</span> -6.6157  <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 14.8586  <span class="hljs-built_in">&amp;</span> 0.4991  <span class="hljs-built_in">&amp;</span> 19.5421  <span class="hljs-built_in">&amp;</span> -7.0717  <span class="hljs-built_in">&amp;</span> 0.2183  <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 3.06302  <span class="hljs-built_in">&amp;</span> 0.41266  <span class="hljs-built_in">&amp;</span> 0.11725  <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 1.24089  <span class="hljs-built_in">&amp;</span> 0.51691  <span class="hljs-built_in">&amp;</span> 0.83605  <span class="hljs-built_in">&amp;</span> -0.66157  <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span><br>    model  <span class="hljs-built_in">&amp;</span> 1.48586  <span class="hljs-built_in">&amp;</span> 0.49906  <span class="hljs-built_in">&amp;</span> 0.95609  <span class="hljs-built_in">&amp;</span> -0.70717  <span class="hljs-built_in">&amp;</span> 0.02183  <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><br>    <span class="hljs-keyword">\caption</span>&#123;哈哈哈&#125;<br>  <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>&#125;  <span class="hljs-comment">% 这个可以包含很多元素</span><br></code></pre></td></tr></table></figure><h1 id="4-设置列高"><a class="markdownIt-Anchor" href="#4-设置列高"></a> 4.  设置列高</h1><blockquote><p><code>\rule&#123;线的宽度&#125;&#123;线撑起的高度&#125;</code></p><p>线设置为0pt宽度, 就可以起到撑起单元格的作用了</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\ </span> <span class="hljs-built_in">&amp;</span> 平均运行时间(单位: s) <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-keyword">\rule</span>&#123;0pt&#125;&#123;8pt&#125;训练阶段 <span class="hljs-built_in">&amp;</span> 2333.5593 <span class="hljs-keyword">\\</span><br>  测试阶段 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ </span> <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><h1 id="5-三线表"><a class="markdownIt-Anchor" href="#5-三线表"></a> 5. 三线表</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125; <br><span class="hljs-keyword">\usepackage</span>&#123;float&#125;<span class="hljs-comment">%提供float浮动环境</span><br><span class="hljs-keyword">\usepackage</span>&#123;booktabs&#125;<span class="hljs-comment">%提供命令\toprule、\midrule、\bottomrule</span><br> <br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br> <br>  <span class="hljs-comment">%经典三线表</span><br>  <span class="hljs-keyword">\begin</span>&#123;table&#125;[H]<br>    <span class="hljs-keyword">\caption</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;Example 1&#125;&#125;<span class="hljs-comment">%标题</span><br>    <span class="hljs-keyword">\centering</span><span class="hljs-comment">%把表居中</span><br>    <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#123;80pt&#125;c&#123;80pt&#125;c&#123;80pt&#125;c&#123;80pt&#125;&#125;<span class="hljs-comment">%四个c代表该表一共四列，内容全部居中</span><br>    <span class="hljs-keyword">\toprule</span><span class="hljs-comment">%第一道横线</span><br>    Item 1<span class="hljs-built_in">&amp;</span>Item 2<span class="hljs-built_in">&amp;</span>Item 3<span class="hljs-built_in">&amp;</span>Item 4 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\midrule</span><span class="hljs-comment">%第二道横线 </span><br>    Data1<span class="hljs-built_in">&amp;</span>Data2<span class="hljs-built_in">&amp;</span>Data3<span class="hljs-built_in">&amp;</span>Data4 <span class="hljs-keyword">\\</span><br>    Data5<span class="hljs-built_in">&amp;</span>Data6<span class="hljs-built_in">&amp;</span>Data7<span class="hljs-built_in">&amp;</span>Data8 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><span class="hljs-comment">%第三道横线</span><br>    <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>  <span class="hljs-keyword">\end</span>&#123;table&#125;<br> <br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h1 id="6-复杂表格"><a class="markdownIt-Anchor" href="#6-复杂表格"></a> 6. 复杂表格</h1><blockquote><p>多列表格中用<code>\cline</code> 控制哪几列有横线: <code>\cline&#123;3-5&#125;</code> 表示第3列和第5列有横线.</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% 如果要间隔一列加横线只要两个指令就行</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;llrr&#125; <br>  a <span class="hljs-built_in">&amp;</span>b <span class="hljs-built_in">&amp;</span>c <span class="hljs-built_in">&amp;</span>d <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;3-4&#125; <br>  e <span class="hljs-built_in">&amp;</span>f <span class="hljs-built_in">&amp;</span>g <span class="hljs-built_in">&amp;</span>h <br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果用了<code>booktabs</code>, 想要<code>\cline</code>类似的多列横线, 则可以使用<code>\cmidrule</code>, 这个比<code>\midrule</code>更细</p></blockquote><p><img src="https://img1.imgtp.com/2022/08/02/VIxH5MFg.png" alt="解释" /></p><p><img src="https://img1.imgtp.com/2022/08/02/L8Ict2Bp.png" alt="解释2" /></p><hr /><blockquote><p>\usepackage{multirow}</p></blockquote><blockquote><p><code>\multirow&#123;nrows&#125;[bigstruct]&#123;width&#125;[fixup]&#123;text&#125;</code></p><ul><li>nrows: 占用的行数</li><li>bigstructs: 可选, 在使用了bigstruct宏包时用</li><li>width: 该栏宽度, 如果为*则由LaTex自行决定</li><li>fixup: 可选项, 调整文本的垂直位置</li><li>text: 所要排版的文本, 可以用 \ 强制换行</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-comment">%跨行（将两行合并为一行） 第一个参数指明跨几行 记得下一行对应位置空出来 不然会重叠, 第二个参数是宽度</span><br>  <span class="hljs-keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;1&#125; <span class="hljs-built_in">&amp;</span> 11 <span class="hljs-built_in">&amp;</span> 111 <span class="hljs-built_in">&amp;</span> 1111 <span class="hljs-built_in">&amp;</span> 11111 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\cline</span>&#123;2-5&#125;<br>   <span class="hljs-built_in">&amp;</span> 22 <span class="hljs-built_in">&amp;</span> 222 <span class="hljs-built_in">&amp;</span> 2222 <span class="hljs-built_in">&amp;</span> 22222 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  3 <span class="hljs-built_in">&amp;</span> 33 <span class="hljs-built_in">&amp;</span> 333 <span class="hljs-built_in">&amp;</span> 3333 <span class="hljs-built_in">&amp;</span> 33333 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>\multicolumn&#123;ncols&#125;&#123;指明对齐方式以及方格线&#125;&#123;单元格内容&#125;</code></p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|c|&#125;<br>  <span class="hljs-keyword">\hline</span><br>  <span class="hljs-comment">% after \\: \hline or \cline&#123;col1-col2&#125; \cline&#123;col3-col4&#125; ...</span><br>  <span class="hljs-comment">%跨列（将两列合并为一列）第一个参数指明跨几列  第二个参数指明内容居中并在左右两边画上直线 最后一个参数是表格内容</span><br>  <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;|c|&#125;&#123;1&#125;  <span class="hljs-built_in">&amp;</span> 111 <span class="hljs-built_in">&amp;</span> 1111 <span class="hljs-built_in">&amp;</span> 11111 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>   2 <span class="hljs-built_in">&amp;</span> 22 <span class="hljs-built_in">&amp;</span> 222 <span class="hljs-built_in">&amp;</span> 2222 <span class="hljs-built_in">&amp;</span> 22222 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br>  3 <span class="hljs-built_in">&amp;</span> 33 <span class="hljs-built_in">&amp;</span> 333 <span class="hljs-built_in">&amp;</span> 3333 <span class="hljs-built_in">&amp;</span> 33333 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><h1 id="7-表格的列方向上分散对齐"><a class="markdownIt-Anchor" href="#7-表格的列方向上分散对齐"></a> 7. 表格的列方向上分散对齐</h1><blockquote><p><code>\makebox[width][position]&#123;text&#125;</code></p><p><code>\makebox[4em][s]&#123;content&#125;</code></p><ul><li>l - left</li><li>r - right</li><li>s - interword space adjusted so text fills box exactly</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;rl&#125;<br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;论文题目&#125;：        <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@title</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;专<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;业&#125;：<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@major</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;博<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;士<span class="hljs-keyword">\hspace</span>&#123;<span class="hljs-keyword">\fill</span>&#125;生&#125;：      <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@author</span><span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\makebox</span>[4em][s]&#123;指导教师&#125;：        <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\@advisorname</span> <span class="hljs-keyword">\,</span><span class="hljs-keyword">\,</span> <span class="hljs-keyword">\@advisortitle</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>表格内换行</li></ol><blockquote><p><code>\makecell</code></p></blockquote><p><img src="https://img1.imgtp.com/2022/08/02/LNe2NvOn.png" alt="解释" /></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>&#123;makecell&#125;<br><br><span class="hljs-comment">% ...</span><br><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;<br>  <span class="hljs-keyword">\makecell</span>[l]&#123;a <span class="hljs-keyword">\\</span> b <span class="hljs-keyword">\\</span> c &#125; <span class="hljs-built_in">&amp;</span> 1 <span class="hljs-keyword">\\</span>  <span class="hljs-comment">% 用于单元格内换行</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><p>除了使用<code>\makecell</code>外, 还可以用嵌套tabular的方式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;cccc&#125;<br>    <span class="hljs-keyword">\toprule</span><br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;c&#125;<br>            物理机<span class="hljs-keyword">\\</span>资源类型<br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>          <span class="hljs-built_in">&amp;</span> CPU资源（单位：核） <span class="hljs-built_in">&amp;</span> 内存资源（单位：G） <span class="hljs-built_in">&amp;</span> 机器数量 <span class="hljs-keyword">\\</span><br>     <span class="hljs-keyword">\hline</span><br>         类型一 <span class="hljs-built_in">&amp;</span>  32  <span class="hljs-built_in">&amp;</span> 64 <span class="hljs-built_in">&amp;</span> 6000 <span class="hljs-keyword">\\</span><br>         类型二 <span class="hljs-built_in">&amp;</span> 92 <span class="hljs-built_in">&amp;</span> 288 <span class="hljs-built_in">&amp;</span> 3000 <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\bottomrule</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><ol start="9"><li>设置合理列宽</li></ol><blockquote><p>需要导入<code>makecell</code>包</p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% p&#123;xpt&#125; 可以指定每一列的宽度， 但是这样就没有t, c, b 对齐的作用了, 但是可以自动换行!</span><br><br><span class="hljs-keyword">\begin</span>&#123;table &#125;[ htbp]<br>  <span class="hljs-keyword">\centering</span><br>  <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;p&#123;80 pt&#125;p&#123;80 pt&#125;p&#123;80 pt&#125;&#125;<br>  <span class="hljs-keyword">\toprule</span><br>  操作系统 <span class="hljs-built_in">&amp;</span> 发行版 <span class="hljs-built_in">&amp;</span> 编辑器 <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\midrule</span><br>  Windows <span class="hljs-built_in">&amp;</span> MikTeX <span class="hljs-built_in">&amp;</span> TexMakerX <span class="hljs-keyword">\\</span><br>   Unix/Linux <span class="hljs-built_in">&amp;</span> teTeX <span class="hljs-built_in">&amp;</span> Kile <span class="hljs-keyword">\\</span><br>  Mac OS <span class="hljs-built_in">&amp;</span> MacTeX <span class="hljs-built_in">&amp;</span> TeXShop <span class="hljs-keyword">\\</span><br>   通用 <span class="hljs-built_in">&amp;</span> TeX Live <span class="hljs-built_in">&amp;</span> TeXworks <span class="hljs-keyword">\\</span><br>  <span class="hljs-keyword">\bottomrule</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-comment">% p&#123;80pt&#125;&lt;&#123;\centering&#125;</span><br><br><span class="hljs-keyword">\begin</span>&#123;table &#125;[ htbp]<br> <span class="hljs-keyword">\centering</span><br>  <span class="hljs-keyword">\begin</span>&#123;tabular &#125;&#123;p&#123;80 pt&#125;&lt;&#123;<span class="hljs-keyword">\centering</span>&#125;p&#123;80 pt&#125;&lt;&#123;<span class="hljs-keyword">\raggedleft</span><span class="hljs-keyword">\arraybackslash</span> &#125;p&#123;80 pt&#125;&#125;<br> <span class="hljs-keyword">\toprule</span><br>操作系统 <span class="hljs-built_in">&amp;</span> 发行版 <span class="hljs-built_in">&amp;</span> 编辑器 <span class="hljs-keyword">\\</span><br> <span class="hljs-keyword">\midrule</span><br>Windows <span class="hljs-built_in">&amp;</span> MikTeX <span class="hljs-built_in">&amp;</span> TexMakerX <span class="hljs-keyword">\\</span><br> Unix/Linux <span class="hljs-built_in">&amp;</span> teTeX <span class="hljs-built_in">&amp;</span> Kile <span class="hljs-keyword">\\</span><br>Mac OS <span class="hljs-built_in">&amp;</span> MacTeX <span class="hljs-built_in">&amp;</span> TeXShop <span class="hljs-keyword">\\</span><br> 通用 <span class="hljs-built_in">&amp;</span> TeX Live <span class="hljs-built_in">&amp;</span> TeXworks <span class="hljs-keyword">\\</span><br> <span class="hljs-keyword">\bottomrule</span><br> <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br></code></pre></td></tr></table></figure><h1 id="9-将表旋转90度显示"><a class="markdownIt-Anchor" href="#9-将表旋转90度显示"></a> 9. 将表旋转90度显示</h1><blockquote><p>使用宏包<code>rotating</code></p><p>将<code>table</code>环境改为<code>sidewaytable</code></p><ul><li><code>\usepackage[figuresleft]&#123;rotating&#125;</code>: 顺时针90度</li><li><code>\usepackage[figuresright]&#123;rotating&#125;</code>: 逆时针90度</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>[figuresright]&#123;rotating&#125;<br><br><span class="hljs-comment">%...</span><br><br><span class="hljs-keyword">\begin</span>&#123;sidewaystable&#125;[htp]<br><span class="hljs-keyword">\caption</span>&#123;This is a caption&#125;  <br><span class="hljs-keyword">\centering</span>  <span class="hljs-comment">%表格整体居中</span><br>  <span class="hljs-keyword">\footnotesize</span>  <span class="hljs-comment">%设置字体</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;l*&#123;7&#125;&#123;L&#123;3cm&#125;&#125;&#125; <span class="hljs-comment">%共7列，每一列列宽为3cm</span><br>    <span class="hljs-comment">%...</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\end</span>&#123;sidewaystable&#125;<br></code></pre></td></tr></table></figure><h1 id="multicolumn-小结"><a class="markdownIt-Anchor" href="#multicolumn-小结"></a> multicolumn 小结</h1><ul><li><code>m&#123;5cm&#125;</code>: 居中</li><li><code>p&#123;5cm&#125;</code>: 顶部</li><li><code>b&#123;5cm&#125;</code>: 底部</li></ul><p><img src="https://img1.imgtp.com/2022/08/02/UMYQll70.png" alt="multicolumn的位置设置" /></p><h2 id="1-垂直居中"><a class="markdownIt-Anchor" href="#1-垂直居中"></a> 1. 垂直居中</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;center&#125;<br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|l|l|l|l|&#125;<br><span class="hljs-keyword">\hline</span><br>Day <span class="hljs-built_in">&amp;</span> Min Temp <span class="hljs-built_in">&amp;</span> Max Temp <span class="hljs-built_in">&amp;</span> Summary <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><span class="hljs-comment">% 注意, multicolumn中 | 会覆盖全局的边框设置, 不加的话, 对应单元格也没边框</span><br>Monday <span class="hljs-built_in">&amp;</span> 11C <span class="hljs-built_in">&amp;</span> 22C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|p&#123;5cm&#125;|&#125;&#123;A clear day with lots of sunshine. However, the strong breeze will bring down the temperatures.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br>Tuesday <span class="hljs-built_in">&amp;</span> 9C <span class="hljs-built_in">&amp;</span> 19C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|m&#123;5cm&#125;|&#125;&#123;Cloudy with rain, across many northern regions. Clear spells across most of Scotland and Northern Ireland, but rain reaching the far northwest.&#125; <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">\hline</span><br>Wednesday <span class="hljs-built_in">&amp;</span> 10C <span class="hljs-built_in">&amp;</span> 21C <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|b&#123;5cm&#125;|&#125;&#123;Rain will still linger for the morning. Conditions will improve by early afternoon and continue throughout the evening.&#125; <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><br><span class="hljs-keyword">\end</span>&#123;center&#125;<br></code></pre></td></tr></table></figure><h2 id="2-垂直且水平居中"><a class="markdownIt-Anchor" href="#2-垂直且水平居中"></a> 2. 垂直且水平居中</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[a4paper,twoside,12pt]&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;amsbsy&#125;<span class="hljs-comment">%</span><br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;array&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;calc&#125;<br><span class="hljs-keyword">\newcolumntype</span>&#123;N&#125;&#123;&gt;&#123;<span class="hljs-keyword">\centering</span><span class="hljs-keyword">\arraybackslash</span>&#125;m&#123;.5in&#125;&#125;  <span class="hljs-comment">% \arraybackslash 就是那个 \\</span><br><span class="hljs-keyword">\newcolumntype</span>&#123;G&#125;&#123;&gt;&#123;<span class="hljs-keyword">\bfseries</span><span class="hljs-keyword">\centering</span><span class="hljs-keyword">\arraybackslash</span>&#125;m&#123;2in+6<span class="hljs-keyword">\tabcolsep</span>&#125;&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;table&#125;[H]<br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;*&#123;9&#125;&#123;N|&#125;&#125;<br><span class="hljs-keyword">\cline</span>&#123;2-9&#125;<br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;N|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;4&#125;&#123;G|&#125;&#123;Emissions (Pre Catalytic Converter)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;4&#125;&#123;G|&#125;&#123;Emissions (Post Catalytic Converter)&#125; <span class="hljs-keyword">\tabularnewline</span>  <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|N|&#125;&#123;<span class="hljs-keyword">\textbf</span>&#123;Dyno Load (<span class="hljs-keyword">\%</span>)&#125;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;CO (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;HC (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;Nox (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\boldsymbol</span>&#123;<span class="hljs-keyword">\mathrm</span>&#123;CO<span class="hljs-built_in">_</span>2&#125;&#125;<span class="hljs-built_in">$</span> (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;CO (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;HC (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;Nox (ppm)&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\boldsymbol</span>&#123;<span class="hljs-keyword">\mathrm</span>&#123;CO<span class="hljs-built_in">_</span>2&#125;&#125;<span class="hljs-built_in">$</span> (<span class="hljs-keyword">\%</span>)&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|N|&#125;&#123;10&#125; <span class="hljs-built_in">&amp;</span> 0.77 <span class="hljs-built_in">&amp;</span> 23 <span class="hljs-built_in">&amp;</span> 523 <span class="hljs-built_in">&amp;</span> 14.0 <span class="hljs-built_in">&amp;</span> 0.09 <span class="hljs-built_in">&amp;</span> 18 <span class="hljs-built_in">&amp;</span> 130 <span class="hljs-built_in">&amp;</span> 13.8 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;30&#125; <span class="hljs-built_in">&amp;</span> 0.78 <span class="hljs-built_in">&amp;</span> 13 <span class="hljs-built_in">&amp;</span> 555 <span class="hljs-built_in">&amp;</span> 14.2 <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;70&#125; <span class="hljs-built_in">&amp;</span> 0.70 <span class="hljs-built_in">&amp;</span> 14 <span class="hljs-built_in">&amp;</span> 580 <span class="hljs-built_in">&amp;</span> 14.4 <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-built_in">&amp;</span> - <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;90&#125; <span class="hljs-built_in">&amp;</span> 0.74 <span class="hljs-built_in">&amp;</span> 15 <span class="hljs-built_in">&amp;</span> 630 <span class="hljs-built_in">&amp;</span> 14.5 <span class="hljs-built_in">&amp;</span> 0.70 <span class="hljs-built_in">&amp;</span> 15 <span class="hljs-built_in">&amp;</span> 618 <span class="hljs-built_in">&amp;</span> 14.6 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\multicolumn</span>&#123;1&#125;&#123;|c|&#125;&#123;Neutral&#125; <span class="hljs-built_in">&amp;</span> 0.06 <span class="hljs-built_in">&amp;</span> 7 <span class="hljs-built_in">&amp;</span> 21 <span class="hljs-built_in">&amp;</span> 15.6 <span class="hljs-built_in">&amp;</span> 0.06 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 27 <span class="hljs-built_in">&amp;</span> 15.7 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><span class="hljs-keyword">\caption</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;&#125;&#125;<br><span class="hljs-keyword">\label</span>&#123;2000Emissions&#125;<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h2 id="3-newcolumntype是如何工作的呢"><a class="markdownIt-Anchor" href="#3-newcolumntype是如何工作的呢"></a> 3. <code>newcolumntype是如何工作的呢?</code></h2><blockquote><p>详情可见: <a href="https://tex.stackexchange.com/questions/257128/how-does-the-newcolumntype-command-work">https://tex.stackexchange.com/questions/257128/how-does-the-newcolumntype-command-work</a></p></blockquote><blockquote><p><code>\arraybackslash</code></p></blockquote><blockquote><p>As for <code>\arraybackslash</code>, the <code>\raggedright</code>, <code>\raggedleft</code>, and <code>\centering</code> declarations refine <code>\</code> in a way that conflicts with its use in a tabular or array environments. The command <code>\arraybackslash</code> (implemented in array and tabularx) restoresthe meaning of <code>\</code> for use in array and tabular (you would only need <code>\arraybackslash</code> for the last column).</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>文档撰写</category>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex小技巧</title>
    <link href="/2022/07/29/LaTex%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/07/29/LaTex%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="1-符号"><a class="markdownIt-Anchor" href="#1-符号"></a> 1. 符号</h1><blockquote><p><code>~</code>: 波浪号表示一个空格, 但又不只是一个空格, 波浪号左右的内容不允许换行截断, 在用<code>A~\cite&#123;name&#125;</code>引用时, 名字和引用就不会因换行而截断了.</p></blockquote><p><code>\checkmark</code>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">✓</mi></mrow><annotation encoding="application/x-tex">\checkmark</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord amsrm">✓</span></span></span></span></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>文档撰写</category>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex基础-Figure</title>
    <link href="/2022/07/28/LaTex%E5%9F%BA%E7%A1%80-Figure/"/>
    <url>/2022/07/28/LaTex%E5%9F%BA%E7%A1%80-Figure/</url>
    
    <content type="html"><![CDATA[<h1 id="1-子图"><a class="markdownIt-Anchor" href="#1-子图"></a> 1. 子图</h1><blockquote><p>注意, 子图和正常的figure也是一样有caption的, 也可以加<code>\label</code>, 为了突出重点就不搞复杂了. 下面是一般要引入的package</p><p><code>\usepackages&#123;subcaption&#125;</code></p><p><code>\usepackage&#123;graphicx&#125;</code></p></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;<br>    <span class="hljs-keyword">\centering</span><br>    <span class="hljs-keyword">\begin</span>&#123;subfigure&#125;&#123;0.4<span class="hljs-keyword">\textwidth</span>&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;example-image&#125;<br>    <span class="hljs-keyword">\end</span>&#123;subfigure&#125;<br>    <span class="hljs-comment">% 这里很微妙, 如果没有这个\quad, 两个子图会垂直并列, 加上后就是水平并列</span><br>    <span class="hljs-comment">% 使用 \hfill 也能起到让子图水平并列的作用 </span><br>    <span class="hljs-comment">% 当然如果水平摆不下, 剩余的图还是会去下一行挤</span><br>    <span class="hljs-keyword">\quad</span> <br>    <span class="hljs-keyword">\begin</span>&#123;subfigure&#125;&#123;0.4<span class="hljs-keyword">\textwidth</span>&#125;<br>        <span class="hljs-keyword">\includegraphics</span>[width=<span class="hljs-keyword">\textwidth</span>]&#123;example-image&#125;<br>    <span class="hljs-keyword">\end</span>&#123;subfigure&#125;<br>    <br>    <span class="hljs-keyword">\caption</span>&#123;The common architecture of a recurrent VAE. &#125;<br>    <span class="hljs-keyword">\label</span>&#123;fig:recurrent<span class="hljs-built_in">_</span>vae&#125;<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>文档撰写</category>
      
      <category>LaTex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git工具用法小结</title>
    <link href="/2022/07/27/git%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <url>/2022/07/27/git%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="1-submodule"><a class="markdownIt-Anchor" href="#1-submodule"></a> 1. <code>submodule</code></h1><blockquote><p>有时候, 遇到复杂的项目会存在submodule, 要拉取这样的仓库, 需要这样. (至于如何给自己的项目添加一个submodule, git官方给了例子, 就不复制了)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull remote main<br>git submodule update --init <span class="hljs-comment"># 初始化submodule以及拉取其代码</span><br>git submodule update &lt;submodule-name&gt; <span class="hljs-comment"># 获取submodule的远程更新, 也可以不指定名字, 全部更新.</span><br></code></pre></td></tr></table></figure><h1 id="2-commit"><a class="markdownIt-Anchor" href="#2-commit"></a> 2. <code>commit</code></h1><blockquote><p><code>-i</code> 表示进入交互模式</p><p><code>HEAD~10</code> 表示目标是从HEAD向前(更早)的10次提交</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~10<br></code></pre></td></tr></table></figure><p>随后打开一个交互界面, 将<code>pick</code>都替换为<code>squash</code>, !!! 除了最顶上那行的<code>pick</code>保留, 那是<code>HEAD</code>指针所指向的最新提交. 最后保存文件退出即可.</p><p>退出后, 会进入另一个文件, 这里是编辑commit的提交信息的, 每个合并的commit其信息会被合并在一起, 因此是否修改可以看需求, 一般直接退出就行了.</p><p>这里是rebase中其他可供使用的命令:</p><blockquote><p>命令:<br />p, pick &lt;提交&gt; = 使用提交</p><p>r, reword &lt;提交&gt; = 使用提交，但编辑提交说明</p><p>e, edit &lt;提交&gt; = 使用提交，但停止以便在 shell 中修补提交</p><p>s, squash &lt;提交&gt; = 使用提交，但挤压到前一个提交</p><p>f, fixup [-C | -c] &lt;提交&gt; = 类似于 “squash”，但只保留前一个提交<br />的提交说明，除非使用了 -C 参数，此情况下则只<br />保留本提交说明。使用 -c 和 -C 类似，但会打开<br />编辑器修改提交说明</p><p>x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）</p><p>b, break = 在此处停止（使用 ‘git rebase --continue’ 继续变基）</p><p>d, drop &lt;提交&gt; = 删除提交</p><p>l, label <label> = 为当前 HEAD 打上标记</p><p>t, reset <label> = 重置 HEAD 到该标记</p><p>m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]<br />.       创建一个合并提交，并使用原始的合并提交说明（如果没有指定<br />.       原始提交，使用注释部分的 oneline 作为提交说明）。使用<br />.       -c &lt;提交&gt; 可以编辑提交说明。</p><p>可以对这些行重新排序，将从上至下执行。</p><p>如果您在这里删除一行，对应的提交将会丢失。</p><p>然而，如果您删除全部内容，变基操作将会终止。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Git</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust使用中遇到的问题</title>
    <link href="/2022/07/26/Rust%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/26/Rust%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里整理的问题有可能并非问题, 而是使用过程中对语法\rust版本特性的不熟悉导致, 会先行记录, 等了解其背后的原理会补充解释.</p></blockquote><h1 id="1-编程日常"><a class="markdownIt-Anchor" href="#1-编程日常"></a> 1. 编程日常</h1><h2 id="1-类型不匹配"><a class="markdownIt-Anchor" href="#1-类型不匹配"></a> 1. 类型不匹配:</h2><blockquote><p>在使用一个类型时, 通常会采用<code>use</code>语句, 然而又有一些库它不使用<code>use</code>而直接以全路径引用类型,在调用函数时, 明明是同一个类型,确因为一个是简写, 一个是全路径,导致无法匹配类型而报错.</p></blockquote><p>这时, 要检查一下, 所使用的函数来自哪个库(用<code>A</code>指代), 然后变量的类型来自哪个库(用<code>B</code>), 这里<code>A</code>必定使用了<code>B</code>, 而你所使用的<code>B</code>与<code>A</code>使用的<code>B</code>版本不同. 这时候就要去看<code>B</code>的版本, 把你用的版本改一下, 不过这在rust 2021edition存在, 需要能尽快改进.</p><h2 id="2-cargo-update报错"><a class="markdownIt-Anchor" href="#2-cargo-update报错"></a> 2. <code>cargo update</code>报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Updating crates.io index<br>error: failed to select a version <span class="hljs-keyword">for</span> the requirement `vmm-sys-util = <span class="hljs-string">&quot;^0.10.0&quot;</span>`<br>candidate versions found <span class="hljs-built_in">which</span> didn<span class="hljs-string">&#x27;t match: 0.9.0</span><br><span class="hljs-string">location searched: crates.io index</span><br><span class="hljs-string">required by package `dbs-legacy-devices v0.1.0 (/home/fanqiliang/data/project/active/dbs/crates/dbs-legacy-devices)`</span><br></code></pre></td></tr></table></figure><p>这种情况是: 你的项目是一个workspace, 然后不同component用了相同的crate, 但是之间有依赖关系, 只能手动改了…</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust基础用法</title>
    <link href="/2022/07/21/Rust%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
    <url>/2022/07/21/Rust%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>还是觉得只有列出参考资料的必要, 至于必须强调的细节才会主动列出</p></blockquote><h1 id="1-cargo"><a class="markdownIt-Anchor" href="#1-cargo"></a> 1. Cargo</h1><blockquote><p>参考资料: <a href="https://doc.rust-lang.org/cargo/index.html">https://doc.rust-lang.org/cargo/index.html</a></p></blockquote><p>如果需要添加一个依赖, 以<a href="https://docs.rs/clap/latest/clap/">clap</a>为例:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cargo <span class="hljs-built_in">add</span> clap <span class="hljs-comment">--features derive</span><br></code></pre></td></tr></table></figure><h1 id="2-rustup"><a class="markdownIt-Anchor" href="#2-rustup"></a> 2. Rustup</h1><blockquote><p>参考资料: <a href="https://rust-lang.github.io/rustup/index.html">https://rust-lang.github.io/rustup/index.html</a></p></blockquote><h1 id="crates"><a class="markdownIt-Anchor" href="#crates"></a> Crates</h1><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">doc</th><th style="text-align:center">desc</th></tr></thead><tbody><tr><td style="text-align:center">clap</td><td style="text-align:center"><a href="https://docs.rs/clap">https://docs.rs/clap</a></td><td style="text-align:center">热门的CLI参数解析库</td></tr></tbody></table><h1 id="3-常见用法"><a class="markdownIt-Anchor" href="#3-常见用法"></a> 3. 常见用法:</h1><h2 id="31-raw-string"><a class="markdownIt-Anchor" href="#31-raw-string"></a> 3.1 raw string</h2><blockquote><p>raw string:</p><p><code>r#&quot;...&quot;#</code> 使用r#…# 包裹的字符串内容不会被转义</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">data</span> = <span class="hljs-string">r#&quot;</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="hljs-string">            &quot;age&quot;: 43,</span><br><span class="hljs-string">            &quot;phones&quot;: [</span><br><span class="hljs-string">                &quot;+44 1234567&quot;,</span><br><span class="hljs-string">                &quot;+44 2345678&quot;</span><br><span class="hljs-string">            ]</span><br><span class="hljs-string">        &#125;&quot;#</span>;<br></code></pre></td></tr></table></figure><h2 id="32-socket"><a class="markdownIt-Anchor" href="#32-socket"></a> 3.2 socket</h2><blockquote><p>Socket编程: 注意, socket通信, 只有绑定了一个socket才能监听接受消息, 即: 只有socket是单向通信的</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-keyword">use</span> std::thread;<br><span class="hljs-keyword">use</span> std::os::unix::net::&#123;UnixStream, UnixListener&#125;;<br><span class="hljs-keyword">use</span> std::println;<br><span class="hljs-keyword">use</span> std::io::prelude::*;<br><span class="hljs-keyword">use</span> std::time::Duration;<br><span class="hljs-keyword">use</span> std::io::&#123;BufWriter, BufReader, Read&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_client</span>(stream:  UnixStream) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">read_stream</span> = BufReader::<span class="hljs-title function_ invoke__">new</span>(&amp;stream);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">res</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">// for line in read_stream.lines() &#123;</span><br>    <span class="hljs-comment">//     println!(&quot;Server: &#123;&#125;&quot;, line.unwrap());</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// read_lines is not recommended: as a new line ch is required.</span><br>    read_stream.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> res).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Server: &#123;res:?&#125;&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> std::io::<span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">socket</span> = std::path::Path::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;/tmp/dbs.socks&quot;</span>);<br>    <span class="hljs-keyword">if</span> socket.<span class="hljs-title function_ invoke__">exists</span>() &#123;<br>        std::fs::<span class="hljs-title function_ invoke__">remove_file</span>(socket).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// server</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t1</span> = thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">listener</span> = UnixListener::<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-string">&quot;/tmp/dbs.socks&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>        <span class="hljs-keyword">for</span> <span class="hljs-title class_">mut</span> stream <span class="hljs-keyword">in</span> listener.<span class="hljs-title function_ invoke__">incoming</span>() &#123;<br>            <span class="hljs-keyword">match</span> stream &#123;<br>                <span class="hljs-title function_ invoke__">Ok</span>(stream ) =&gt; &#123;<br>                    <span class="hljs-comment">/* connection succeeded */</span><br>                    thread::<span class="hljs-title function_ invoke__">spawn</span>(|| <span class="hljs-title function_ invoke__">handle_client</span>(stream));<br>                    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;bingo&quot;</span>);<br>                &#125;<br>                <span class="hljs-title function_ invoke__">Err</span>(err) =&gt; &#123;<br>                    <span class="hljs-comment">/* connection failed */</span><br>                    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, err);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;);<br><br>    thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">2000</span>));<br><br>    <span class="hljs-comment">// client</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t2</span> =thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;<br>        <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;, soc.)</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">10</span> &#123;<br><br>            <span class="hljs-comment">// each request for one connection (Otherwise, the streaming is recognized as one transfer process)</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">soc</span> = UnixStream::<span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-string">&quot;/tmp/dbs.socks&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            soc.<span class="hljs-title function_ invoke__">write_all</span>(<span class="hljs-string">b&quot;Hello! dsa\n&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            <span class="hljs-comment">// let mut reader = BufReader::new(&amp;soc);</span><br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;send&quot;</span>);<br>            thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">200</span>));<br>        &#125;<br><br>    &#125;);<br><br>    t1.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    t2.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br><br><br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="33-错误处理"><a class="markdownIt-Anchor" href="#33-错误处理"></a> 3.3 错误处理</h2><blockquote><p><code>?</code>可以用在Option后面, 也可以用在Result后面, 但在一个函数中, 如果返回值是Result, 则不能用在Option后, 否则有返回None的风险, 类型不一致, 但可以用<code>ok_or</code>来解决</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::io::ErrorKind;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">test</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), std::io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">res</span> = <span class="hljs-title function_ invoke__">do</span>(<span class="hljs-title function_ invoke__">A</span>().<span class="hljs-title function_ invoke__">ok_or</span>(ErrorKin::AddrInUse)?)?;<br>    res<br>&#125;<br></code></pre></td></tr></table></figure><p>通过ok_or, 将Option的矛盾上升到Error层面, 就好处理的得多了.</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu上使用docker</title>
    <link href="/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/"/>
    <url>/2022/07/21/Ubuntu%E4%B8%8A%E4%BD%BF%E7%94%A8docker/</url>
    
    <content type="html"><![CDATA[<h1 id="1-安装docker"><a class="markdownIt-Anchor" href="#1-安装docker"></a> 1. 安装Docker</h1><h2 id="11-安装kvm"><a class="markdownIt-Anchor" href="#11-安装kvm"></a> 1.1 安装KVM</h2><blockquote><p>参考: <a href="https://ubuntu.com/blog/kvm-hyphervisor">https://ubuntu.com/blog/kvm-hyphervisor</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install bridge-utils cpu-checker libvirt-clients libvirt-daemon qemu qemu-kvm<br></code></pre></td></tr></table></figure><blockquote><p>检查虚拟化功能</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kvm-ok<br></code></pre></td></tr></table></figure><h2 id="12-安装docker"><a class="markdownIt-Anchor" href="#12-安装docker"></a> 1.2 安装Docker</h2><blockquote><p>参考资料: <a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>我对Docker Desktop并不感兴趣, 因此选择安装无图形界面的<code>Docker Engine</code></p></blockquote><ol><li>卸载旧版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure><ol start="2"><li>设置软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install ca-certificates curl gnupg lsb-release<br>sudo <span class="hljs-built_in">mkdir</span> -p /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br>sudo apt-get update<br></code></pre></td></tr></table></figure><ol start="3"><li>安装Docker Engine</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure><ol start="4"><li>配置权限</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo groupadd docker <br>sudo groupadd libvirt<br>sudo groupadd kvm<br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">docker</span><br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">libvirt</span><br>sudo adduser $<span class="hljs-keyword">USER</span> <span class="hljs-title">kvm</span><br>newgrp kvm<br>newgrp docker<br>newgrp libvirt<br></code></pre></td></tr></table></figure><blockquote><p><code>newgrp</code>用于重新以对应群组身份登陆</p></blockquote><h1 id="2-docker-的常用命令"><a class="markdownIt-Anchor" href="#2-docker-的常用命令"></a> 2. Docker 的常用命令</h1><p>构建镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker build -f <span class="hljs-tag">&lt;<span class="hljs-name">dockerfile</span>&gt;</span> -t <span class="hljs-tag">&lt;<span class="hljs-name">image_name:tag</span>&gt;</span> .<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>虚拟化应用</category>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网站的Header--安全设置</title>
    <link href="/2022/07/21/%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/07/21/%E7%BD%91%E7%AB%99%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料: <a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy">https://infosec.mozilla.org/guidelines/web_security#content-security-policy</a></p></blockquote><p>这是我主页的CSP设置, CSP的设置可以有效防止XSS. 如需使用, 只要替换或添加自己需要的域名即可~</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;img-src &#x27;self&#x27; image.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">    script-src &#x27;unsafe-inline&#x27; &#x27;self&#x27;lib.baomitu.com at.alicdn.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">    style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; at.alicdn.com lib.baomitu.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">    media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">    worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">    object-src &#x27;self&#x27; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是, 可以看到<code>script-src</code>中有<code>unsafe-inline</code>, 这仍然不是非常安全, 因此可以去掉, 然后添加script的hash值(不用担心不知道, 浏览器的console中会打印被屏蔽的javascript脚本的hash值, 复制粘贴即可):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;img-src &#x27;self&#x27; imagebed.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">script-src  &#x27;self&#x27;lib.baomitu.com at.alicdn.com &#x27;sha256-u0AitIxF7N0hYtvjq/jQbABXtOYAsJnJeCFoRizdaDM=&#x27; &#x27;sha256-cPZda3lIu6/tDfdRIA6fN74jCn3QXC9sg4vsBi+VW6w=&#x27; &#x27;sha256-gX0IeNsFB1Hts7cNk8JTGzzl9RcNAI+59T2fVUJBw1I=&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">style-src &#x27;self&#x27; at.alicdn.com lib.baomitu.com &#x27;sha256-quaYMDAFArRHzQDsZzJMSjqcQCtz+UUgFIbN2a8TIQc=&#x27; &#x27;sha256-NK4ORibhZQrqK59KJ1o+jAxvEYk2UPVOV0Wgggbfaek=&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">object-src &#x27;self&#x27; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方法也有个缺陷, 对于需要反复构建的网站, 内联script的hash值并非一成不变的, 此时就需要用<code>nonce-&lt;v&gt;</code></p><blockquote><p>Nonces 是通过在 CSP 中指定允许资源的序号，达到限制非法 inline 代码的目的。只有与 CSP 策略中序号一致的代码可以执行，具体使用方式如下(CSS就没必要搞安全了-或者说没那么重要)：</p><p><code>Content-Security-Policy: script-src 'nonce-1'</code></p><p><code>&lt;script nonce=&quot;1&quot;&gt;alert(0);&lt;/script&gt;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;img-src &#x27;self&#x27; imagebed.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">script-src &#x27;self&#x27; lib.baomitu.com at.alicdn.com utteranc.es &#x27;nonce-1&#x27; &#x27;nonce-2&#x27; &#x27;nonce-3&#x27; &#x27;nonce-4&#x27; &#x27;nonce-5&#x27; &#x27;nonce-6&#x27; &#x27;nonce-7&#x27; &#x27;nonce-8&#x27; &#x27;nonce-9&#x27; &#x27;nonce-10&#x27; &#x27;nonce-11&#x27; &#x27;nonce-12&#x27; &#x27;nonce-13&#x27; &#x27;nonce-14&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; at.alicdn.com lib.baomitu.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">object-src &#x27;self&#x27; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后, 根据<a href="https://observatory.mozilla.org/analyze/www.torch-fan.site">mozilla observatory</a>的网站扫描结果, 最终网站的安全设置如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;none&#x27;; form-action &#x27;none&#x27;; base-uri &#x27;self&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">img-src &#x27;self&#x27; imagebed.torch-fan.site img1.imgtp.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">script-src &#x27;self&#x27; lib.baomitu.com at.alicdn.com utteranc.es &#x27;nonce-1&#x27; &#x27;nonce-2&#x27; &#x27;nonce-3&#x27; &#x27;nonce-4&#x27; &#x27;nonce-5&#x27; &#x27;nonce-6&#x27; &#x27;nonce-7&#x27; &#x27;nonce-8&#x27; &#x27;nonce-9&#x27; &#x27;nonce-10&#x27; &#x27;nonce-11&#x27; &#x27;nonce-12&#x27; &#x27;nonce-13&#x27; &#x27;nonce-14&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; at.alicdn.com lib.baomitu.com;</span></span><br><span class="hljs-string"><span class="hljs-tag">media-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">worker-src &#x27;self&#x27; blob:;</span></span><br><span class="hljs-string"><span class="hljs-tag">object-src &#x27;self&#x27;;</span></span><br><span class="hljs-string"><span class="hljs-tag">font-src &#x27;self&#x27; lib.baomitu.com at.alicdn.com data:;</span></span><br><span class="hljs-string"><span class="hljs-tag">frame-src &#x27;self&#x27; utteranc.es; &quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Modules</title>
    <link href="/2022/07/21/modules/"/>
    <url>/2022/07/21/modules/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料: <a href="https://doc.rust-lang.org/reference/items/modules.html">https://doc.rust-lang.org/reference/items/modules.html</a></p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Syntax:<br><span class="hljs-keyword">Module</span> :<br>      <span class="hljs-keyword">unsafe</span>? <span class="hljs-keyword">mod</span> IDENTIFIER <span class="hljs-punctuation">;</span><br>   | <span class="hljs-keyword">unsafe</span>? <span class="hljs-keyword">mod</span> IDENTIFIER <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">        InnerAttribute*</span><br><span class="hljs-comment">        Item*</span><br><span class="hljs-comment">      &#125;</span><br></code></pre></td></tr></table></figure><p><code>module</code>和类型享有相同的命名空间, 不能出现重名的现象. <code>unsafe</code>关键词在rust很多地方都可以用, 其详细作用留待后续补充.<br />一个<code>module</code>通常由花括号的内容进行定义, 如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><span class="hljs-keyword">mod</span> math &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Complex</span> = (<span class="hljs-type">f64</span>, <span class="hljs-type">f64</span>);<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sin</span>(f: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">/* ... */</span><br>      <span class="hljs-built_in">unimplemented!</span>();<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cos</span>(f: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">/* ... */</span><br>      <span class="hljs-built_in">unimplemented!</span>();<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">tan</span>(f: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">/* ... */</span><br>      <span class="hljs-built_in">unimplemented!</span>();<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1-module-source-filenames"><a class="markdownIt-Anchor" href="#1-module-source-filenames"></a> 1. Module Source Filenames</h1><p>上面是一种<code>mod</code>关键词的使用, 另一种是声明一个<code>module</code>, 但是不具备主体. 如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> rvmm;<br></code></pre></td></tr></table></figure><p>这类<code>module</code>的主体是从文件中加载的. 当<code>mod</code>语句没有<code>path</code>属性时, module文件的路径会根据module的名称进行推理, 见下表, 这样就能组织起<code>module</code>的树形结构了</p><table><thead><tr><th style="text-align:center">Module Path</th><th style="text-align:center">File Path</th><th style="text-align:center">Contents</th></tr></thead><tbody><tr><td style="text-align:center">crate</td><td style="text-align:center"><a href="http://lib.rs">lib.rs</a></td><td style="text-align:center"><code>mod util;</code></td></tr><tr><td style="text-align:center">crate::util</td><td style="text-align:center"><a href="http://util.rs">util.rs</a></td><td style="text-align:center"><code>mod config;</code></td></tr><tr><td style="text-align:center">crate::util::config</td><td style="text-align:center">util/config.rs</td><td style="text-align:center"></td></tr></tbody></table><p>事实上, <code>module</code>对应的名字也可以是一个文件夹, 只要该文件夹下有<code>mod.rs</code>.</p><p>注意, 使用<code>mod</code>语句, 只是将一个module添加到module分支树的当前节点上, 还需要用<code>use</code>语句进行导入~</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> vmm_action;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> self::vmm_action::*;<br></code></pre></td></tr></table></figure><h1 id="2-the-path-attribute"><a class="markdownIt-Anchor" href="#2-the-path-attribute"></a> 2. The path attribute</h1><p>有时候, <code>module</code>的名字必须与文件或者文件夹绑定过于死板, 因此可以指定<code>path</code>属性, 单独设置. 这时又存在两种情况:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[path = <span class="hljs-string">&quot;foo.rs&quot;</span>]</span><br><span class="hljs-keyword">mod</span> c;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Source File</th><th><code>c</code>'s File Location</th><th><code>c</code>'s Module Path</th></tr></thead><tbody><tr><td><code>src/a/b.rs</code></td><td><code>src/a/foo.rs</code></td><td><code>crate::a::b::c</code></td></tr><tr><td><code>src/a/mod.rs</code></td><td><code>src/a/foo.rs</code></td><td><code>crate::a::c</code></td></tr></tbody></table><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> inline &#123;<br>    <span class="hljs-meta">#[path = <span class="hljs-string">&quot;other.rs&quot;</span>]</span><br>    <span class="hljs-keyword">mod</span> inner;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Source File</th><th><code>inner</code>'s File Location</th><th><code>inner</code>'s Module Path</th></tr></thead><tbody><tr><td><code>src/a/b.rs</code></td><td><code>src/a/b/inline/other.rs</code></td><td><code>crate::a::b::inline::inner</code></td></tr><tr><td><code>src/a/mod.rs</code></td><td><code>src/a/inline/other.rs</code></td><td><code>crate::a::inline::inner</code></td></tr></tbody></table><blockquote><p><code>mod-rs</code>指的是根模块(例如<code>lib.rs</code>或者<code>main.rs</code>)和<code>mod.rs</code> (用来将目录作为module)</p></blockquote><p>对于第一种情况, <code>path</code>属性的设置在<code>inline module</code>之外, 指定的文件的相对路径是相对于当前源文件所在目录. 注意源文件是<code>mod-rs</code>还是<code>non-mod-rs</code>其在module tree中的位置不一样~ 可以对比第一个表来判断</p><p>对于第二种情况, 也分为<code>mod-rs</code>和<code>non-mod-rs</code>两种情况, 其实本质差不多, 最终归结为module的定义形式</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>Items</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu常用的指令和配置</title>
    <link href="/2022/07/21/Ubuntu%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/21/Ubuntu%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-装机后的常用指令"><a class="markdownIt-Anchor" href="#1-装机后的常用指令"></a> 1. 装机后的常用指令</h1><ol><li>安装驱动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ubuntu-drivers autoinstall  <br>sudo apt install xorg-server-source<br>sudo apt install nvidia-cudnn<br></code></pre></td></tr></table></figure><blockquote><p><code>ubuntu-drivers devices</code>  可以列出推荐的显卡驱动版本, 手动装更好(不会只装最新的)</p></blockquote><ol start="2"><li>安装开发工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential net-tools curl<br></code></pre></td></tr></table></figure><ol start="3"><li>维护</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo resolvectl flush-caches <span class="hljs-comment"># 清除DNS缓存</span><br></code></pre></td></tr></table></figure><h1 id="2-配置网络"><a class="markdownIt-Anchor" href="#2-配置网络"></a> 2. 配置网络</h1><h2 id="21-配置tcp缓存非必须-效果不明显"><a class="markdownIt-Anchor" href="#21-配置tcp缓存非必须-效果不明显"></a> 2.1 配置TCP缓存(非必须, 效果不明显)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/sysctl.conf<br>sudo sysctl -p<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">net.core.default_qdisc=fq<br>net.ipv4.tcp_congestion_control=bbr<br>net.ipv4.tcp_rmem=375126 500170 75025200<br>net.ipv4.tcp_wmem=375126 500170 75025200<br>net.ipv4.tcp_window_scaling=1<br>net.ipv4.tcp_timestamps=1<br></code></pre></td></tr></table></figure><h2 id="22-配置dns解析推荐优化效果突出"><a class="markdownIt-Anchor" href="#22-配置dns解析推荐优化效果突出"></a> 2.2 配置DNS解析(推荐,优化效果突出)</h2><blockquote><p><code>systemd-resolve</code>服务指令可能是<code>systemd-resolve</code>也可能是<code>resolvectl</code>(如ubuntu22.04上)</p><p><code>systemd-resolve</code>配置文件修改指导文档: <a href="https://systemd.network/resolved.conf.html">https://systemd.network/resolved.conf.html</a></p></blockquote><ol><li>修改配置文件: <code>/etc/systemd/resolved.conf</code>, 在最后面加上这一行:</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> single-request-reopen<br></code></pre></td></tr></table></figure><blockquote><p>DNS解析效率会提高很多, 但是还依赖于DNS服务器的稳定性</p></blockquote><ol start="2"><li>修改DNS服务器</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Resolve]</span><br><span class="hljs-attr">DNS</span>=<span class="hljs-number">119.29</span>.<span class="hljs-number">29.29</span> <span class="hljs-number">223.6</span>.<span class="hljs-number">6.6</span><br><span class="hljs-attr">FallbackDNS</span>=<span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br></code></pre></td></tr></table></figure><ol start="3"><li>重启服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart systemd-resolved.service<br></code></pre></td></tr></table></figure><p>此时也可以查看DNS的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">resolvectl status<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rust相关基础知识</title>
    <link href="/2022/07/21/rust%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/07/21/rust%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-版本更替问题"><a class="markdownIt-Anchor" href="#1-版本更替问题"></a> 1. 版本更替问题</h1><p>Python的2.x和3.x之间有巨大的变化, 对于更为年轻的Rust而言, 每一次大版本之间有废弃功能和新特性也不足为奇, 因此有时需要疑问不只要去看官方文档, 还需要看重大版本更新变化, 具体可在<a href="https://doc.rust-lang.org/stable/edition-guide/">https://doc.rust-lang.org/stable/edition-guide/</a>中看到.</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>use声明语句</title>
    <link href="/2022/07/21/use%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/07/21/use%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考资料: <a href="https://doc.rust-lang.org/reference/items/use-declarations.html">https://doc.rust-lang.org/reference/items/use-declarations.html</a></p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coq">Syntax:<br>UseDeclaration :<br>   use UseTree ;<br><br>UseTree :<br>      (SimplePath? ::)? *<br>   | <span class="hljs-type">(SimplePath</span>? ::)? &#123; (UseTree ( , UseTree )* ,?)? &#125;<br>   | <span class="hljs-type">SimplePath</span> ( <span class="hljs-built_in">as</span> ( IDENTIFIER | <span class="hljs-type">_</span> ) )?<br></code></pre></td></tr></table></figure><p><code>use</code>语句最常用的做法是引用一个module item. 这些声明语句可以出现在<code>modules</code>或<code>blocks</code>中, 但最常见的是在文件的顶级结构下.</p><h1 id="1-use语句的简写使用"><a class="markdownIt-Anchor" href="#1-use语句的简写使用"></a> 1. <code>use</code>语句的简写使用:</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 导入同一个前缀下的所有paths</span><br><span class="hljs-keyword">use</span> a::b::&#123;c, d, e::f, g::h::i&#125;;<br><br><span class="hljs-comment">// 导入同一个前缀下所有paths, 且包含该parent module本身</span><br><span class="hljs-keyword">use</span> a::b::&#123;<span class="hljs-keyword">self</span>, c, d::e&#125;;<br><br><span class="hljs-comment">// 也可以取别名</span><br><span class="hljs-keyword">use</span> a::b::&#123;<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> ab, c <span class="hljs-keyword">as</span> abc&#125;;<br><br><span class="hljs-comment">// 可以用通配符导入所有path</span><br><span class="hljs-keyword">use</span> a::b::*;<br><br><span class="hljs-comment">//  还可以嵌套使用上述规则</span><br><span class="hljs-keyword">use</span> a::b::&#123;<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> ab, c, d::&#123;*, e::f&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一个例子:</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::hash_map::&#123;<span class="hljs-keyword">self</span>, HashMap&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>&lt;T&gt;(_: T)&#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">bar</span>(map1: HashMap&lt;<span class="hljs-type">String</span>, <span class="hljs-type">usize</span>&gt;, map2: hash_map::HashMap&lt;<span class="hljs-type">String</span>, <span class="hljs-type">usize</span>&gt;)&#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// use declarations can also exist inside of functions</span><br>    <span class="hljs-keyword">use</span> std::option::<span class="hljs-type">Option</span>::&#123;<span class="hljs-literal">Some</span>, <span class="hljs-literal">None</span>&#125;;<br><br>    <span class="hljs-comment">// Equivalent to &#x27;foo(vec![std::option::Option::Some(1.0f64),</span><br>    <span class="hljs-comment">// std::option::Option::None]);&#x27;</span><br>    <span class="hljs-title function_ invoke__">foo</span>(<span class="hljs-built_in">vec!</span>[<span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">1.0f64</span>), <span class="hljs-literal">None</span>]);<br><br>    <span class="hljs-comment">// Both `hash_map` and `HashMap` are in scope.</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">map1</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">map2</span> = hash_map::HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-title function_ invoke__">bar</span>(map1, map2);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-visibility"><a class="markdownIt-Anchor" href="#2-visibility"></a> 2. Visibility</h1><blockquote><p><code>use</code>语句可以被<code>pub</code>限定符修饰, 使用<code>pub</code>修饰的<code>use</code>语句, 可以起到’命名空间重定向’的作用, 原本在一个地方定义的<code>name</code>, 在被<code>pub use</code>之后, 其被暴露在一个新的环境中. 就类似python的import, 也会引起命名空间重定向.</p><p>注意不能引起循环引用, 总体来说和python的设计思想类似</p></blockquote><p>一个<code>re-exporting</code>的例子:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> quux &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> self::foo::&#123;bar, baz&#125;;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> foo &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bar</span>() &#123;&#125;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">baz</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    quux::<span class="hljs-title function_ invoke__">bar</span>();<br>    quux::<span class="hljs-title function_ invoke__">baz</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-paths"><a class="markdownIt-Anchor" href="#3-paths"></a> 3. Paths</h1><blockquote><p>这里给出的是例子</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused_imports)]</span><br><span class="hljs-keyword">use</span> std::path::&#123;<span class="hljs-keyword">self</span>, Path, PathBuf&#125;;  <span class="hljs-comment">// good: std is a crate name</span><br><span class="hljs-keyword">use</span> crate::foo::baz::foobaz;    <span class="hljs-comment">// good: foo is at the `root` of the crate</span><br><br><span class="hljs-keyword">mod</span> foo &#123;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> example &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> iter &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">use</span> crate::foo::example::iter; <span class="hljs-comment">// good: foo is at crate root</span><br><span class="hljs-comment">//  use example::iter;      // bad in 2015 edition: relative paths are not allowed without `self`; good in 2018 edition</span><br>    <span class="hljs-keyword">use</span> self::baz::foobaz;  <span class="hljs-comment">// good: self refers to module &#x27;foo&#x27;</span><br>    <span class="hljs-keyword">use</span> crate::foo::bar::foobar;   <span class="hljs-comment">// good: foo is at crate root</span><br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> bar &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">foobar</span>() &#123; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> baz &#123;<br>        <span class="hljs-keyword">use</span> super::bar::foobar; <span class="hljs-comment">// good: super refers to module &#x27;foo&#x27;</span><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">foobaz</span>() &#123; &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>在2018版之后, 如果同一命名空间下与标准库有名字冲突的, 可以加上<code>::</code>来避免歧义:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> ::std::fs;  <span class="hljs-comment">// Imports from the `std` crate, not the module below.</span><br><span class="hljs-keyword">use</span> self::std::fs <span class="hljs-keyword">as</span> self_fs;  <span class="hljs-comment">// Imports the module below.</span><br><br><span class="hljs-keyword">mod</span> std &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> fs &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-underscore-imports"><a class="markdownIt-Anchor" href="#4-underscore-imports"></a> 4. Underscore Imports</h1><blockquote><p><code>use path as _</code></p><p>使用下划线, 可以将引入的name隐藏, 当导入的是一个trait时, 当前命名空间中所有(在<code>use path as _</code>之后)的struct都能使用Zoo这个trait的方法(事实上, 那个Zoo struct命名为A B C D 都无所谓, 它都能访问zoo这个函数)</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> foo &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Zoo</span> &#123;<br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">zoo</span>(&amp;<span class="hljs-keyword">self</span>) &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span>&lt;T&gt; Zoo <span class="hljs-keyword">for</span> <span class="hljs-title class_">T</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">use</span> self::foo::Zoo <span class="hljs-keyword">as</span> _;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Zoo</span>;  <span class="hljs-comment">// Underscore import avoids name conflict with this item.</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = Zoo;<br>    z.<span class="hljs-title function_ invoke__">zoo</span>();<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>Items</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rust注释</title>
    <link href="/2022/07/21/Rust%E6%B3%A8%E9%87%8A/"/>
    <url>/2022/07/21/Rust%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本注释"><a class="markdownIt-Anchor" href="#1-基本注释"></a> 1. 基本注释</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// Line comment</span><br><br><span class="hljs-comment">/* Block comment */</span><br></code></pre></td></tr></table></figure><blockquote><p>按照约定, 尽量使用行注释而非块注释</p></blockquote><h1 id="2-文档注释doc-comennts"><a class="markdownIt-Anchor" href="#2-文档注释doc-comennts"></a> 2. 文档注释(Doc Comennts)</h1><blockquote><p><code>cargo doc</code>会调用<code>rustdoc</code>来生成文档, 而这依赖于文档注释的存在</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// Line comment; document the next item</span><br><span class="hljs-comment">/** Block comment; document the next item */</span><br><br><br><span class="hljs-comment">//! Line comment; document the enclosing item </span><br><span class="hljs-comment">/*! Block comment; document the enclosing item !*/</span><br></code></pre></td></tr></table></figure><p>用例子来展示上面两种文档注释的不同:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// This module contains tests; `Outer comment`</span><br>mode tests&#123;<br><br>&#125; <br><br>mode tests&#123;<br>    <span class="hljs-comment">//! This module contains tests; `Inner comment`</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-文档属性doc-attributes"><a class="markdownIt-Anchor" href="#3-文档属性doc-attributes"></a> 3. 文档属性(Doc Attributes)</h1><blockquote><p><code>Doc Attributes</code>等价于文档注释, 但是功能更强大. 譬如当我们需要设置<code>rustdoc</code>的一些控制属性时, 就会更方便. 下面是两者的等价对应关系</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// Outer comment</span><br><span class="hljs-meta">#[doc = <span class="hljs-string">&quot;Out comment&quot;</span>]</span><br><br><br><span class="hljs-comment">//! Inner comment</span><br><span class="hljs-meta">#![doc = <span class="hljs-string">&quot;Inner comment&quot;</span>]</span><br></code></pre></td></tr></table></figure><blockquote><p>在这里, 其实涉及了rust的<code>Attribute</code></p><ul><li>Outer attribute: <code>#[attr]</code></li><li>Inner attribute: <code>#![attr]</code></li></ul></blockquote><h1 id="4-常用注释"><a class="markdownIt-Anchor" href="#4-常用注释"></a> 4. 常用注释:</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 如果有未使用的import或者变量, 不发出warning</span><br><span class="hljs-meta">#![allow(unused)]</span> <br></code></pre></td></tr></table></figure><h1 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项:</h1><p>在为<code>crate-level</code>添加注释时, 应当使用<code>//!</code>. 而对于<code>mod</code>等其他代码块, 将<code>///</code>放在代码块前面, 下面是一个使用示例:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//! A Simple Hello World Crate</span><br><br><span class="hljs-comment">/// This function returns the greeting; Hello, world!</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">hello</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    (<span class="hljs-string">&quot;Hello, world!&quot;</span>).<span class="hljs-title function_ invoke__">to_string</span>()<br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::hello;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">test_hello</span>() &#123;<br>        <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">hello</span>(), <span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下的代理配置</title>
    <link href="/2022/07/20/Ubuntu%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/20/Ubuntu%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-软件选择"><a class="markdownIt-Anchor" href="#1-软件选择"></a> 1. 软件选择：</h1><blockquote><p>在2022年，clash已经成为了主流的VPN工具，因此这篇笔记也主要推荐clash的软件，至于随着技术变革，也只有软件的变化，其余操作仍然维持不变的～</p></blockquote><p>说到clash，在Linux下，<code>Clash for windows</code>就是一个最好用的软件，这个软件支持mac os，windows和Liinux。（尽管他的名字带有<code>for windows</code>，或许这个软件最初只是为windows准备的）</p><h1 id="2-代理配置"><a class="markdownIt-Anchor" href="#2-代理配置"></a> 2. 代理配置：</h1><p>Ubuntu系统配置代理，按照如下进行操作：<code>设置 -&gt; 网络 -&gt; 网络代理（齿轮图标）-&gt; 手动</code></p><p>随后，在<code>HTTP代理</code>和<code>HTTPS代理</code>上填写IP: <code>127.0.0.1</code>和port: <code>7890</code></p><blockquote><p>这里IP<code>127.0.0.1</code>即可，至于端口，要看软件中选择监听的端口号。clash相关软件一般是<code>7890</code></p></blockquote><blockquote><p>! 注意：不推荐在Ubuntu下使用socket代理，因为截至2022年，越来越多的网站开始使用websocket进行数据交互，根据实际体验，开启socket代理会导致此类网站连接异常（出现connection error的情况），比如grammarly的word插件就无法正常运行。<br />不过socket代理只有<code>mac</code>和<code>linux</code>才需要考虑，windows并不存在（或者说我没有感知到）。</p></blockquote><h2 id="21-配置命令行代理"><a class="markdownIt-Anchor" href="#21-配置命令行代理"></a> 2.1 配置命令行代理：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># HTTP_PROXY 和 http_proxy 都行</span><br><span class="hljs-built_in">export</span> http_proxy=127.0.0.1:7890<br><span class="hljs-built_in">export</span> https_proxy=127.0.0.1:7890<br></code></pre></td></tr></table></figure><blockquote><p>在命令行输入如下命令后，一般命令行中大部分程序会遵循此代理，然而事无绝对，因此后面会给出部分程序的代理设置方式。</p><p>在ubuntu较早版本，我记得git的代理是不经过<code>http_proxy</code>的, 需要这样设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy http://127.0.0.1:7890<br>git config --global https.proxy https://127.0.0.1:7890<br></code></pre></td></tr></table></figure><p>但是在使用Ubuntu20.04和Ubuntu22.04时, 发现git会使用<code>http_proxy</code>中的代理了, 因此git就不单独讲了</p></blockquote><blockquote><p>Docker的代理则更为复杂, 因为在Dockerfile构建过程中, 环境变量会被构建出的容器自身覆盖(或者说本不存在覆盖,只是自立更生罢了), 而且容器与Host之间的网络映射和端口问题又蒙上一层纱, 因此Docker的代理设置会单独列出一节, 不过等日后我再次遇到这种场景时再仔细总结一下.</p></blockquote><h2 id="22-apt-get代理设置"><a class="markdownIt-Anchor" href="#22-apt-get代理设置"></a> 2.2 apt-get代理设置</h2><p>有两种可选的方式:</p><ol><li><code>sudo vim /etc/apt/apt.conf</code></li><li>在<code>/etc/apt/apt.conf.d/</code>下创建一个单独的配置文件(推测该目录应该是APT的配置导入目录), 然后添加内容</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">Acquire:</span>:http::Proxy <span class="hljs-string">&quot;http://yourproxyaddress:proxyport&quot;</span><span class="hljs-punctuation">;</span><br><span class="hljs-meta"># 如果你的代理需要登陆, 那么将url改为:</span><br><span class="hljs-meta"># <span class="hljs-string">&quot;http://username:password@yourproxyaddress:proxyport&quot;</span>;</span><br></code></pre></td></tr></table></figure><h2 id="23-socks代理配置"><a class="markdownIt-Anchor" href="#23-socks代理配置"></a> 2.3 socks代理配置</h2><p>对于某些应用程序是无法使用HTTP代理的，这时候，需要设置socket代理, Linux命令行并没有直接设置的方法，需要在系统设置里设置，如果用的软件是cfw，则设置为<code>127.0.0.1:7890</code>．但不是很推荐设置系统里的socks代理，只设置终端就够了．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># terminal</span><br><span class="hljs-built_in">export</span> all_proxy=socks5://127.0.0.1:7890<br></code></pre></td></tr></table></figure><h2 id="24-git-ssh端口代理"><a class="markdownIt-Anchor" href="#24-git-ssh端口代理"></a> 2.4 git ssh端口代理</h2><blockquote><p>这里还列出git的原因是, 有时候, 并不通过htps拉取和上传代码, 设置的是SSH端口的仓库链接, 这时候代理就完全没用了, 需要额外设置.</p></blockquote><p>编辑<code>~/.ssh/config</code>, 然后基本应该没得问题了~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs config">Host github.com<br>    ProxyCommand          nc -X connect -x 127.0.0.1:7890 %h %p<br>    ServerAliveInterval   10<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Attributes</title>
    <link href="/2022/07/20/Attribute/"/>
    <url>/2022/07/20/Attribute/</url>
    
    <content type="html"><![CDATA[<h1 id="rust的attribute"><a class="markdownIt-Anchor" href="#rust的attribute"></a> Rust的<code>Attribute</code></h1><blockquote><p>参考资料: <a href="https://doc.rust-lang.org/reference/attributes.html">Attribute</a></p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Syntax</span><br><span class="hljs-attribute">InnerAttribute </span><span class="hljs-punctuation">:</span><br>   <span class="hljs-comment"># ! [ Attr ]</span><br><br><span class="hljs-attribute">OuterAttribute </span><span class="hljs-punctuation">:</span><br>   <span class="hljs-comment"># [ Attr ]</span><br><br><span class="hljs-attribute">Attr </span><span class="hljs-punctuation">:</span><br>   <span class="hljs-attribute">SimplePath AttrInput?</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">AttrInput </span><span class="hljs-punctuation">:</span><br>      DelimTokenTree<br>   | = Expression<br></code></pre></td></tr></table></figure><blockquote><ul><li>Inner attributes, written with a bang (!) after the hash (#), apply to the item that the attribute is declared within.</li><li>Outer attributes, written without the bang after the hash, apply to the thing that follows the attribute.</li></ul></blockquote><p><code>Attributes</code>能够分类为以下几类:</p><ul><li><a href="https://doc.rust-lang.org/reference/attributes.html#built-in-attributes-index">built-in attributes</a></li><li><a href="https://doc.rust-lang.org/reference/procedural-macros.html#attribute-macros">Macro attributes</a></li><li><a href="https://doc.rust-lang.org/reference/procedural-macros.html#derive-macro-helper-attributes">Derive macro helper attributes</a></li><li><a href="https://doc.rust-lang.org/reference/attributes.html#tool-attributes">Tool attributes</a></li></ul><h1 id="1-testing-attributes"><a class="markdownIt-Anchor" href="#1-testing-attributes"></a> 1. Testing Attributes</h1><blockquote><p>参考资料: <a href="https://doc.rust-lang.org/reference/attributes/testing.html">https://doc.rust-lang.org/reference/attributes/testing.html</a></p><p>The <code>test</code> attribute marks a function to be executed as a test.</p></blockquote><h1 id="derive"><a class="markdownIt-Anchor" href="#derive"></a> Derive</h1><blockquote><p><code>Derive</code>作用主要有两点:</p><ol><li>use the <a href="https://doc.rust-lang.org/reference/attributes.html#meta-item-attribute-syntax">MetaListPaths</a>  to specify a list of traits to implement</li><li>or paths to <a href="https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros">derive macro</a> to process</li></ol></blockquote><p>简而言之, derive的作用一个是指定trait(可以认为是Java中<code>接口</code>的近亲), 另一个作用是指定<code>derive macro</code>宏.</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
      <category>Rust</category>
      
      <category>Atributes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>云服务器快速配置SSL证书</title>
    <link href="/2022/07/19/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/"/>
    <url>/2022/07/19/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<p>在服务器上配置SSL证书一般来说如果不熟悉的话非常麻烦，更别提有那么多种web server了, 甚至不同的版本、操作系统，方法又有不同。想要快速的配置SSL证书，可以使用<code>certbot</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://certbot.eff.org/">[1]</span></a></sup>工具.</p><blockquote><p><a href="https://certbot.eff.org/">https://certbot.eff.org/</a></p></blockquote><p>具体操作可以进行进官网看,就不详细复述了. 需要注意的是, 在为apache配置时,需要安装<code>python-certbot-apache</code>这个插件. 虽然这笔记很短, 但这个工具亲测是真的好用~</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://certbot.eff.org/">https://certbot.eff.org/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核与根文件系统</title>
    <link href="/2022/07/18/Linux%E5%86%85%E6%A0%B8%E4%B8%8E%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/07/18/Linux%E5%86%85%E6%A0%B8%E4%B8%8E%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-linux内核映像的构成"><a class="markdownIt-Anchor" href="#1-linux内核映像的构成"></a> 1. Linux内核映像的构成</h1><p><img src="https://imagebed.torch-fan.site/2022/blog/110acb08-83f4-4511-922e-f0cc2e6f5641_.png" alt="内核映像bzImage的构成" /></p><blockquote><p>Linux内核有多种格式的映像，包括vmlinux、Image、zImage、bzImage、uImage、xipImage、bootpImage等<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.cnblogs.com/lemaden/p/10438499.html">[1]</span></a></sup></p></blockquote><p>​<code>vmlinux</code>是可引导的, 可压缩的内核映像. vm表示virtual memory, 表示linux支持虚拟内存, 因此得名vmlinux. 它由用户对内核源码编译得到, <font color='cyan'><strong>实质上是elf格式的文件</strong></font>, 也可以说vmlinux是编译出来的最<strong>原始的内核文件</strong>.</p><blockquote><p>ELF(Executable and Linkable Format) 是可执行可链接格式, 是UNIX实验室作为应用程序二进制接口而发布的 (Unix/Linux上编译型语言最后编译的可执行文件就是ELF格式的),</p></blockquote><p><img src="https://imagebed.torch-fan.site/2022/blog/20220717084046.png" alt="内核映像文件位置" /></p><p>​vmlinux是可执行的Linux内核, 位于/boot/vmlinux, 一般是一个软链接, <code>vmlinuz</code>是<code>vmlinux</code>的压缩文件, <code>vmlinuz</code>的创建方式有两种:</p><ol><li>内核编译时通过<code>make zImage</code>创建</li><li>内核编译时通过<code>make bzImage</code>创建</li></ol><p>​回到最上面bzImage内核映像的构成, 使用航天器的例子. <code>setup.bin</code>就像火箭的一级推进子系统, 最初这部分负责将内核加载进内存, 并为后面内核保护模式的运行建立基本的环境. 后来加载内核的功能被分离到Bootloader中, setup.bin则退化为辅助Bootloader将内核加载到内存.</p><p>​再进一步拆分, 包围在32位保护模式部分外的是非压缩部分, 这部分可以看作是火箭的二级推进子系统, 负责将压缩的内核解压到合适的位置, 并进行内核重定位, 在完成这个环节后, 其从内核映像脱离.</p><p>​最后是内核的32位保护模式部分vmlinux. 这部分相当于航天器的有效负载. 最终只有这部分会被留在内存中, 内存构建时, 将对vmlinux进行压缩, 然后与二级推进系统装配为<code>vmlinux.bin</code></p><h2 id="11-一级推进系统-setupbin"><a class="markdownIt-Anchor" href="#11-一级推进系统-setupbin"></a> 1.1 一级推进系统: <code>setup.bin</code></h2><p>​在进行内核初始化时, 需要一些信息, 如显示信息、内存信息等。这些信息曾经由工作在实模式下的<code>setup.bin</code>通过BIOS获取，保存在内核的变量<code>boot_param</code>中.</p><h2 id="12-二级推进系统-内核非压缩部分"><a class="markdownIt-Anchor" href="#12-二级推进系统-内核非压缩部分"></a> 1.2 二级推进系统: <code>内核非压缩部分</code></h2><p>​内核的保护模式部分是经过压缩的, 因此运行前需要解压缩. 既然内核在构建时自己压缩了自己, 解压缩时也需要由内核映像自己完成.</p><p>​内核在压缩的映像外部包围了一部分非压缩的代码, Bootloader在加载内核映像后跳转至外围的这段非压缩部分. 这些没有经过压缩的指令可以直接给CPU执行, 这段指令恰恰负责解压内核的压缩部分.</p><p>​除了解压外, 非压缩部分还负责内核重定位. 内核可以配置为<code>可重定位的(relocatable)</code>. 所谓可重定位即内核可以被Bootloader加载到内存的任何区域, 但是在链接内核时, 链接器需要假定一个加载地址, 然后这个假定地址为参考, 为各个符号分配运行地址. 如果加载地址和链接时假定的地址不同, 那么需要对符号的地址进行重新修订, 这就是内核重定位.</p><blockquote><p>内核的非压缩部分工作在保护模式下, 其占用的内存在完成使命后将被释放.</p></blockquote><h2 id="13-有效载荷-vmlinux"><a class="markdownIt-Anchor" href="#13-有效载荷-vmlinux"></a> 1.3 有效载荷: <code>vmlinux</code></h2><blockquote><p>编译时, kbuild分别构建内核各个子目录中的目标文件, 然后将它们链接为vmlinux, 为了缩小内核体积, kbuild删除了vmlinux中一些不必要的信息, 并将其命名为vmlinux.bin, 最后将vmlinux.bin压缩为vmlinux.bin.gz. 默认情况下, 内核使用gzip压缩, 也可以配置为使用其他压缩格式, 但是gzip压缩速度最快(但是压缩比较小)</p></blockquote><p><font color="yellow">为什么内核需要进行压缩呢?</font></p><ol><li>在最初, 因为某些体系架构上, 特别是i386, 系统启动时运行于<code>实模式状态</code>, 可以寻址空间只能在1MB以下, 如果内核尺寸过大, 将无法正常加载, 因此需要对内核进行压缩. 在内核加载完毕后, CPU切换到保护模式, 可以寻址更大的地址空间, 于是就可以将压缩过的内核展开了.</li><li>2.4以及更早的内核版本, 需要可以容纳在一张软盘上, 所以内核也要进行压缩</li></ol><p>​但那些都是历史原因, 如今的一些Bootloader(譬如<font color='cyan'>GRUB</font>), 在加载内核期间就已经将CPU切换到保护模式了, 寻址空间的限制早已不是问题. 但是内存的压缩仍然保留下来, 仍然考虑到某些受限的情况, 以及现代CPU解压的速度要远大于IO速度, 更小的内核也能减少加载时间.</p><h2 id="14-映像格式"><a class="markdownIt-Anchor" href="#14-映像格式"></a> 1.4 映像格式</h2><p>​不论是setup.bin、vmlinux.bin，还是vmlinux.bin.gz, 命名中都包含’bin’, 这是<code>binary</code>的缩写. 然而可能会有个疑惑: Linux系统上二进制文件的格式不是用ABI(Application Binary Interface)规定的ELF吗?</p><p>​Linux操作系统提供的hosted environment下, 二进制文件使用ELF格式, 操作系统也提供ELF文件的加载器. 但是Linux操作系统本身却是工作在freestanding environment下, 显然不能强求Bootloader也提供ELF加载器.</p><p>​事实上, Linux 2.6.26开始, 内核的压缩部分(即有效负荷)就开始采用了ELF格式, 下面是Patch的提交者给出的原因:</p><blockquote><p>This allows other boot loaders such as the Xen domain builder the opptunity to extract the ELF file.</p></blockquote><p>​在解压内核映像后, 会跳转到解压映像的开头执行, 但是ELF文件的开头并不是代码段的开始, 而是ELF文件头, 即并非CPU可执行的机器指令.因此需要一个ELF加载器来将ELF格式的内核映像转换为而裸二进制格式. 此时, 内核的非压缩部分调用函数<code>decompress</code>解压内核后, 就紧接着调用函数<code>parse_elf</code>来处理ELF格式的内核映像.</p><h1 id="2-根文件系统-rootfs"><a class="markdownIt-Anchor" href="#2-根文件系统-rootfs"></a> 2. 根文件系统: <code>rootfs</code></h1><blockquote><p>Linux的根文件系统是依照Filesystem Hierarchy Standard Group制定的Filesystem Hierarchy Standard（FHS）标准。服务器、个人计算机到嵌入式系统，虽然不会完全符合标准，但总体上还是遵循。</p></blockquote><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>/bin</td><td>保存系统管理员与用户均会使用的重要命令</td></tr><tr><td>/boot</td><td>系统开机使用的文件，如内核映像和boot loader相关的文件</td></tr><tr><td>/dev</td><td>设备文件</td></tr><tr><td>/etc</td><td>系统配置</td></tr><tr><td>/lib</td><td>重要的库文件和内核模块</td></tr><tr><td>/media</td><td>可移动存储介质的挂载点</td></tr><tr><td>/mnt</td><td>临时挂载点，用户也可以自行选择一些临时挂载点</td></tr><tr><td>/opt</td><td>用户自行安装软件的位置，通常用户也会选择将软件安装在/usr/local下</td></tr><tr><td>/sbin</td><td>系统管理员使用的重要系统命令</td></tr><tr><td>/tmp</td><td>正在执行的程序存放的临时文件</td></tr><tr><td>/usr</td><td>包含系统中安装主要程序的相关文件，类似MS Windows中的“Program files”目录</td></tr><tr><td>/var</td><td>针对的主要是系统运行过程中经常发生变化的一些数据，比如cache、log、临时的数据库、打印机的队列等</td></tr><tr><td>/home</td><td>用户目录保存的地方</td></tr><tr><td>/root</td><td>root用户的用户目录</td></tr><tr><td>/srv</td><td>在服务器版本上, 服务器软件用来保存数据的目录, 譬如www服务器使用的网页资料就可以放在<code>/srv/www</code>下</td></tr></tbody></table><blockquote><p>对于<code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code>:</p><ul><li><p>系统管理元和普通用户都使用的重要命令保存在<code>/bin</code>下</p></li><li><p>仅由系统管理员使用的重要命令则保存在<code>/sbin</code>下</p></li><li><p>不是很重要的命令则分别放置在<code>/usr/bin</code>和<code>/usr/sbin</code>下</p></li></ul></blockquote><blockquote><ul><li>重要的系统库一般放在<code>/lib</code>下</li><li>其他库则存放在<code>/usr/lib</code>目录下</li></ul></blockquote><h1 id="3-initramfs"><a class="markdownIt-Anchor" href="#3-initramfs"></a> 3. <code>initramfs</code></h1><blockquote><p><code>initramfs</code>的作用很难简短描述清楚, 可以简单认为是内核与根文件系统之间的桥梁</p></blockquote><p>​事实上, 不需要initramfs, 内核也能成功的挂载根文件系统进入用户空间. 那是因为内核中必须有对应的硬盘驱动(或者其他硬件驱动). 然而除非是专用系统, 系统的硬件平台是多变的, 甚至同一个平台可能更换硬件. 为了兼容更多硬件平台, 如果将这些驱动全部编译进内核, 并不是好主意. 因为每一次, 系统只需要一种驱动, 当前时刻其他驱动根本用不上.</p><p>​另一方面, rootfs可能不在一个简单的硬盘上, 而是使用了磁盘阵列RAID, 根文件系统可能横跨几个存储设备, 甚至根文件系统在网络设备上. 此时还需要网卡驱动、网络配置、网络认证，以及通信的加密解密。这些工作如果都由内核处理，内核将变得十分复杂。</p><p>​这时就是先有鸡还是先有蛋的问题：内核要加载这些模块（驱动）才能正确识别rootfs所在的设备，但是保存这些模块的rootfs又存储在这些设备上。</p><p>​为了解决这种热插拔适配问题，内核开发者设计了initramfs机制。initramfs是一个<code>临时的文件系统</code>, 其中包含了必要的设备驱动以及加载驱动的工具和运行环境. 由第三方程序(如BootLoader)将initramfs从硬盘加载进内存, 以驱动硬盘为例, 内核转而从内存中的initramfs中获取硬盘控制相关的驱动了, 继而驱动硬盘, 访问硬盘上的根文件系统.</p><p>​在初始化的最后, 内核运行initramfs中的init程序, 该程序将探测到硬件设备、加载对应驱动，挂载真正的文件系统，执行文件系统上的/sbin/init，从而切换到真正的用户空间。真正的文件系统被挂载后，initramfs即完成了使命，其占用的内存也会释放。</p><p>​如果将initramfs的名字拆开：init ram fs，初始一个内存中的文件系统。</p><blockquote><p>initrd是基于ramdisk技术的, 而ramdisk就是基于内存的块设备(一旦创建时设立了大小, 就不能动态调整; 访问块设备需要缓存机制, 但对于内存中的伪块设备, 这并不合适). 鉴于此缺点, Linus Torvalds提出直接将cache作为一个文件系统挂载使用, 基于此, 实现了<code>ramfs</code>. ramdisk本质是基于内存的块设备, 而ramfs是基于缓存的文件系统, 因此ramfs没有之前所说的一些缺点, 譬如ramfs可以根据文件大小自由伸缩容量, 且ramfs基于已有的缓存机制, 不必像ramdisk那样需要和缓存之间进行额外的一环.</p><p>于是,从2.6开始, 伴随着ramfs的出现, initramfs取代了initrd.</p><p>然而在Ubuntu的/boot目录中, 至今可以看到<code>initrd.img</code>的身影</p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/lemaden/p/10438499.html">https://www.cnblogs.com/lemaden/p/10438499.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟化(2):虚拟化概述</title>
    <link href="/2022/07/16/%E8%99%9A%E6%8B%9F%E5%8C%96-2-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/07/16/%E8%99%9A%E6%8B%9F%E5%8C%96-2-%E8%99%9A%E6%8B%9F%E5%8C%96%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-虚拟化概述"><a class="markdownIt-Anchor" href="#1-虚拟化概述"></a> 1. 虚拟化概述</h1><blockquote><p>不论采用何种虚拟化, VMM对物理资源的虚拟可以归结为三个主要任务: <font color="cyan">处理器虚拟化</font>、<font color="cyan"><strong>内存虚拟化</strong></font>和<font color="cyan"><strong>I/O虚拟化</strong></font>。</p></blockquote><h2 id="11-可虚拟化架构和不可虚拟化架构"><a class="markdownIt-Anchor" href="#11-可虚拟化架构和不可虚拟化架构"></a> 1.1 可虚拟化架构和不可虚拟化架构</h2><p>​前文给出了虚拟化的三种特征: 同质、高效和资源受控。如果不能满足的话，就可以说这个VM是失败的，或者说VMM的骗术并不高明。为了研究可虚拟化的条件，需要从指令开始着手。</p><p>​大多数的现代计算机体系结构都有两个或两个以上的<font color="red">特权级</font>，用来分隔系统软件和应用软件. 系统中有一些涉及管理关键系统资源的指令称为<font color="green">特权指令</font>, 这些指令只能在最高特权级上能够正常运行. 如果在非最高特权级上运行, 就会触发一个异常, 处理器会陷入到最高特权级交由系统软件来处理.</p><p>​虚拟化世界里有类指令称为<font color='cyan'>敏感指令</font>, 即操作特权资源的指令, 包括修改虚拟机的运行模式或者下面物理机的状态. 所有的特权指令都是敏感指令, 但不是所有的敏感指令都是特权指令.</p><blockquote><p>为了让VMM完全控制系统资源, 它不允许直接在VM中执行敏感指令. 所有的敏感指令必须经过VMM或者在VMM的审查下完成. 因此, 将VMM运行在系统ing的最高特权级下, 而将VM运行在非最高特权级上, 当客户机操作系统因执行敏感指令而陷入到VMM时, VMM模拟执行引起异常的敏感指令, 这种行为称为<font color="orange">&quot;陷入再模拟&quot;</font>.</p></blockquote><p>​通过&quot;陷入再模拟&quot;实现虚拟化的方法是有前提条件的, 所有的敏感指令都必须是特权指令, 否则虚拟化的正确性难以保证. 因此, <font color='skyblue'>如果一个体系上存在敏感指令不属于特权指令, 那么其就存在虚拟化漏洞.(有些计算机体系结构是存在虚拟化漏洞的, 就是说它们不能很高效地支持系统虚拟化.)</font></p><blockquote><p>其实这里关于为什么&quot;敏感指令必须全是特权指令&quot;还是有些不太理解, 但是这个小细节需要自行补充相关知识. 我觉得可能是书籍翻译的问题, 这里敏感和特权的定义没有阐述的很清楚.</p></blockquote><p>虚拟化漏洞虽然可能存在, 但是可以采取一些办法来避免这些漏洞, 譬如通过<font color='cyan'>模拟</font>的方法, 每次取出一条指令, 模拟出这条指令地执行效果,再取出下一条指令, 这种方法还允许模拟不同体系结构的虚拟机,但是性能太差.</p><h2 id="12-处理器模拟"><a class="markdownIt-Anchor" href="#12-处理器模拟"></a> 1.2 处理器模拟</h2><blockquote><p>处理器模拟是VMM中最核心的部分, 因为访问内存和I/O的指令本身就是敏感指令, 所以内存虚拟化和I/O虚拟化也都依赖于处理器虚拟化</p></blockquote><h3 id="121-指令的模拟"><a class="markdownIt-Anchor" href="#121-指令的模拟"></a> 1.2.1 指令的模拟:</h3><ul><li>虚拟寄存器</li><li>上下文</li><li>虚拟处理器</li></ul><blockquote><p>在没有虚拟化的环境里, 操作系统直接访问物理处理器, 处在最高的特权级别. 当VMM接管物理处理器后, VM上的操作系统降级在非最高特权级别上运行, 此时试图访问关键资源的指令就称为了特权指令.</p></blockquote><p>​VM试图访问关键资源时, 该请求并不会真正发生在物理寄存器上, 相反VMM会模拟物理处理器的行为, 使用对应的虚拟的寄存器</p><h3 id="122-中断和异常注入"><a class="markdownIt-Anchor" href="#122-中断和异常注入"></a> 1.2.2 中断和异常注入:</h3><blockquote><p>VMM对于异常的虚拟化需要完全遵循物理处理器对于各种异常条件的定义, 再根据虚拟处理器当时的内容, 来判断是否需要模拟出一个虚拟的异常, 并注入到虚拟环境中.</p></blockquote><p>​VMM通常会在<code>硬件异常处理程序</code>和<code>模拟代码</code>中进行异常虚拟化的检查, 无论是哪一种, VMM都需要区分两种原因:</p><ol><li>虚拟机自身对运行环境和上下文的设置违背了指令正确执行的条件</li><li>虚拟机运行在非最高特权级别, 由于虚拟化的原因触发的异常.</li></ol><p>​而对于物理中断的触发来自于特定的物理中断源, 虚拟中断的触发则来自于虚拟设备的模拟程序. (包括内部中断源的模拟和外部虚拟设备的模拟)</p><h2 id="13-内存虚拟化"><a class="markdownIt-Anchor" href="#13-内存虚拟化"></a> 1.3 内存虚拟化</h2><p>​从操作系统的角度,物理内存有两个基本特点: 物理地址从0开始和内存地址连续性(或者说在一定的粒度上连续). 在虚拟化中, VMM必须对VM所访问的内存进行一定程度上的虚拟化.</p><p>​在虚拟环境中, 内存虚拟化面临的问题是: 物理内存要被多个客户机操作系统同时使用, 但物理内存只有一份, 物理起始地址0显然也只有一个, 无法同时满足所有VM的OS内存从0开始的要求. 由于使用了内存分区的方式, 内存的连续性要求能够得到满足, 但是内存的使用效率非常不灵活. 在这种情况下, VMM要做的就是&quot;欺骗&quot;VM, 让VM以为它所访问的内存是从0开始并且连续的, 这个欺骗过程就是内存虚拟化.</p><blockquote><p>内存虚拟化的核心在于引入一层新的地址空间: <font color='cyan'>客户机物理地址空间</font></p></blockquote><h2 id="14-io虚拟化"><a class="markdownIt-Anchor" href="#14-io虚拟化"></a> 1.4 I/O虚拟化</h2><p>​外设是通过一组I/O资源(端口I/O或者是MMIO)来进行访问的, 所以设备相关的虚拟化又被称为I/O虚拟化.</p><h1 id="2-vmm的分类"><a class="markdownIt-Anchor" href="#2-vmm的分类"></a> 2. VMM的分类</h1><h2 id="21-按虚拟平台分类"><a class="markdownIt-Anchor" href="#21-按虚拟平台分类"></a> 2.1 按虚拟平台分类</h2><ol><li>完全虚拟化(Full Virtualization): 客户机操作系统察觉不到是运行在一个虚拟平台上, 虚拟的是现实存在的平台.</li><li>类虚拟化(Para-Virtualization): VMM虚拟的平台是现实中并不存在的, 需要对这类VM进行适当修改使之适应虚拟环境.</li></ol><blockquote><p>类虚拟化通过在源代码级别修改指令以回避虚拟化漏洞, 而且类虚拟化由于不是模式真实的设备, 因此可以自定义出高度优化的I/O协议, 这种I/O协议完全基于事务, 可以达到近似物理机的速度. 因为现有的系统和设备, 往往为了通用性存在很多冗余, 类虚拟化的自定义在某些时候反而能有不错的性能表现.</p></blockquote><h2 id="22-按vmm实现结构分类"><a class="markdownIt-Anchor" href="#22-按vmm实现结构分类"></a> 2.2 按VMM实现结构分类</h2><h3 id="1-hypervisor模型"><a class="markdownIt-Anchor" href="#1-hypervisor模型"></a> 1. Hypervisor模型</h3><p>​在该模型中, VMM可以被看做是一个完整的操作系统，不同之处在于，VMM是为虚拟化设计的，还具有虚拟化功能。首先，所有的物理资源如处理器、内存和I/O设备都归VMM所有；其次VMM需要向上提供虚拟机用于运行客户机操作系统，因此VMM还负责虚拟环境的创建和管理。</p><p>​Hypervisor模型的架构：</p><ul><li>P(processor): 处理器管理代码（负责物理处理器的管理和虚拟化）</li><li>M(Memory): 内存管理代码（负责物理内存的管理和虚拟化）</li><li>DM(Device Model)：负责I/O设备的虚拟化</li><li>DR（Device Driver）：负责I/O设备的驱动</li></ul><blockquote><p>有得必有失，Hypervisor模型在拥有虚拟化高效率的同时也暴露出其缺点，由于VMM完全拥有物理资源，因此VMM需要进行物理资源的管理，包括设备的驱动，我们知道，设备驱动开发的工作量非常大。因此实际中，基于Hypervisor的VMM一般有选择地支持一些I/O设备。</p></blockquote><h3 id="2-宿主模型"><a class="markdownIt-Anchor" href="#2-宿主模型"></a> 2. 宿主模型</h3><p>​宿主模型中，物理资源由宿主机操作系统管理。宿主机操作系统是传统的操作系统，譬如Windows和Linux，这些传统操作系统并不是为虚拟化而设计的，因此本身并不具备虚拟化功能，实际的虚拟化功能由VMM提供。VMM此时通常是宿主机操作系统独立的内核模块，有些实现包含用户态进程，如I/O虚拟化的用户态设备模型。</p><p>​宿主模型可以充分利用现有操作系统的设备驱动程序，VMM无需为各类I/O设备重新实现驱动程序。然而VMM需要调用宿主机操作系统提供的服务接口获取资源进行虚拟化，效率和功能都会受到影响。</p><h3 id="3-混合模型"><a class="markdownIt-Anchor" href="#3-混合模型"></a> 3. 混合模型</h3><p>​混合模型是上述两种模式的集合体。VMM位于最底层，拥有所有的物理资源。与Hypervisor模式不同在于，VMM会将大部分I/O设备的控制权交给一个运行在特权虚拟机中的特权操作系统来完成。处理器和内存的虚拟化依然由VMM来完成，而I/O的虚拟化则由VMM和特权操作系统共同完成。</p><ul><li>DM和DR处在特权操作系统中</li><li>P和M则依然由VMM负责</li></ul><h2 id="23-现实案例kvmkernel-based-virual-machine"><a class="markdownIt-Anchor" href="#23-现实案例kvmkernel-based-virual-machine"></a> 2.3 现实案例：KVM(Kernel-based Virual Machine)</h2><blockquote><p>KVM最早由Qumranet公司开发, 在2006年10月出现在Linux内核的邮件列表上, 并于2007年2月集成到Linux2.6.20内核中, 成为内核的一部分</p></blockquote><p>​KVM出现之初, 有人认为KVM是宿主模式, 而随着更多的虚拟化功能加入到Linux内核中, 越来越多的人认为Linux已经是一个Hypervisor, 因此KVM是Hypervisor模型.</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>虚拟化基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟化(1):前言</title>
    <link href="/2022/07/14/%E8%99%9A%E6%8B%9F%E5%8C%96-1-%E5%89%8D%E8%A8%80/"/>
    <url>/2022/07/14/%E8%99%9A%E6%8B%9F%E5%8C%96-1-%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h1><blockquote><p>《系统虚拟化：原理与实现》笔记：</p><p><em>具体来说，虚拟化技术的实现形式是在系统中加入一个虚拟化层，虚拟化层将下层的资源抽象成另一形式的资源，提供给上层使用。通过空间上的分割、时间上的分时以及模拟，虚拟化可以将一份资源抽象成多份。反过来，虚拟化也可以将多份资源抽象成一份。</em></p></blockquote><p>虚拟化技术成熟的时机真正到来，发生在**<u>硬件虚拟化技术</u>**的诞生之后（如Intel VT技术和AMD SVM技术）</p><p><img src="https://imagebed.torch-fan.site/2022/blog20220714072606.png" alt="计算机系统的各个抽象层" /></p><ul><li>硬件抽象层(Hardware Abstraction Layer, HAL) 是计算机中软件所能控制的硬件的抽象接口(如CPU寄存器、内存管理模块、I/O端口和内存映射的I/O地址<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Memory mapped I/O and Isolated I/O - GeeksforGeeks">[1]</span></a></sup>等）</li><li>API抽象层抽象的是一个进程所能控制的系统功能的集合, 包括创建进程、申请和归还内存、进程间同步与共享等</li></ul><h2 id="11-硬件抽象层上的虚拟化"><a class="markdownIt-Anchor" href="#11-硬件抽象层上的虚拟化"></a> 1.1 硬件抽象层上的虚拟化</h2><p>​硬件抽象层上的虚拟化是通过抽象<code>硬件抽象层</code>来实现虚拟机, 为客户机操作系统呈现和物理硬件相同或相近的硬件抽象层. 由于客户机操作系统所能看到的是硬件抽象层, 因此客户机操作系统的行为和在物理平台上没有什么区别.</p><p>​硬件抽象层中,Host和Guest的ISA(Instruction Set Architectrue, 指令集架构)一般是一样的. Guest OS的大部分指令都可以在宿主机处理器上直接运行,只有那些需要虚拟化的指令才会由虚拟化软件进行处理,  从而大大<font color="red"><strong>降低虚拟化开销</strong></font>.</p><p>​Guest和Host的硬件抽象层的某些部分如中断控制器、设备等，可以是完全不同的，当客户机对硬件抽象层访问时，虚拟化软件需要对此进行截获并模拟。</p><h2 id="12-操作系统层上的虚拟化"><a class="markdownIt-Anchor" href="#12-操作系统层上的虚拟化"></a> 1.2 操作系统层上的虚拟化</h2><p>​操作系统层上的虚拟化是指操作系统的内核可以提供多个相互隔离的<font color="green"><strong>用户态实例</strong></font>，这些用户态实例（通常而言被称为<font color="cyan"><strong>容器</strong>/<strong>container</strong></font>）对于它的用户而言就像真的计算机，有自己独立的操作系统, 网络, 系统设置和库函数.</p><p>​这种技术可以认为是UNIX系统<code>chroot</code><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="chroot command in Linux with examples - GeeksforGeeks">[2]</span></a></sup>命令的延伸, 因为这是操作系统内核主动提供的虚拟化, 因此操作系统层上的虚拟化也非常高效, 它的虚拟化资源和性能开销非常小, 也不需要有硬件的特殊支持. 但是灵活性较小, <font color="pink">每个容器中的操作系统必须和宿主机是同一类操作系统</font>(注意是同一类, 至于什么能归为一类则要更细的划分了)</p><h2 id="13-库函数层上的虚拟化"><a class="markdownIt-Anchor" href="#13-库函数层上的虚拟化"></a> 1.3 库函数层上的虚拟化</h2><p>​操作系统通过应用级的库函数提供给应用程序一组服务, 例如文件操作服务\时间操作服务等。例如，wine是在Linux上模拟了Windows的库函数接口，使得WIndows程序能够在Linux上正常运行。</p><h2 id="14-编程语言层上的虚拟化"><a class="markdownIt-Anchor" href="#14-编程语言层上的虚拟化"></a> 1.4 编程语言层上的虚拟化</h2><p>​如JVM（Java Virtual Machine）和微软的CLR（Common Language Runtime）。这类虚拟机运行的是一个进程级的作业，所不同的是这些程序所针对的不是一个硬件上存在的体系结构，而是一个虚拟体系结构。</p><hr /><h2 id="系统虚拟化"><a class="markdownIt-Anchor" href="#系统虚拟化"></a> 系统虚拟化</h2><p>理论上来说，虚拟机和物理机可以是两个完全不同的ISA系统，但是不同的ISA使得虚拟机的每一条指令都需要在物理机上模拟执行，从而造成性能的极大下降。相同体系架构的系统虚拟化通常会有较好性能, 实现起来也更简单.</p><blockquote><p>1974年, Popek和Goldberg定义了虚拟机可以看作是物理机的一种高效隔离复制.</p><p>上面蕴含了虚拟机的三个典型特征: 同质、高效和资源受控。</p></blockquote><p><img src="http://imagebed.torch-fan.site/2022/blog/20220714094813.png" alt="系统虚拟化" /></p><p>上图中虚拟化层也被称为VMM(Virtual Machine Monitor),  通过虚拟化层的模拟, 虚拟机中的操作系统认为自己仍然是独占一个系统在运行. 只要两台机器提供相同的虚拟硬件抽象层，虚拟机可以在两者之间进行无缝地迁移。</p><h1 id="2-x86概要"><a class="markdownIt-Anchor" href="#2-x86概要"></a> 2. x86概要</h1><h2 id="21-x86内存架构"><a class="markdownIt-Anchor" href="#21-x86内存架构"></a> 2.1 x86内存架构</h2><h3 id="211-地址空间"><a class="markdownIt-Anchor" href="#211-地址空间"></a> 2.1.1 地址空间：</h3><ol><li>物理地址空间</li></ol><p>​硬件平台可以简单的划分为三部分：CPU、内存和其他硬件设备。在CPU眼中，内存和其他硬件设备都属于可以使用的资源，这些资源组合在一起，分布在CPU的物理地址空间中。物理地址空间的大小，由CPU实现的物理地址位数决定，但物理地址的位数和CPU处理数据的能力（即CPU位数没有必然的联系）， 如16位的8086CPU具有20位的地址空间。</p><p>​在这里，可以用<font color="cyan"><strong>内存映射I/O</strong></font>来举例，如一个CPU的物理地址空间为4GB，有512MB的内存，其他硬件设备寄存器被映射到512MB的I/O地址内，则该平台的物理地址空间中有1GB的元素是有效的，其余部分不存在。</p><ol start="2"><li>线性地址空间</li></ol><p>​一个平台只能有一个物理地址空间,但是每个程序都认为自己独享了整个平台的硬件资源, 为了让多个程序能够相互隔离并安全地使用物理地址空间的资源, 于是引入了线性地址空间的概念.</p><p>​线性地址空间的大小同样取决于CPU实现的线性地址位数, 例如32位线性地址的CPU具有4GB大小的线性地址空间. 注意, 线性地址空间的大小和物理地址空间大小没有必然联系, 如Intel的PAE平台有4GB的线性地址空间, 64GB的物理地址空间.</p><p>​线性地址空间会被映射到物理地址空间的某一部分或者整个物理地址空间, CPU负责将线性地址转换成物理地址, 使程序能够正确访问到该线性地址空间所映射.</p><p><img src="https://imagebed.torch-fan.site/2022/blog/20220714103654.png" alt="线性地址空间" /></p><h3 id="212-地址"><a class="markdownIt-Anchor" href="#212-地址"></a> 2.1.2 地址:</h3><ol><li>逻辑地址</li></ol><p>​由于x86特殊的<code>段机制</code>, 还有一种逻辑地址, 即程序直接使用的地址, 由段选择符和偏移量(32位平台中是32位)构成. 在C语言中, 指针实际上存储的是逻辑地址的<code>偏移部分</code>, 而该偏移对应的<code>段选择符</code>位于段寄存器中.</p><ol start="2"><li>线性地址(虚拟地址)</li></ol><p>​线性地址是逻辑地址转换后的结果, 用于索引线性地址空间. 当CPU使用<code>分页机制</code>时, 线性地址必须转换成物理地址才能访问平台内存或硬件设备才能访问内存和硬件设备; 当分页机制未启用时, 线性地址相当于物理地址. 有关分段和分页可见<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Difference Between Paging and Segmentation - GeeksforGeeks">[3]</span></a></sup></p><ol start="3"><li>物理地址</li></ol><p>​这是CPU提交到总线用于访问平台内存和硬件设备的最终地址, 它和上面两个地址有如下关系:</p><ul><li>分段机制启用, 分页未启用时: 逻辑地址 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 线性地址 = 物理地址</li><li>分段机制和分页机制都启动: 逻辑地址 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 线性地址 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 物理地址</li></ul><blockquote><p>这里可以停下来思考一下, 逻辑地址是否是应用程序中(高级语言编程)使用的相对地址, 而线性地址对应整个进程使用的相对地址, 而物理地址就是最终内存中实际地址?</p></blockquote><blockquote><p>知识补充: <font><strong>总线地址</strong></font></p><p>在x86下, 设备寄存器的物理地址和寄存器在设备上的地址是不同的, 存在一个映射关系(由电子线路负责转换), 对CPU是透明的, 而CPU用于访问设备的物理地址是设备寄存器展现给总线的地址, 所以在x86下有时也称物理地址为总线地址</p></blockquote><h3 id="213-x86内存管理机制"><a class="markdownIt-Anchor" href="#213-x86内存管理机制"></a> 2.1.3 x86内存管理机制</h3><h4 id="1-分段机制"><a class="markdownIt-Anchor" href="#1-分段机制"></a> 1. 分段机制</h4><blockquote><p>分段机制: 将内存划分成以起始地址(Base)和长度(Limit)描述的块, 这些内存块就被称为段.</p></blockquote><p>分段机制由4个基础部分组成:</p><ul><li>逻辑地址</li><li>段选择寄存器</li><li>段描述符</li><li>段描述符表</li></ul><p><img src="https://imagebed.torch-fan.site/2022/blog/segment.png" alt="分段机制" /></p><p>​段选择符(segment selector): 是逻辑地址的一个组成部分, 共16位, 用来索引<code>段描述表</code>以获得该段对应的<code>段描述符</code>. 段选择符中有标识段表的字段, 是用本地段表还是全局段表, 以及其他控制字段. 为了CPU能够快速获得段选择符, x86架构提供了6个段寄存器(segment register)用于存放当前程序的各个段的段选择符.</p><blockquote><ul><li>CS(code-segment, 代码段): 存放代码段的段选择符</li><li>DS(data-segment, 数据段): 存放数据段的段选择符</li><li>SS(stack-segment, 栈段): 存放栈的段选择符</li><li>ES、FS、GS：供程序自由使用，可以存放额外3个数据段的段选择符。</li></ul></blockquote><p>​段描述符(segment descriptor): 段描述符记录了各个段的<code>基地址</code>, <code>长度</code>和<code>各种属性</code>.</p><p>​段描述表(简称段表), x86架构提供两种段描述符表, 分别是: 全局段描述符表(Global Descriptor Table) 和 本地段描述符(Local Descriptor Table). 系统中至少有一个GDT可以被有所进程访问, 同时系统中可以有一个或多个LDT被某个进程私有或者在若干进程之间共享. GDT是内存中的一个数据结构, 类似数组, 而LDT是一个段, 它的段描述符保存在GDT中.</p><h4 id="2-分页机制"><a class="markdownIt-Anchor" href="#2-分页机制"></a> 2. 分页机制</h4><blockquote><p>分页机制让现代操作系统中的虚拟内存称为可能, 一个页面可以存在于物理内存中, 也可以存放在磁盘的交换区域中, 程序可以利用比机器物理内存更大的内存区域.</p></blockquote><p>​分页机制的核心思想是通过页表将线性地址转换位物理地址, 并配合旁路转换缓冲区(Translation Lookaside Buffer, TLB)来加速地址转换过程. 这里对分页和分段不做详细描述, 会单独深入了解这两个关键机制.</p><p><img src="https://imagebed.torch-fan.site/2022/blog/6541efd3-cf26-41bf-96df-d922ee524d30_.png" alt="分页机制" /></p><h2 id="22-x86架构的基本运行环境"><a class="markdownIt-Anchor" href="#22-x86架构的基本运行环境"></a> 2.2 x86架构的基本运行环境</h2><h3 id="221-三种基本模式"><a class="markdownIt-Anchor" href="#221-三种基本模式"></a> 2.2.1 三种基本模式:</h3><blockquote><p>x86实际上有4种运行模式: 实模式、保护模式、SMM模式和虚拟8086模式。除了SMM模式外，其余三种模式均常见于书本中。</p></blockquote><ol><li>实模式（Real Mode）：当CPU加电并经历最初的混沌状态后，首先进入的就是实模式，他是早期intel 8086处理器工作的模式。在该模式下，逻辑地址转换后即为物理地址，CPU可以访问1MB的物理地址空间（实际是1MB+64KB）。操作系统或BIOS通常在该模式下准备必要的数据结构和初始化关键的寄存器，然后切入保护模式。</li><li>保护模式（Protect Mode）：操作系统运行时最常用的模式，在该模式下，CPU的所有功能几乎都能得到使用，可以访问架构允许的所有物理地址空间（例如x86是4GB）。</li><li>虚拟8086模式（Virutal 8086 mode）：为了早期的程序能够在保护模式下运行，x86提供了8086模式。该模式可以让CPU在保护模式下为8086程序虚拟实模式的运行环境，使这些程序在执行时无须真正的从保护模式切换到实模式。</li></ol><h2 id="23-其他"><a class="markdownIt-Anchor" href="#23-其他"></a> 2.3 其他：</h2><p>​诸如I/O、中断、寄存器、总线相关内容过于繁复，由于此时重心在虚拟化方面，关于操作系统相关知识我们可以在需要时进行补充。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.geeksforgeeks.org/memory-mapped-i-o-and-isolated-i-o/">Memory mapped I/O and Isolated I/O - GeeksforGeeks</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.geeksforgeeks.org/chroot-command-in-linux-with-examples/">chroot command in Linux with examples - GeeksforGeeks</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.geeksforgeeks.org/difference-between-paging-and-segmentation/">Difference Between Paging and Segmentation - GeeksforGeeks</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
      <category>虚拟化基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>clash配置文件预处理</title>
    <link href="/2022/07/11/clash%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <url>/2022/07/11/clash%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%A2%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-参考文档"><a class="markdownIt-Anchor" href="#1-参考文档"></a> 1. 参考文档：</h1><ul><li>clash for windows的parser配置：<a href="https://docs.cfw.lbyczf.com/contents/parser.html#%E7%AE%80%E4%BE%BF%E6%96%B9%E6%B3%95-yaml">https://docs.cfw.lbyczf.com/contents/parser.html#%E7%AE%80%E4%BE%BF%E6%96%B9%E6%B3%95-yaml</a></li><li>clash premium配置文档：<a href="https://github.com/Dreamacro/clash/wiki/configuration">https://github.com/Dreamacro/clash/wiki/configuration</a></li></ul><h1 id="2-parser推荐配置"><a class="markdownIt-Anchor" href="#2-parser推荐配置"></a> 2. Parser推荐配置：</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">parsers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">reg:</span> <span class="hljs-string">https://+.+</span><br>      <span class="hljs-attr">yaml:</span><br>        <span class="hljs-attr">prepend-rules:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">IP-CIDR6,::/0,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">IP-CIDR,119.29.29.29/32,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">IP-CIDR,114.114.114.114/32,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">IP-CIDR,1.1.1.1/32,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">IP-CIDR,1.0.0.1/32,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">IP-CIDR,8.8.8.8/32,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,bilibili,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,csdn,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,bing,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,ieee,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,wiley,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,sciencedirect,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,elsevier,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,office,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,springer,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,dl.acm.org,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,grammarly,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,webofscience,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,clarivate,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-KEYWORD,webofknowledge,DIRECT</span><br>        <span class="hljs-attr">mix-object:</span><br>          <span class="hljs-attr">dns:</span><br>              <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>              <span class="hljs-attr">ipv6:</span> <span class="hljs-literal">true</span><br>              <span class="hljs-comment"># enhanced-mode: redir-host</span><br>              <span class="hljs-attr">enhanced-mode:</span> <span class="hljs-string">fake-ip</span><br>              <span class="hljs-attr">fake-ip-range:</span> <span class="hljs-number">198.18</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">/16</span>   <span class="hljs-comment"># if you don&#x27;t know what it is, don&#x27;t change it</span><br>              <span class="hljs-attr">fake-ip-filter:</span>                <span class="hljs-comment"># fake ip white domain list, aka Always Real IP</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.lan&#x27;</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">localhost.ptlogin2.qq.com</span><br>              <span class="hljs-attr">nameserver:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.1</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">119.29</span><span class="hljs-number">.29</span><span class="hljs-number">.29</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">223.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span><br>                <span class="hljs-comment"># - tcp://1.1.1.1</span><br>                <span class="hljs-comment"># - &#x27;[2400:3200::1]:53&#x27;  # &#x27;[&lt;ipv6&gt;]:43&#x27; ipv6DNS要用这种格式才行~</span><br>              <span class="hljs-attr">fallback:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">119.29</span><span class="hljs-number">.29</span><span class="hljs-number">.29</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">223.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>                <span class="hljs-comment"># - &#x27;[2400:3200::1]:53&#x27;</span><br>                <span class="hljs-comment"># - tcp://1.1.1.1</span><br>                <span class="hljs-comment"># - tcp://8.8.8.8</span><br>              <span class="hljs-attr">nameserver-policy:</span><br>                  <span class="hljs-string">&#x27;+.live.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.live.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.office.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.office.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.sharepoint.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.office365.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.officeppe.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.skype.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.onedrive.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.msocsp.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.msauthimages.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.msauth.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.msn.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.onenote.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.onenote.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.1drv.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.microsoft.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>                  <span class="hljs-string">&#x27;+.microsoftonline.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>              <span class="hljs-attr">fallback-filter:</span><br>                  <span class="hljs-attr">geoip:</span> <span class="hljs-literal">true</span>  <br>                  <span class="hljs-attr">geoip-code:</span> <span class="hljs-string">CN</span>         <br>                  <span class="hljs-attr">ipcidr:</span>                      <br>                  <span class="hljs-bullet">-</span> <span class="hljs-number">240.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/4</span><br>                  <span class="hljs-attr">domain:</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.google.com&#x27;</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.facebook.com&#x27;</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.youtube.com&#x27;</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.github.com&#x27;</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.live.com&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Endnote使用小贴士</title>
    <link href="/2022/06/30/Endnote%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    <url>/2022/06/30/Endnote%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-增加引用文献的格式样式"><a class="markdownIt-Anchor" href="#1-增加引用文献的格式样式"></a> 1. 增加引用文献的格式样式:</h1><p>在写中文论文时, 引文格式一般不在内置的样式中, 需要去endnote官网下载(稍微自己找找), 具体怎么下就不教了.</p><p>譬如中文引文格式可以搜索: GBT7714, 一般使用<code>(numeric)</code>后缀的, 引用样式的文件格式为: <code>.ens</code>, 下载后双击打开, 然后<code>save as</code>一下, 取个名字Endnote就知道来新家伙了!</p><p><code>save as</code>后样式文件会被放在%USER%/Documents/EndNote/Styles下(其他操作系统按照此思路找, 反正在用户目录的相关应用的文档目录内)</p><h1 id="2-修改参考文献格式"><a class="markdownIt-Anchor" href="#2-修改参考文献格式"></a> 2. 修改参考文献格式</h1><p><img src="https://imagebed.torch-fan.site/2022/blog/20220630134649.png" alt="设置按钮" /></p><p>endnote的样式设置按钮比较奇葩, 一个小箭头, 点开后就能设置样式了, 譬如:</p><ul><li>引文的整体缩进就设置 hang. (就这个比较常用)</li></ul><h1 id="3-自定义引文样式"><a class="markdownIt-Anchor" href="#3-自定义引文样式"></a> 3. 自定义引文样式</h1><p>官方提供的参考文档: <a href="https://clarivate.libguides.com/ld.php?content_id=33224848">https://clarivate.libguides.com/ld.php?content_id=33224848</a></p><p>标点符号在引文样式定义中, 有些标点(Punctuation)有不同含义, 具体可以书中<code>3.2.2 Punction</code></p><blockquote><p>3.2.2 Punctuation</p><p>This is an option available with EndNote X6 and later. Style guides in some regions require a space before the colon (and other special characters) in the formatting of references. Other style guides do not.</p><p>Select either English or French as the punctuation option. The default selection is English.</p><p>The English option tells EndNote to remove extra spaces before the punctuation marks listed below. Spaces before other punctuation marks and symbols are retained.</p><ul><li>Colon <code>(:)</code></li><li>Semi-colon <code>(;)</code></li><li>Exclamation mark <code>(!)</code></li><li>Question mark <code>(?)</code></li></ul><p>The French option tells EndNote that a space is required before and after the following punctuation marks.</p><ul><li>Colon <code>(:)</code></li><li>Semi-colon <code>(;)</code></li><li>Chevrons <code>(&lt;&lt; &gt;&gt;)</code> (opening and closing)</li><li>Exclamation mark <code>(!)</code></li><li>Question mark <code>(?)</code></li><li>Percent sign <code>(%)</code></li><li>Dollar sign <code>($)</code></li><li>Number Sign or Hash Mark <code>(#)</code></li></ul></blockquote><p>EndNote的引文样式定义中有一些特殊的符号, 用来处理一些可变情况(比如有的文章有副标题, 有的文章没有副标题), 这些在书中<code>3.3.6 Special Characters in Templates</code>中有介绍.  这些特殊符号也由<code>Insert Field</code>插入, 其功能详见书中介绍.</p><blockquote><p>3.3.6 Special Characters in Templates</p><p>In addition to fields and punctuation, there are several special characters EndNote uses to help control how reference information appears in a style. The table below shows these characters and how they are used (note that all special characters have been enlarged below for readability).</p><p><img src="https://imagebed.torch-fan.site/2022/blog/20220630151418.png" alt="3.3.6fig1" /></p><p><img src="https://imagebed.torch-fan.site/2022/blog/20220630151454.png" alt="3.3.6fig2" /></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>文档撰写</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>522.最长特殊序列</title>
    <link href="/2022/06/27/522-%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/"/>
    <url>/2022/06/27/522-%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="522-最长特殊序列"><a class="markdownIt-Anchor" href="#522-最长特殊序列"></a> 522. 最长特殊序列</h1><p>Leetcode题目链接: <a href="https://leetcode.cn/problems/longest-uncommon-subsequence-ii/">https://leetcode.cn/problems/longest-uncommon-subsequence-ii/</a></p><h2 id="1-解题思路"><a class="markdownIt-Anchor" href="#1-解题思路"></a> 1. 解题思路:</h2><ol><li><code>最长特殊序列</code> 显然是数组中某个字符串而非其子序列: 试想如果结果是某个子序列, 那么该子序列所属的字符串也必然是更大的结果(该字符串也必然不是任何其他字符串的子序列!), 因此自相矛盾, 该题的结果必然直接是数组中某个字符串.</li><li>题目可以转换为: <mark style="color:orange;">找到一个数组中最长且不为其他字符串子序列的元素</mark>.</li></ol><h3 id="11-朴素解法"><a class="markdownIt-Anchor" href="#11-朴素解法"></a> 1.1 朴素解法:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLUSlength</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> arrLen = strs.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arrLen; i++) &#123;<br>            <span class="hljs-type">int</span> signedSizeI = <span class="hljs-built_in">int</span>(strs[i].<span class="hljs-built_in">size</span>()); <br>            <span class="hljs-keyword">if</span> (ans &gt; signedSizeI) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (; j &lt; arrLen; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt;= arrLen) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (i == j) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-type">int</span> signedSizeJ = <span class="hljs-built_in">int</span>(strs[j].<span class="hljs-built_in">size</span>());<br>                <span class="hljs-type">int</span> permission = signedSizeI &gt; signedSizeJ;<br>                <span class="hljs-keyword">if</span> (! permission &amp;&amp; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">isSub</span>(strs[i], strs[j])) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &gt;= arrLen &amp;&amp; ans &lt; signedSizeI) &#123;<br>                ans = signedSizeI;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isSub</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; a, <span class="hljs-type">const</span> string&amp; b)</span> </span>&#123;<br>        <span class="hljs-type">int</span> lengthA = a.<span class="hljs-built_in">length</span>(), lengthB = b.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; lengthA &amp;&amp; j &lt; lengthB) &#123;<br>            <span class="hljs-keyword">if</span> (a[i] == b[j++]) &#123;<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i == lengthA;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="12-优化1-预处理"><a class="markdownIt-Anchor" href="#12-优化1-预处理"></a> 1.2 优化1: 预处理</h3><blockquote><p>由于存在双层循环, 因此我们想尽可能降低内存循环复杂度</p><p>考虑到, 如果一个A长度大于B, 那么A必然不为B的子序列, 那么可以对数组做一个预处理, 将数组逆序排列, 就可以减少一些判断长度操作 (当然, 从小到大排也行, 两者是否会产生区别呢?)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLUSlength</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>    <span class="hljs-built_in">sort</span>(strs.<span class="hljs-built_in">begin</span>(), strs.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> string&amp; a, <span class="hljs-type">const</span> string&amp; b)&#123;<br>        <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">length</span>() &gt; b.<span class="hljs-built_in">length</span>();<br>    &#125;);<br><br>    <span class="hljs-type">int</span> arrLen = strs.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arrLen; i++) &#123;<br>        <span class="hljs-type">int</span> signedSizeI = <span class="hljs-built_in">int</span>(strs[i].<span class="hljs-built_in">size</span>()); <br>        <span class="hljs-keyword">if</span> (ans &gt; signedSizeI) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; j &lt; arrLen; j++) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= arrLen) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (i == j) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> signedSizeJ = <span class="hljs-built_in">int</span>(strs[j].<span class="hljs-built_in">size</span>());<br>            <span class="hljs-type">int</span> permission = signedSizeI &gt; signedSizeJ;<br>            <span class="hljs-keyword">if</span> (! permission &amp;&amp; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">isSub</span>(strs[i], strs[j])) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (permission) &#123;<br>                j = arrLen - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (j &gt;= arrLen &amp;&amp; ans &lt; signedSizeI) &#123;<br>            ans = signedSizeI;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-优化2-迭代步数"><a class="markdownIt-Anchor" href="#13-优化2-迭代步数"></a> 1.3 优化2: 迭代步数</h3><blockquote><p>考虑到字符串长度对子序列判断的影响, 在进行双层循环时, 我们完全只需要对<code>j</code>向更长字符串进行遍历即可~</p><p>但这样会遇到一个新问题: <code>如果有长度相同或者甚至完全一样的字符串, 该如何处理呢?</code></p><ol><li>如果预处理时是从大到小排列, 只需要两层循环都逆序即可(如果是正常的从小到大预处理, 则不必考虑这一点)</li><li>如果有完全一样的字符串, 处理方式也有一些改变: 如果a是b的子串,<code>j</code>不能直接跳过了, 要将后续所有相同长度的字符串都遍历, 并使用一个集合记录完全相同的字符串(这些字符串必然互为子串, 不能考虑了, 遇到直接跳过). 这样做可以避免出现奇数个相同字符串的问题(且该类字符串无父字符串)</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> std::set;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLUSlength</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(strs.<span class="hljs-built_in">begin</span>(), strs.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> string&amp; a, <span class="hljs-type">const</span> string&amp; b)&#123;<br>            <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">length</span>() &gt; b.<span class="hljs-built_in">length</span>();<br>        &#125;);<br><br>        set&lt;<span class="hljs-type">int</span>&gt; invalid;<br>        <span class="hljs-type">int</span> arrLen = strs.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = arrLen - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (invalid.<span class="hljs-built_in">count</span>(i) == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> signedSizeI = <span class="hljs-built_in">int</span>(strs[i].<span class="hljs-built_in">size</span>()); <br>            <span class="hljs-keyword">if</span> (ans &gt; signedSizeI) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-type">int</span> signedSizeJ = <span class="hljs-built_in">int</span>(strs[j].<span class="hljs-built_in">size</span>());<br>                <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (i == j) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">isSub</span>(strs[i], strs[j])) &#123;<br>                    <span class="hljs-keyword">if</span>(invalid.<span class="hljs-built_in">count</span>(i) == <span class="hljs-number">0</span>) invalid.<span class="hljs-built_in">insert</span>(i);<br>                    <span class="hljs-keyword">if</span> (signedSizeI == signedSizeJ) &#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">isSub</span>(strs[j], strs[i]))&#123;<br>                            invalid.<span class="hljs-built_in">insert</span>(j);<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (invalid.<span class="hljs-built_in">count</span>(i) == <span class="hljs-number">0</span> &amp;&amp; j &lt; <span class="hljs-number">0</span> &amp;&amp; ans &lt; signedSizeI) &#123;<br>                ans = signedSizeI;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isSub</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; a, <span class="hljs-type">const</span> string&amp; b)</span> </span>&#123;<br>        <span class="hljs-type">int</span> lengthA = a.<span class="hljs-built_in">length</span>(), lengthB = b.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; lengthA &amp;&amp; j &lt; lengthB) &#123;<br>            <span class="hljs-keyword">if</span> (a[i] == b[j++]) &#123;<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i == lengthA;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Gitbook书写文档(不推荐)</title>
    <link href="/2022/06/27/%E4%BD%BF%E7%94%A8Gitbook%E4%B9%A6%E5%86%99%E6%96%87%E6%A1%A3/"/>
    <url>/2022/06/27/%E4%BD%BF%E7%94%A8Gitbook%E4%B9%A6%E5%86%99%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="说在前面"><a class="markdownIt-Anchor" href="#说在前面"></a> 说在前面:</h1><p>gitbook官网本身被墙虽然问题不大, 但是其在线编辑器极其恶心, 现在已经不推荐使用GitBook这款工具了.</p><h1 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1. 安装:</h1><h2 id="11-环境要求"><a class="markdownIt-Anchor" href="#11-环境要求"></a> 1.1  环境要求:</h2><ul><li>NodeJS (v4.0.0 and above is recommended):<code>Node.js版本需要为4.0.0以上</code></li><li>Windows, Linux, Unix, or Mac OS X: <code>全平台都支持</code></li></ul><h2 id="12-安装"><a class="markdownIt-Anchor" href="#12-安装"></a> 1.2 安装:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install gitbook-cli -g<br></code></pre></td></tr></table></figure><h2 id="13-创建book"><a class="markdownIt-Anchor" href="#13-创建book"></a> 1.3 创建<code>book</code>:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitbook init<br><br><span class="hljs-comment"># `preview` and `serve` your book using: </span><br>gitbook serve<br><br><span class="hljs-comment"># or `build` the static website using:</span><br>gitbook build<br></code></pre></td></tr></table></figure><h2 id="14-其他"><a class="markdownIt-Anchor" href="#14-其他"></a> 1.4 其他:</h2><blockquote><p>如果你想用其他版本的gitbook</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitbook fetch beta<br><br><span class="hljs-comment"># to list remote versions available for install</span><br>gitbook ls-remote <br></code></pre></td></tr></table></figure><blockquote><p>如果想调试网站, 获得更多异常链信息:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  to get better error messages (with stack trace)</span><br>gitbook build ./ --<span class="hljs-built_in">log</span>=debug --debug<br></code></pre></td></tr></table></figure><h1 id="2-项目结构"><a class="markdownIt-Anchor" href="#2-项目结构"></a> 2. 项目结构:</h1><h2 id="21-基础"><a class="markdownIt-Anchor" href="#21-基础"></a> 2.1 基础:</h2><p>每个<code>Gitbook</code>项目根目录都应该有一个<code>.gitbook.yaml</code>文件, 文件内容实例如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">root:</span> <span class="hljs-string">./docs</span><br><br><span class="hljs-attr">structure:</span>  <br>    <span class="hljs-attr">readme:</span> <span class="hljs-string">README.md</span>  <br>    <span class="hljs-attr">summary:</span> <span class="hljs-string">SUMMARY.md</span><br><br><span class="hljs-attr">redirects:</span>  <br>    <span class="hljs-attr">previous/page:</span> <span class="hljs-string">new-folder/page.md</span><br></code></pre></td></tr></table></figure><p>根目录还有一个可选的<code>book.json</code>用来添加插件, 创建文件添加内容后只需要执行<code>gitbook install</code>即可:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;演示用&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;演示&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;twilight&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zh-hans&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gitbook&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.2.3&quot;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;back-to-top-button&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;splitter&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;lightbox&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;custom-favicon&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;chapter-fold&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;page-toc-button&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;-sharing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;-lunr&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;-search&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;search-pro&quot;</span><br><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;pluginsConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><br>        <span class="hljs-attr">&quot;page-toc-button&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;maxTocDepth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;minTocSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;favicon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./assets/favicon.ico&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>        <br><br><span class="hljs-punctuation">&#125;</span><br><br>```json<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;back-to-top-button&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;lightbox&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;chapter-fold&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;page-toc-button&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;-sharing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;-lunr&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;-search&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;search-pro&quot;</span><br><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>## <span class="hljs-number">2.2</span> `root`:<br><br>&gt; `root`字段设置了一个搜索路径, GitBook会以该路径为根目录搜索相关文档<br>&gt; <br>&gt; `事实上, root字段目前似乎不能用, 并不推荐设置该属性!`<br><br>**所有其他指定路径的选项都会以根目录为相对路径**. 譬如将`structure.<span class="hljs-keyword">summary</span>`定义为`./product/<span class="hljs-keyword">SUMMARY</span>.md`, 那么GitBook将会搜索文件:`./docs/product/<span class="hljs-keyword">SUMMARY</span>.md`<br><br>## <span class="hljs-number">2.3</span> `structure`:<br><br>`structure`字段包含两个属性:<br><br>- `readme`: 该文档是文档的第一页, 其默认值为: `./README.md`<br>- `<span class="hljs-keyword">summary</span>`: 文档的目录, 其默认值为: `./<span class="hljs-keyword">SUMMARY</span>.md`<br><br>&gt; 他们的路径都是相对`root`而言的相对路径<br><br>## <span class="hljs-number">2.4</span> `<span class="hljs-keyword">summary</span>`:<br><br>```markdown<br># <span class="hljs-keyword">Summary</span><br><br>## Use headings <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> page <span class="hljs-keyword">groups</span> <span class="hljs-keyword">like</span> this one<br><br>* [First pag<span class="hljs-string">e&#x27;s title](page1/README.md)    </span><br><span class="hljs-string">    * [Some child page](page1/page1-1.md)    </span><br><span class="hljs-string">    * [Some other child page](part1/page1-2.md)</span><br><span class="hljs-string"></span><br><span class="hljs-string">* [Second page&#x27;</span>s title](page2/README.md)    <br>    * [<span class="hljs-keyword">Some</span> child page](page2/page2<span class="hljs-number">-1.</span>md)    <br>    * [<span class="hljs-keyword">Some</span> other child page](part2/page2<span class="hljs-number">-2.</span>md)    <br><br>## A second-page <span class="hljs-keyword">group</span><br><br>* [Yet another page](another-page.md)<br></code></pre></td></tr></table></figure><blockquote><p>The summary markdown file is <strong>a mirror of the Table of Contents</strong> of your GitBook space. So even when no summary file is provided during an initial import, GitBook will create one and/or update it whenever you update your content using the GitBook editor.</p><p>Due to this, it is not possible to reference the same markdown file twice in your <code>SUMMARY.md</code> file, because this would imply that a single page lives at two different URLs in your GitBook space.</p></blockquote><h2 id="25-redirects"><a class="markdownIt-Anchor" href="#25-redirects"></a> 2.5 <code>redirects</code>:</h2><p>GitBook允许用户自定义URL重定向.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redirects:  <br><span class="hljs-code">    help: support.md</span><br></code></pre></td></tr></table></figure><blockquote><p>当用户访问<code>/help</code>时,请求会被重定向到<code>/support</code>上.</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redirects:<br><span class="hljs-code">    help: misc/support.md</span><br></code></pre></td></tr></table></figure><blockquote><p><code>/help</code>被重定向到<code>/misc/support</code>上</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redirects:  <br><span class="hljs-code">    help/contact: contact.md</span><br></code></pre></td></tr></table></figure><blockquote><p><code>/help/contact</code>被重定向到<code>/contact</code>上</p></blockquote><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他:</h1><h2 id="gitbook出现typeerror-cbapply-is-not-a-function"><a class="markdownIt-Anchor" href="#gitbook出现typeerror-cbapply-is-not-a-function"></a> gitbook出现TypeError: cb.apply is not a function</h2><blockquote><p>降低node.js的版本: <code>10.14.1</code></p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md">https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.gitbook.com/integrations/git-sync/content-configuration">https://docs.gitbook.com/integrations/git-sync/content-configuration</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>文档撰写</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>机场推荐</title>
    <link href="/2022/06/27/%E6%9C%BA%E5%9C%BA%E6%8E%A8%E8%8D%90/"/>
    <url>/2022/06/27/%E6%9C%BA%E5%9C%BA%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1-glados点击直达"><a class="markdownIt-Anchor" href="#1-glados点击直达"></a> 1. <a href="https://github.com/glados-network/GLaDOS">GLaDOS(点击直达)</a></h1><blockquote><p>输入邀请码<code>W90XQ-WS8SY-37XTL-ULQ4X</code>, 我们俩都能获得14天, 举手之劳哦~:)</p></blockquote><h2 id="11-优点"><a class="markdownIt-Anchor" href="#11-优点"></a> 1.1 优点:</h2><ul><li>可使用学校邮箱免费领取一年edu套餐, 每月50G</li><li>套餐价格中规中矩:</li></ul><p><img src="https://imagebed.torch-fan.site/2022/blog/glados.png" alt="GlaDOS套餐价格" /></p><ul><li>教育用户可以使用<code>Think-Different</code>优惠码, 满100-50</li><li>支持的终端非常多:</li></ul><p><img src="https://imagebed.torch-fan.site/2022/blog/glados_app.png" alt="GlaDOS支持的终端应用和设备" /></p><h2 id="12-缺点"><a class="markdownIt-Anchor" href="#12-缺点"></a> 1.2 缺点:</h2><ul><li>低级套餐不够快, 但是日常使用还是可以的</li><li>套餐价格虽然可以, 但是还是太贵, 一般不需要那么多流量(200G), 有个50G其实就够了</li></ul><h1 id="2-墙裂点击直达"><a class="markdownIt-Anchor" href="#2-墙裂点击直达"></a> 2. <a href="https://my.qianglie.com/#/register?code=v3zqp9Ze">墙裂(点击直达)</a></h1><h2 id="21-优点"><a class="markdownIt-Anchor" href="#21-优点"></a> 2.1 优点:</h2><blockquote><p>由于优点过于突出, 就不介绍缺点了</p></blockquote><ul><li>极其的便宜, 也有BGP和IEPL线路</li></ul><p><img src="https://imagebed.torch-fan.site/2022/blog/qianglie_price1.png" alt="墙裂套餐价格1" /></p><p><img src="https://imagebed.torch-fan.site/2022/blog/qianglie_price2.png" alt="墙裂套餐价格2" /></p><p><img src="https://imagebed.torch-fan.site/2022/blog/qianglie_standard.png" alt="最便宜的Standard套餐" /></p>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>由Github托管的记笔记方式</title>
    <link href="/2022/06/25/%E7%94%B1Github%E6%89%98%E7%AE%A1%E7%9A%84%E8%AE%B0%E7%AC%94%E8%AE%B0%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/06/25/%E7%94%B1Github%E6%89%98%E7%AE%A1%E7%9A%84%E8%AE%B0%E7%AC%94%E8%AE%B0%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言:</h1><blockquote><p>读这篇笔记, 假如读者有一些博客搭建经验, 应当能很快心领神会, 否则这篇笔记并不适合你.</p></blockquote><p>使用Github托管笔记, 可以直接利用其提供的Github pages服务. 因为我比较喜欢用markdown写笔记, 因此做笔记主要是两种形式: 1. 使用hexo搭建的博客; 2. 使用gitbook<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://app.gitbook.com/">[1]</span></a></sup>. 这两者都可以用markdown进行书写, 而且源文件都托管在Github上, 不必担心笔记软件倒闭 (当然, Github也不是不可能倒闭或者被封的, 但是有生之年应该不至于).</p><h1 id="2-网页搭建准备"><a class="markdownIt-Anchor" href="#2-网页搭建准备"></a> 2. 网页搭建准备:</h1><h2 id="21-为什么要有这一节"><a class="markdownIt-Anchor" href="#21-为什么要有这一节"></a> 2.1 为什么要有这一节?</h2><p>直接用Github pages不是不能用, 但是国内访问可用性堪忧, 经常无法访问或者速度过慢. 为此可以考虑使用 netlify<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.netlify.com/">[2]</span></a></sup>或者cloudflare<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://cloudfare.com/">[3]</span></a></sup>. 我个人推荐cloudflare, 因为cloudflare的CDN要好一点的, 而且还提供web之外的一些其他服务(比如非常好用的cloudflare workers).</p><h2 id="22-前期准备"><a class="markdownIt-Anchor" href="#22-前期准备"></a> 2.2 前期准备:</h2><blockquote><p>所需的准备不多</p></blockquote><ol><li>域名一个(必选): 使用cloudflare的cdn托管必须要有域名, 反正也不贵</li><li>VPN一个(可选): netlify必须科学上网, cloudflare如果不科学上网访问太慢.</li></ol><h2 id="23-开始记笔记"><a class="markdownIt-Anchor" href="#23-开始记笔记"></a> 2.3 开始记笔记!</h2><p>其实至此, 已经没有什么需要做的了, 只需把github pages的自定义域名改一下,改成你在cloudflare中所设置域名(或者子域名),cloudflare会自动对该域名及其子域名开启CDN缓存, 加速访问.</p><h1 id="3-写笔记博客的图片放哪"><a class="markdownIt-Anchor" href="#3-写笔记博客的图片放哪"></a> 3. 写笔记/博客的图片放哪?</h1><p>如果与博客网站或者笔记放在一起, 似乎有那么一些不是很方便, 总之我不太喜欢这种方式; 如果用网上的图床, 我又很怀疑图床的可用性(说不定哪天就用不了了, 岂不是成了冤大头).</p><p>因此我的首选想法是用github pages托管静态资源, 反正前面有cloudflare进行CDN加速了. 剩余的问题就是如何方便的上传/删除图片, 很幸运的是有这样的软件, 不需要我们自己写: picgo<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://picgo.github.io/PicGo-Doc/zh/">[4]</span></a></sup> 和 upgit<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/pluveto/upgit">[5]</span></a></sup>.</p><p><img src="https://imagebed.torch-fan.site/blog/20220625182706.png" alt="PicGo主界面" /></p><p>PicGo支持以github为存储的图片上传功能, 且PicGo和upgit都支持在typora中直接使用, 但upgit只支持命令行, 因此windows用户推荐使用picgo. 在Typora验证Picgo时可能会遇到一个小问题:</p><p><img src="https://imagebed.torch-fan.site/blog/20220625184048.png" alt="Typora验证Picgo失败" /></p><p>这里看到Typora报错信息中的端口号, 与自身Picgo设置的监听端口是否一致, 如果有此报错信息, 一般是不一致导致的. 或者是由于CDN缓存延迟, 导致typora无法及时验证, 这个时候, typora就只能用其他图片托管平台了.</p><blockquote><p>推荐开启Picgo中的<code>上传前重命名</code>, 这样一来就可以自定义图片名字了!</p><p>最好设置好图片上传路径, 就好批量管理图片了.</p></blockquote><h1 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4. 总结:</h1><p>自购域名 + cloudflare / Gitbook + Picgo 就能有较为安心的写作体验(编辑器选择上少不了typora~)</p><blockquote><p>当你开始使用域名搭建笔记网站时, 又能发现cloudflare更神奇的功能~ 有些事进去了, 就出不来了.</p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://app.gitbook.com/">https://app.gitbook.com/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.netlify.com/">https://www.netlify.com/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://cloudfare.com/">https://cloudfare.com/</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://picgo.github.io/PicGo-Doc/zh/">https://picgo.github.io/PicGo-Doc/zh/</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://github.com/pluveto/upgit">https://github.com/pluveto/upgit</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DNS server整理(持续更新)</title>
    <link href="/2022/06/21/DNS-server%E6%95%B4%E7%90%86/"/>
    <url>/2022/06/21/DNS-server%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>收集DNS服务器的意义不在于能越过GFW, 而是在当前DNS污染越发严整的环境下，能够找到一个比较好的DNS server以便提供优质的github和onedrive（或microsoft相关软件）访问体验, 这一篇会持续更新, 并且根据日常体验随后会强调出比较好用的几个DNS server.</p><p>以下两类DNS解析方式安全上要更高一些:</p><p>DoH: DNS over HTTPS (一般可在浏览器中直接设置)<br />例如: <code>https://doh.pub/dns-query?</code></p><p>DoT: DNS over TLS</p><p>同时国外已经有网站收录了全球的公共DNS<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="超全的公共DNS列表">[6]</span></a></sup>, 如果想更灵活的选择DNS，可以参考该网站。</p></blockquote><p>推荐列表：</p><ul><li>阿里DNS（ipv4+ipv6）</li><li>114DNS（ipv4）</li><li>腾讯DNS</li></ul><p><img src="https://imagebed.torch-fan.site/2022/blog/dnsbenchmark.png" alt="DNS benchmark" /></p><h1 id="1-国内dns"><a class="markdownIt-Anchor" href="#1-国内dns"></a> 1. 国内DNS</h1><h2 id="1-腾讯dns-dnspod"><a class="markdownIt-Anchor" href="#1-腾讯dns-dnspod"></a> 1. 腾讯DNS （DNSPod）</h2><p>IPv4:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">119.29.29.29</span><br></code></pre></td></tr></table></figure><p>IPv6:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2402</span>:<span class="hljs-number">4</span>e00::<br></code></pre></td></tr></table></figure><p>DoH:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>doh.pub/dns-query<br><br>https:<span class="hljs-regexp">//</span>sm2.doh.pub/dns-query<br></code></pre></td></tr></table></figure><p>DoT:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-built_in">dot</span>.pub<br></code></pre></td></tr></table></figure><h2 id="2-阿里-dns-alidns"><a class="markdownIt-Anchor" href="#2-阿里-dns-alidns"></a> 2. 阿里 DNS (Alidns)</h2><p>IPv4:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">223.5.5.5</span><br><br><span class="hljs-number">223.6.6.6</span><br></code></pre></td></tr></table></figure><p>IPv6:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2400</span>:<span class="hljs-number">3200</span>::<span class="hljs-number">1</span><br><br><span class="hljs-attribute">2400</span>:<span class="hljs-number">3200</span>:baba::<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>DoH:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dns.alidns.com/dns-query<br></code></pre></td></tr></table></figure><p>DoT:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dns<span class="hljs-selector-class">.alidns</span>.com<br></code></pre></td></tr></table></figure><h2 id="3-百度-dns"><a class="markdownIt-Anchor" href="#3-百度-dns"></a> 3. 百度 DNS</h2><p>IPv4:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">180.76.76.76</span><br></code></pre></td></tr></table></figure><p>IPv6:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">2400</span><span class="hljs-symbol">:da00</span>::<span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><h2 id="4-360-安全-dns"><a class="markdownIt-Anchor" href="#4-360-安全-dns"></a> 4. 360 安全 DNS</h2><p>电信/铁通/移动 IPv4</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">101.226.4.6</span><br><br><span class="hljs-number">218.30.118.6</span><br></code></pre></td></tr></table></figure><p>联通 IPv4</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">123.125.81.6</span><br><br><span class="hljs-number">140.207.198.6</span><br></code></pre></td></tr></table></figure><p>DoH:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>doh.<span class="hljs-number">360</span>.cn<br></code></pre></td></tr></table></figure><p>DoT:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dot</span>.<span class="hljs-number">360</span>.cn<br></code></pre></td></tr></table></figure><h2 id="5-114dns"><a class="markdownIt-Anchor" href="#5-114dns"></a> 5. 114DNS</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">114.114.114.114</span><br><br><span class="hljs-number">114.114.115.115</span><br></code></pre></td></tr></table></figure><h2 id="6-microsoft"><a class="markdownIt-Anchor" href="#6-microsoft"></a> 6. Microsoft</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">4.2.2.1</span><br><br><span class="hljs-number">4.2.2.2</span><br></code></pre></td></tr></table></figure><blockquote><p>Xbox 推荐(这样还可以流畅上github):</p><ul><li>4.2.2.1</li><li>114.114.114.114</li></ul></blockquote><h1 id="2-国外dns"><a class="markdownIt-Anchor" href="#2-国外dns"></a> 2. 国外DNS</h1><blockquote><p>如果想流畅访问github, 主要得用国外的DNS</p></blockquote><h2 id="1-cloudfare-dns"><a class="markdownIt-Anchor" href="#1-cloudfare-dns"></a> 1. Cloudfare DNS</h2><p>IPv4:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">1.1.1.1</span><br><br><span class="hljs-number">1.0.0.1</span><br></code></pre></td></tr></table></figure><p>IPv6:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2606</span>:<span class="hljs-number">4700</span>:<span class="hljs-number">4700</span>::<span class="hljs-number">1111</span><br><br><span class="hljs-attribute">2606</span>:<span class="hljs-number">4700</span>:<span class="hljs-number">4700</span>::<span class="hljs-number">1001</span><br></code></pre></td></tr></table></figure><p>DoH:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloudflare-dns.com/dns-query<br><br>https:<span class="hljs-regexp">//</span><span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span>/dns-query<br><br>https:<span class="hljs-regexp">//</span><span class="hljs-number">1.0</span>.<span class="hljs-number">0.1</span>/dns-query<br></code></pre></td></tr></table></figure><p>DoT:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span>dot1dot1dot1.cloudflare-dns.com<br><br><span class="hljs-literal">one</span>.<span class="hljs-literal">one</span>.<span class="hljs-literal">one</span>.<span class="hljs-literal">one</span><br></code></pre></td></tr></table></figure><h2 id="2-quad9-dns-有时好用"><a class="markdownIt-Anchor" href="#2-quad9-dns-有时好用"></a> 2. Quad9 DNS (有时好用)</h2><p>IPv4:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">9.9.9.9</span><br><br><span class="hljs-number">149.112.112.112</span><br></code></pre></td></tr></table></figure><p>IPv6:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">2620</span><span class="hljs-symbol">:fe</span>::fe<br><br><span class="hljs-number">2620</span><span class="hljs-symbol">:fe</span>::<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>DoH:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dns.quad9.net/dns-query<br></code></pre></td></tr></table></figure><p>DoT:</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">dns.quad9.<span class="hljs-built_in">net</span><br></code></pre></td></tr></table></figure><h1 id="3-dns-related-tools"><a class="markdownIt-Anchor" href="#3-dns-related-tools"></a> 3. DNS related tools:</h1><ol><li>GRC(windows/Linux+wine)<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.grc.com/dns/benchmark.htm">[4]</span></a></sup></li><li>Adguard DNS</li></ol><h1 id="linuxubuntu下dns修改"><a class="markdownIt-Anchor" href="#linuxubuntu下dns修改"></a> Linux(Ubuntu)下DNS修改:</h1><h2 id="dns配置文件位置"><a class="markdownIt-Anchor" href="#dns配置文件位置"></a> DNS配置文件位置:</h2><ol><li>全局配置: <code>/etc/systemd/resolved.conf</code></li><li>局部配置(单个网卡): <code>/etc/NetworkManager</code>  (可能在<code>conf.d</code>下, 也有可能<code>system-cionnections</code>下, 反正在这个根目录下)</li></ol><h2 id="system-resolved-命令"><a class="markdownIt-Anchor" href="#system-resolved-命令"></a> <code>system-resolved</code> 命令:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemd-resolve --status <span class="hljs-comment"># 查看当前DNS配置信息</span><br>sudo systemd-resolve --revert -i eno3 <span class="hljs-comment"># 清空指定网卡的配置信息</span><br>sudo systemctl restart systemd-resolved.service <span class="hljs-comment">#　重启systemd-resolve使配置生效</span><br></code></pre></td></tr></table></figure><h1 id="4-clash-for-windowscfw推荐的dns设置"><a class="markdownIt-Anchor" href="#4-clash-for-windowscfw推荐的dns设置"></a> 4. clash for windows(CFW)推荐的DNS设置：</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mixin:</span> <span class="hljs-comment"># object</span><br>    <span class="hljs-attr">dns:</span><br>        <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">ipv6:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># enhanced-mode: redir-host</span><br>        <span class="hljs-attr">enhanced-mode:</span> <span class="hljs-string">fake-ip</span><br>        <span class="hljs-attr">fake-ip-range:</span> <span class="hljs-number">198.18</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">/16</span>   <span class="hljs-comment"># if you don&#x27;t know what it is, don&#x27;t change it</span><br>        <span class="hljs-attr">fake-ip-filter:</span>                <span class="hljs-comment"># fake ip white domain list, aka Always Real IP</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.lan&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">localhost.ptlogin2.qq.com</span><br>        <span class="hljs-attr">nameserver:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">tls://dot.pub</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">119.29</span><span class="hljs-number">.29</span><span class="hljs-number">.29</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">tcp://1.1.1.1</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;[2400:3200::1]:53&#x27;</span>  <span class="hljs-comment"># &#x27;[&lt;ipv6&gt;]:43&#x27; ipv6DNS要用这种格式才行~</span><br>        <span class="hljs-attr">fallback:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">4.2</span><span class="hljs-number">.2</span><span class="hljs-number">.1</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">119.29</span><span class="hljs-number">.29</span><span class="hljs-number">.29</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;[2400:3200::1]:53&#x27;</span><br>            <span class="hljs-comment"># - tcp://1.1.1.1</span><br>            <span class="hljs-comment"># - tcp://8.8.8.8</span><br>        <span class="hljs-attr">nameserver-policy:</span><br>            <span class="hljs-string">&#x27;+.live.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.live.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.office.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.office.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.sharepoint.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.office365.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.officeppe.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.skype.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.onedrive.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.msocsp.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.msauthimages.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.msauth.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.msn.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.onenote.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.onenote.net&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.1drv.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.microsoft.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>            <span class="hljs-string">&#x27;+.microsoftonline.com&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">&#x27;4.2.2.1&#x27;</span><br>        <span class="hljs-attr">fallback-filter:</span><br>            <span class="hljs-attr">geoip:</span> <span class="hljs-literal">true</span>  <br>            <span class="hljs-attr">geoip-code:</span> <span class="hljs-string">CN</span>         <br>            <span class="hljs-attr">ipcidr:</span>                      <br>            <span class="hljs-bullet">-</span> <span class="hljs-number">240.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/4</span><br>            <span class="hljs-attr">domain:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.google.com&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.facebook.com&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.youtube.com&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.github.com&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;+.live.com&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_39666550/article/details/119267446">https://blog.csdn.net/weixin_39666550/article/details/119267446</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://dns.icoa.cn/">https://dns.icoa.cn/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://dnscrypt.info/public-servers/">https://dnscrypt.info/public-servers/</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.grc.com/dns/benchmark.htm">https://www.grc.com/dns/benchmark.htm</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>保护电脑, 防止DNS劫持<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://adguard-dns.io/zh_cn/welcome.html">https://adguard-dns.io/zh_cn/welcome.html</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://adguard-dns.io/kb/general/dns-providers/">超全的公共DNS列表</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EWMA（指数加权平均法）</title>
    <link href="/2022/06/20/EWMA/"/>
    <url>/2022/06/20/EWMA/</url>
    
    <content type="html"><![CDATA[<h1 id="ewma与归一化层的渊源"><a class="markdownIt-Anchor" href="#ewma与归一化层的渊源"></a> EWMA与归一化层的渊源</h1><blockquote><p>EWMA (Exponentially Weighted Moving Average)</p><p>加权移动平均法，对观察值给予不同权重，越近的观察值给予更高的权重。相比传统的平均法，不需要保存过去所有的历史记录，且能够显著降低计算量</p></blockquote><p>事实上，这个EWMA在深度学习的各种normalization层里，以momentum参数的形式出现，以动量控制归一化层均值和方差参数的参数更新步骤。</p><p>EWMA的计算方式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>W</mi><mi>M</mi><msub><mi>A</mi><mi>t</mi></msub><mo>=</mo><mi>α</mi><mo>×</mo><msub><mi>r</mi><mi>t</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo>×</mo><mi>E</mi><mi>W</mi><mi>M</mi><msub><mi>A</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">EWMA_t = \alpha \times r_t + (1 - \alpha) \times EWMA_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://corporatefinanceinstitute.com/resources/knowledge/trading-investing/exponentially-weighted-moving-average-ewma/">https://corporatefinanceinstitute.com/resources/knowledge/trading-investing/exponentially-weighted-moving-average-ewma/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/187459739">https://zhuanlan.zhihu.com/p/187459739</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插值方法对图像保真度的影响</title>
    <link href="/2022/06/19/%E6%8F%92%E5%80%BC%E6%96%B9%E6%B3%95%E5%AF%B9%E5%9B%BE%E5%83%8F%E4%BF%9D%E7%9C%9F%E5%BA%A6%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <url>/2022/06/19/%E6%8F%92%E5%80%BC%E6%96%B9%E6%B3%95%E5%AF%B9%E5%9B%BE%E5%83%8F%E4%BF%9D%E7%9C%9F%E5%BA%A6%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>图像处理过程中，经常会用到插值方法对图像大小进行变换，然而不同的插值方法对图像影响非常大。这篇笔记仅作为一个引子，该论文的对比结果仅作参考，真正有价值的是其实验思路。</p><p>日后在进行图像处理过程中，能够对其有轻微印象，笔记的意义也就存在了。</p></blockquote><h1 id="1-实验对比结果"><a class="markdownIt-Anchor" href="#1-实验对比结果"></a> 1. 实验对比结果</h1><p><img src="https://imagebed.torch-fan.site/blog/20220619141842.png" alt="三维图像尺寸插值后对MSE的影响" /><br /><img src="https://imagebed.torch-fan.site/blog/20220619141952.png" alt="三维图像尺寸插值后的PSNR" /></p><p>作者没有对第三维度做比较严格的限制，但是根据表中结果，维度的变化会较大的影响图像的处理结果。</p><h1 id="2-衡量图像插值变换的后差异度"><a class="markdownIt-Anchor" href="#2-衡量图像插值变换的后差异度"></a> 2. 衡量图像插值变换的后差异度：</h1><h2 id="21-mse"><a class="markdownIt-Anchor" href="#21-mse"></a> 2.1 MSE</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>S</mi><mi>E</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi>M</mi><mo>×</mo><mi>N</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>M</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">MSE = \frac{1}{M \times N} \sum_{i=1}^M \sum_{j=1}^{N} (f&#x27;(i,j) - f(i, j)) ^ 2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2421130000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="22-psnrpeak-signal-to-noise-ratio-峰值信噪比-越大表示图像保真度越高"><a class="markdownIt-Anchor" href="#22-psnrpeak-signal-to-noise-ratio-峰值信噪比-越大表示图像保真度越高"></a> 2.2 PSNR(Peak Signal-to-Noise Ratio, 峰值信噪比)： 越大表示图像保真度越高</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>S</mi><mi>N</mi><mi>R</mi><mo>=</mo><mn>10</mn><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mfrac><msup><mi>Q</mi><mn>2</mn></msup><mrow><mi>M</mi><mi>S</mi><mi>E</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">PSNR =  10 log_{10}\frac{Q^2}{MSE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>Q表示像素的灰度阶，一般是255</p></blockquote><h2 id="23-ssimstructural-similarity-index-结构相似性但过于计算稍因此仅做了解知道他是用均值-协方差来计算相似度的即可"><a class="markdownIt-Anchor" href="#23-ssimstructural-similarity-index-结构相似性但过于计算稍因此仅做了解知道他是用均值-协方差来计算相似度的即可"></a> 2.3 SSIM(Structural Similarity Index): 结构相似性——但过于计算稍，因此仅做了解，知道他是用均值、协方差来计算相似度的即可。</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考文献：《Evaluation of interpolation effects on upsampling and accuracy of cost functions-based optimized automatic image registration》 <a href="https://doi.org/10.1155/2013/395915">https://doi.org/10.1155/2013/395915</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南开网关的API</title>
    <link href="/2022/06/17/%E5%8D%97%E5%BC%80%E7%BD%91%E5%85%B3%E7%9A%84API/"/>
    <url>/2022/06/17/%E5%8D%97%E5%BC%80%E7%BD%91%E5%85%B3%E7%9A%84API/</url>
    
    <content type="html"><![CDATA[<h1 id="1-联网的api模板"><a class="markdownIt-Anchor" href="#1-联网的api模板"></a> 1. 联网的API模板</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">IP=&lt;xx.xx.xx.xx&gt;<br>USER=&lt;account name&gt;<br>PASSWD=&lt;your password&gt;<br><br>curl --location --request GET <span class="hljs-string">&#x27;http://202.113.18.106:801/eportal/?c=ACSetting&amp;a=Login&amp;loginMethod=1&amp;protocol=http%3A&amp;hostname=202.113.18.106&amp;port=&amp;iTermType=1&amp;wlanuserip=&#x27;</span><span class="hljs-variable">$IP</span><span class="hljs-string">&#x27;&amp;wlanacip=null&amp;wlanacname=null&amp;redirect=null&amp;session=null&amp;vlanid=0&amp;mac=00-00-00-00-00-00&amp;ip=&#x27;</span><span class="hljs-variable">$IP</span><span class="hljs-string">&#x27;&amp;enAdvert=0&amp;jsVersion=2.4.3&amp;DDDDD=&#x27;</span><span class="hljs-variable">$USER</span><span class="hljs-string">&#x27;&amp;upass=&#x27;</span><span class="hljs-variable">$PASSWD</span><span class="hljs-string">&#x27;&amp;R1=0&amp;R2=0&amp;R3=0&amp;R6=0&amp;para=00&amp;0MKKey=123456&amp;buttonClicked=&amp;redirect_url=&amp;err_flag=&amp;username=&amp;password=&amp;user=&amp;cmd=&amp;Login=&#x27;</span> --header <span class="hljs-string">&#x27;Connection: keep-alive&#x27;</span> --header <span class="hljs-string">&#x27;Upgrade-Insecure-Requests: 1&#x27;</span>  --header <span class="hljs-string">&#x27;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#x27;</span> --header <span class="hljs-string">&#x27;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span> --header <span class="hljs-string">&#x27;Referer: http://202.113.18.106/&#x27;</span> --header <span class="hljs-string">&#x27;Accept-Language: zh,en-US;q=0.9,en;q=0.8&#x27;</span> --header <span class="hljs-string">&#x27;Cookie: PHPSESSID=ovt8a9cipcg3qvs1iru5imn6q4; SL_GWPT_Show_Hide_tmp=1; SL_G_WPT_TO=en; SL_wptGlobTipTmp=1&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="2-注销网关的api"><a class="markdownIt-Anchor" href="#2-注销网关的api"></a> 2. 注销网关的API</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&#x27;http://202.113.18.106:801/eportal/?c=ACSetting&amp;a=Logout&amp;loginMethod=1&amp;runRadius=1&amp;DDDDD=&amp;protocol=http%3A&amp;hostname=202.113.18.106&amp;port=&amp;iTermType=1&amp;wlanuserip=null&amp;wlanacip=null&amp;wlanacname=null&amp;redirect=null&amp;session=null&amp;vlanid=undefined&amp;mac=00-00-00-00-00-00&amp;ip=&amp;queryACIP=0&amp;jsVersion=2.4.3&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Accept-Language: zh,en-US;q=0.9,en;q=0.8,zh-CN;q=0.7&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Cookie: PHPSESSID=nao32p0q126vq9se8up9ioh2s0&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;DNT: 1&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Proxy-Connection: keep-alive&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Referer: http://202.113.18.106/&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;Upgrade-Insecure-Requests: 1&#x27;</span> \<br>  -H <span class="hljs-string">&#x27;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36&#x27;</span> \<br>  --compressed \<br>  --insecure<br></code></pre></td></tr></table></figure><h1 id="3-其他途径"><a class="markdownIt-Anchor" href="#3-其他途径"></a> 3. 其他途径：</h1><p>如果本机无curl也无网络无法安装，推荐使用clash的局域网代理功能，在命令行设置代理后，先安装好net-tools然后继续：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=&lt;xx.xx.xx.xx&gt;:&lt;port&gt;<br><span class="hljs-built_in">export</span> https_proxy=&lt;xx.xx.xx.xx&gt;:&lt;port&gt;<br></code></pre></td></tr></table></figure><blockquote><p>当命令行设置代理之后，该终端可以通过代理将请求发在代理主机上，然后间接上网（局域网内可直接通信~）, 当然这样描述不是很清楚，可以直接问我，演示一遍就直接会了~</p></blockquote><h1 id="4-南开的dns服务器"><a class="markdownIt-Anchor" href="#4-南开的dns服务器"></a> 4. 南开的DNS服务器：</h1><ul><li>202.113.16.41</li><li>222.30.45.41</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>南开</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello~</title>
    <link href="/2022/05/25/hello/"/>
    <url>/2022/05/25/hello/</url>
    
    <content type="html"><![CDATA[<p>努力做笔记!</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
